'use strict';
!function(m) {
  /**
   * @param {number} i
   * @return {?}
   */
  function t(i) {
    if (n[i]) {
      return n[i].exports;
    }
    var module = n[i] = {
      i : i,
      l : false,
      exports : {}
    };
    return m[i].call(module.exports, module, module.exports, t), module.l = true, module.exports;
  }
  var n = {};
  t.m = m;
  t.c = n;
  /**
   * @param {!Function} e
   * @param {string} n
   * @param {!Function} val
   * @return {undefined}
   */
  t.d = function(e, n, val) {
    if (!t.o(e, n)) {
      Object.defineProperty(e, n, {
        configurable : false,
        enumerable : true,
        get : val
      });
    }
  };
  /**
   * @param {string} e
   * @return {?}
   */
  t.n = function(e) {
    /** @type {function(): ?} */
    var n = e && e.__esModule ? function() {
      return e.default;
    } : function() {
      return e;
    };
    return t.d(n, "a", n), n;
  };
  /**
   * @param {!Function} e
   * @param {string} input
   * @return {?}
   */
  t.o = function(e, input) {
    return Object.prototype.hasOwnProperty.call(e, input);
  };
  /** @type {string} */
  t.p = "./";
  t(t.s = 0);
}({
  0 : function(module, object, instantiate) {
    module.exports = instantiate("JkW7");
  },
  "1/9l" : function(clickRepeater, e, n) {
    (function(resultPage) {
      +function($) {
        /**
         * @param {!Function} config
         * @return {?}
         */
        function Plugin(config) {
          return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.tooltip");
            var options = "object" == typeof config && config;
            if (!(!data && /destroy|hide/.test(config))) {
              if (!data) {
                $this.data("bs.tooltip", data = new Tooltip(this, options));
              }
              if ("string" == typeof config) {
                data[config]();
              }
            }
          });
        }
        /**
         * @param {string} type
         * @param {!Object} target
         * @return {undefined}
         */
        var Tooltip = function(type, target) {
          /** @type {null} */
          this.type = null;
          /** @type {null} */
          this.options = null;
          /** @type {null} */
          this.enabled = null;
          /** @type {null} */
          this.timeout = null;
          /** @type {null} */
          this.hoverState = null;
          /** @type {null} */
          this.$element = null;
          /** @type {null} */
          this.inState = null;
          this.init("tooltip", type, target);
        };
        /** @type {string} */
        Tooltip.VERSION = "3.3.7";
        /** @type {number} */
        Tooltip.TRANSITION_DURATION = 150;
        Tooltip.DEFAULTS = {
          animation : true,
          placement : "top",
          selector : false,
          template : '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
          trigger : "hover focus",
          title : "",
          delay : 0,
          html : false,
          container : false,
          viewport : {
            selector : "body",
            padding : 0
          }
        };
        /**
         * @param {string} type
         * @param {string} field
         * @param {!Object} options
         * @return {undefined}
         */
        Tooltip.prototype.init = function(type, field, options) {
          if (this.enabled = true, this.type = type, this.$element = $(field), this.options = this.getOptions(options), this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : this.options.viewport.selector || this.options.viewport), this.inState = {
            click : false,
            hover : false,
            focus : false
          }, this.$element[0] instanceof document.constructor && !this.options.selector) {
            throw new Error("`selector` option must be specified when initializing " + this.type + " on the window.document object!");
          }
          var sArrTypes = this.options.trigger.split(" ");
          var iTempIndex = sArrTypes.length;
          for (; iTempIndex--;) {
            var sType = sArrTypes[iTempIndex];
            if ("click" == sType) {
              this.$element.on("click." + this.type, this.options.selector, $.proxy(this.toggle, this));
            } else {
              if ("manual" != sType) {
                /** @type {string} */
                var eventIn = "hover" == sType ? "mouseenter" : "focusin";
                /** @type {string} */
                var eventOut = "hover" == sType ? "mouseleave" : "focusout";
                this.$element.on(eventIn + "." + this.type, this.options.selector, $.proxy(this.enter, this));
                this.$element.on(eventOut + "." + this.type, this.options.selector, $.proxy(this.leave, this));
              }
            }
          }
          if (this.options.selector) {
            this._options = $.extend({}, this.options, {
              trigger : "manual",
              selector : ""
            });
          } else {
            this.fixTitle();
          }
        };
        /**
         * @return {?}
         */
        Tooltip.prototype.getDefaults = function() {
          return Tooltip.DEFAULTS;
        };
        /**
         * @param {!Object} options
         * @return {?}
         */
        Tooltip.prototype.getOptions = function(options) {
          return options = $.extend({}, this.getDefaults(), this.$element.data(), options), options.delay && "number" == typeof options.delay && (options.delay = {
            show : options.delay,
            hide : options.delay
          }), options;
        };
        /**
         * @return {?}
         */
        Tooltip.prototype.getDelegateOptions = function() {
          var someStoreStorage = {};
          var defaults = this.getDefaults();
          return this._options && $.each(this._options, function(key, value) {
            if (defaults[key] != value) {
              someStoreStorage[key] = value;
            }
          }), someStoreStorage;
        };
        /**
         * @param {!Object} obj
         * @return {?}
         */
        Tooltip.prototype.enter = function(obj) {
          var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data("bs." + this.type);
          return self || (self = new this.constructor(obj.currentTarget, this.getDelegateOptions()), $(obj.currentTarget).data("bs." + this.type, self)), obj instanceof $.Event && (self.inState["focusin" == obj.type ? "focus" : "hover"] = true), self.tip().hasClass("in") || "in" == self.hoverState ? void(self.hoverState = "in") : (clearTimeout(self.timeout), self.hoverState = "in", self.options.delay && self.options.delay.show ? void(self.timeout = setTimeout(function() {
            if ("in" == self.hoverState) {
              self.show();
            }
          }, self.options.delay.show)) : self.show());
        };
        /**
         * @return {?}
         */
        Tooltip.prototype.isInStateTrue = function() {
          var key;
          for (key in this.inState) {
            if (this.inState[key]) {
              return true;
            }
          }
          return false;
        };
        /**
         * @param {!Object} obj
         * @return {?}
         */
        Tooltip.prototype.leave = function(obj) {
          var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data("bs." + this.type);
          if (self || (self = new this.constructor(obj.currentTarget, this.getDelegateOptions()), $(obj.currentTarget).data("bs." + this.type, self)), obj instanceof $.Event && (self.inState["focusout" == obj.type ? "focus" : "hover"] = false), !self.isInStateTrue()) {
            if (clearTimeout(self.timeout), self.hoverState = "out", !self.options.delay || !self.options.delay.hide) {
              return self.hide();
            }
            /** @type {number} */
            self.timeout = setTimeout(function() {
              if ("out" == self.hoverState) {
                self.hide();
              }
            }, self.options.delay.hide);
          }
        };
        /**
         * @return {undefined}
         */
        Tooltip.prototype.show = function() {
          var event = $.Event("show.bs." + this.type);
          if (this.hasContent() && this.enabled) {
            this.$element.trigger(event);
            var i = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);
            if (event.isDefaultPrevented() || !i) {
              return;
            }
            var self = this;
            var $tip = this.tip();
            var tipId = this.getUID(this.type);
            this.setContent();
            $tip.attr("id", tipId);
            this.$element.attr("aria-describedby", tipId);
            if (this.options.animation) {
              $tip.addClass("fade");
            }
            var placement = "function" == typeof this.options.placement ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;
            /** @type {!RegExp} */
            var autoToken = /\s?auto?\s?/i;
            /** @type {boolean} */
            var autoPlace = autoToken.test(placement);
            if (autoPlace) {
              placement = placement.replace(autoToken, "") || "top";
            }
            $tip.detach().css({
              top : 0,
              left : 0,
              display : "block"
            }).addClass(placement).data("bs." + this.type, this);
            if (this.options.container) {
              $tip.appendTo(this.options.container);
            } else {
              $tip.insertAfter(this.$element);
            }
            this.$element.trigger("inserted.bs." + this.type);
            var pos = this.getPosition();
            var actualWidth = $tip[0].offsetWidth;
            var actualHeight = $tip[0].offsetHeight;
            if (autoPlace) {
              var orgPlacement = placement;
              var viewportDim = this.getPosition(this.$viewport);
              placement = "bottom" == placement && pos.bottom + actualHeight > viewportDim.bottom ? "top" : "top" == placement && pos.top - actualHeight < viewportDim.top ? "bottom" : "right" == placement && pos.right + actualWidth > viewportDim.width ? "left" : "left" == placement && pos.left - actualWidth < viewportDim.left ? "right" : placement;
              $tip.removeClass(orgPlacement).addClass(placement);
            }
            var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);
            this.applyPlacement(calculatedOffset, placement);
            /**
             * @return {undefined}
             */
            var complete = function() {
              var dir = self.hoverState;
              self.$element.trigger("shown.bs." + self.type);
              /** @type {null} */
              self.hoverState = null;
              if ("out" == dir) {
                self.leave(self);
              }
            };
            if ($.support.transition && this.$tip.hasClass("fade")) {
              $tip.one("bsTransitionEnd", complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION);
            } else {
              complete();
            }
          }
        };
        /**
         * @param {!Object} offset
         * @param {string} placement
         * @return {undefined}
         */
        Tooltip.prototype.applyPlacement = function(offset, placement) {
          var $tip = this.tip();
          var width = $tip[0].offsetWidth;
          var height = $tip[0].offsetHeight;
          /** @type {number} */
          var marginTop = parseInt($tip.css("margin-top"), 10);
          /** @type {number} */
          var marginLeft = parseInt($tip.css("margin-left"), 10);
          if (isNaN(marginTop)) {
            /** @type {number} */
            marginTop = 0;
          }
          if (isNaN(marginLeft)) {
            /** @type {number} */
            marginLeft = 0;
          }
          offset.top += marginTop;
          offset.left += marginLeft;
          $.offset.setOffset($tip[0], $.extend({
            using : function(props) {
              $tip.css({
                top : Math.round(props.top),
                left : Math.round(props.left)
              });
            }
          }, offset), 0);
          $tip.addClass("in");
          var actualWidth = $tip[0].offsetWidth;
          var actualHeight = $tip[0].offsetHeight;
          if ("top" == placement && actualHeight != height) {
            /** @type {number} */
            offset.top = offset.top + height - actualHeight;
          }
          var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);
          if (delta.left) {
            offset.left += delta.left;
          } else {
            offset.top += delta.top;
          }
          /** @type {boolean} */
          var isVertical = /top|bottom/.test(placement);
          var arrowDelta = isVertical ? 2 * delta.left - width + actualWidth : 2 * delta.top - height + actualHeight;
          /** @type {string} */
          var arrowOffsetPosition = isVertical ? "offsetWidth" : "offsetHeight";
          $tip.offset(offset);
          this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical);
        };
        /**
         * @param {(boolean|number|string)} delta
         * @param {(boolean|number|string)} dimension
         * @param {boolean} isVertical
         * @return {undefined}
         */
        Tooltip.prototype.replaceArrow = function(delta, dimension, isVertical) {
          this.arrow().css(isVertical ? "left" : "top", 50 * (1 - delta / dimension) + "%").css(isVertical ? "top" : "left", "");
        };
        /**
         * @return {undefined}
         */
        Tooltip.prototype.setContent = function() {
          var $tip = this.tip();
          var titleText = this.getTitle();
          $tip.find(".tooltip-inner")[this.options.html ? "html" : "text"](titleText);
          $tip.removeClass("fade in top bottom left right");
        };
        /**
         * @param {!Function} callback
         * @return {?}
         */
        Tooltip.prototype.hide = function(callback) {
          /**
           * @return {undefined}
           */
          function complete() {
            if ("in" != self.hoverState) {
              $tip.detach();
            }
            if (self.$element) {
              self.$element.removeAttr("aria-describedby").trigger("hidden.bs." + self.type);
            }
            if (callback) {
              callback();
            }
          }
          var self = this;
          var $tip = $(this.$tip);
          var event = $.Event("hide.bs." + this.type);
          if (this.$element.trigger(event), !event.isDefaultPrevented()) {
            return $tip.removeClass("in"), $.support.transition && $tip.hasClass("fade") ? $tip.one("bsTransitionEnd", complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete(), this.hoverState = null, this;
          }
        };
        /**
         * @return {undefined}
         */
        Tooltip.prototype.fixTitle = function() {
          var $e = this.$element;
          if ($e.attr("title") || "string" != typeof $e.attr("data-original-title")) {
            $e.attr("data-original-title", $e.attr("title") || "").attr("title", "");
          }
        };
        /**
         * @return {?}
         */
        Tooltip.prototype.hasContent = function() {
          return this.getTitle();
        };
        /**
         * @param {!Object} $element
         * @return {?}
         */
        Tooltip.prototype.getPosition = function($element) {
          $element = $element || this.$element;
          var el = $element[0];
          /** @type {boolean} */
          var isBody = "BODY" == el.tagName;
          var elRect = el.getBoundingClientRect();
          if (null == elRect.width) {
            elRect = $.extend({}, elRect, {
              width : elRect.right - elRect.left,
              height : elRect.bottom - elRect.top
            });
          }
          var isSvg = window.SVGElement && el instanceof window.SVGElement;
          var elOffset = isBody ? {
            top : 0,
            left : 0
          } : isSvg ? null : $element.offset();
          var scroll = {
            scroll : isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop()
          };
          /** @type {(null|{height: ?, width: ?})} */
          var outerDims = isBody ? {
            width : $(window).width(),
            height : $(window).height()
          } : null;
          return $.extend({}, elRect, scroll, outerDims, elOffset);
        };
        /**
         * @param {string} position
         * @param {!Object} pos
         * @param {number} actualWidth
         * @param {number} actualHeight
         * @return {?}
         */
        Tooltip.prototype.getCalculatedOffset = function(position, pos, actualWidth, actualHeight) {
          return "bottom" == position ? {
            top : pos.top + pos.height,
            left : pos.left + pos.width / 2 - actualWidth / 2
          } : "top" == position ? {
            top : pos.top - actualHeight,
            left : pos.left + pos.width / 2 - actualWidth / 2
          } : "left" == position ? {
            top : pos.top + pos.height / 2 - actualHeight / 2,
            left : pos.left - actualWidth
          } : {
            top : pos.top + pos.height / 2 - actualHeight / 2,
            left : pos.left + pos.width
          };
        };
        /**
         * @param {string} placement
         * @param {!Object} pos
         * @param {?} actualWidth
         * @param {number} actualHeight
         * @return {?}
         */
        Tooltip.prototype.getViewportAdjustedDelta = function(placement, pos, actualWidth, actualHeight) {
          var delta = {
            top : 0,
            left : 0
          };
          if (!this.$viewport) {
            return delta;
          }
          var viewportPadding = this.options.viewport && this.options.viewport.padding || 0;
          var viewportDimensions = this.getPosition(this.$viewport);
          if (/right|left/.test(placement)) {
            /** @type {number} */
            var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll;
            var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight;
            if (topEdgeOffset < viewportDimensions.top) {
              /** @type {number} */
              delta.top = viewportDimensions.top - topEdgeOffset;
            } else {
              if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) {
                /** @type {number} */
                delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;
              }
            }
          } else {
            /** @type {number} */
            var leftEdgeOffset = pos.left - viewportPadding;
            var rightEdgeOffset = pos.left + viewportPadding + actualWidth;
            if (leftEdgeOffset < viewportDimensions.left) {
              /** @type {number} */
              delta.left = viewportDimensions.left - leftEdgeOffset;
            } else {
              if (rightEdgeOffset > viewportDimensions.right) {
                /** @type {number} */
                delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;
              }
            }
          }
          return delta;
        };
        /**
         * @return {?}
         */
        Tooltip.prototype.getTitle = function() {
          var $e = this.$element;
          var o = this.options;
          return $e.attr("data-original-title") || ("function" == typeof o.title ? o.title.call($e[0]) : o.title);
        };
        /**
         * @param {number} id
         * @return {?}
         */
        Tooltip.prototype.getUID = function(id) {
          do {
            id = id + ~~(1E6 * Math.random());
          } while (document.getElementById(id));
          return id;
        };
        /**
         * @return {?}
         */
        Tooltip.prototype.tip = function() {
          if (!this.$tip && (this.$tip = $(this.options.template), 1 != this.$tip.length)) {
            throw new Error(this.type + " `template` option must consist of exactly 1 top-level element!");
          }
          return this.$tip;
        };
        /**
         * @return {?}
         */
        Tooltip.prototype.arrow = function() {
          return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow");
        };
        /**
         * @return {undefined}
         */
        Tooltip.prototype.enable = function() {
          /** @type {boolean} */
          this.enabled = true;
        };
        /**
         * @return {undefined}
         */
        Tooltip.prototype.disable = function() {
          /** @type {boolean} */
          this.enabled = false;
        };
        /**
         * @return {undefined}
         */
        Tooltip.prototype.toggleEnabled = function() {
          /** @type {boolean} */
          this.enabled = !this.enabled;
        };
        /**
         * @param {!Event} event
         * @return {undefined}
         */
        Tooltip.prototype.toggle = function(event) {
          var self = this;
          if (event) {
            if (!(self = $(event.currentTarget).data("bs." + this.type))) {
              self = new this.constructor(event.currentTarget, this.getDelegateOptions());
              $(event.currentTarget).data("bs." + this.type, self);
            }
          }
          if (event) {
            /** @type {boolean} */
            self.inState.click = !self.inState.click;
            if (self.isInStateTrue()) {
              self.enter(self);
            } else {
              self.leave(self);
            }
          } else {
            if (self.tip().hasClass("in")) {
              self.leave(self);
            } else {
              self.enter(self);
            }
          }
        };
        /**
         * @return {undefined}
         */
        Tooltip.prototype.destroy = function() {
          var that = this;
          clearTimeout(this.timeout);
          this.hide(function() {
            that.$element.off("." + that.type).removeData("bs." + that.type);
            if (that.$tip) {
              that.$tip.detach();
            }
            /** @type {null} */
            that.$tip = null;
            /** @type {null} */
            that.$arrow = null;
            /** @type {null} */
            that.$viewport = null;
            /** @type {null} */
            that.$element = null;
          });
        };
        var old = $.fn.tooltip;
        /** @type {function(!Function): ?} */
        $.fn.tooltip = Plugin;
        /** @type {function(string, !Object): undefined} */
        $.fn.tooltip.Constructor = Tooltip;
        /**
         * @return {?}
         */
        $.fn.tooltip.noConflict = function() {
          return $.fn.tooltip = old, this;
        };
      }(resultPage);
    }).call(e, n("juYr"));
  },
  "25lU" : function(clickRepeater, e, f) {
    var x = f("juYr");
    var month = (f.n(x), f("6wzU"));
    var s = (f.n(month), f("nzgf"));
    var store = f.n(s);
    var value = f("e9iq");
    f.n(value);
    f.d(e, "a", function() {
      return store.a;
    });
  },
  "4FPD" : function(blob, name, universe) {
    /** @type {string} */
    blob.exports = universe.p + "assets/apple-icon-180x180.png";
  },
  "4hhi" : function(blob, name, universe) {
    /** @type {string} */
    blob.exports = universe.p + "assets/images/profil.jpg";
  },
  "4vuW" : function(blob, name, universe) {
    /** @type {string} */
    blob.exports = universe.p + "assets/images/work001-03.jpg";
  },
  "6wzU" : function(data, linkedEntities, force) {
    force("Lu+Q");
    force("s51k");
    force("m5Wh");
    force("x66a");
    force("laCn");
    force("hxo1");
    force("mEQU");
    force("1/9l");
    force("oOvE");
    force("gnpq");
    force("vQEO");
    force("V1TA");
  },
  "6xrK" : function(blob, name, universe) {
    /** @type {string} */
    blob.exports = universe.p + "assets/images/work03-hover.jpg";
  },
  JkW7 : function(clickRepeater, e, s) {
    Object.defineProperty(e, "__esModule", {
      value : true
    });
    var value = s("PExH");
    var o = (s.n(value), s("25lU"), s("aWFY"));
    !function(t) {
      t.keys().map(t);
    }(s("pax0"));
    Object.assign(window, {
      type : o.c,
      navActivePage : o.b,
      movingBackgroundImage : o.a
    });
  },
  "Lu+Q" : function(clickRepeater, e, n) {
    (function(resultPage) {
      +function($) {
        /**
         * @return {?}
         */
        function transitionEnd() {
          /** @type {!Element} */
          var el = document.createElement("bootstrap");
          var transEndEventNames = {
            WebkitTransition : "webkitTransitionEnd",
            MozTransition : "transitionend",
            OTransition : "oTransitionEnd otransitionend",
            transition : "transitionend"
          };
          var name;
          for (name in transEndEventNames) {
            if (void 0 !== el.style[name]) {
              return {
                end : transEndEventNames[name]
              };
            }
          }
          return false;
        }
        /**
         * @param {number} duration
         * @return {?}
         */
        $.fn.emulateTransitionEnd = function(duration) {
          /** @type {boolean} */
          var n = false;
          var unloadedImgElement = this;
          $(this).one("bsTransitionEnd", function() {
            /** @type {boolean} */
            n = true;
          });
          /**
           * @return {undefined}
           */
          var callback = function() {
            if (!n) {
              $(unloadedImgElement).trigger($.support.transition.end);
            }
          };
          return setTimeout(callback, duration), this;
        };
        $(function() {
          $.support.transition = transitionEnd();
          if ($.support.transition) {
            $.event.special.bsTransitionEnd = {
              bindType : $.support.transition.end,
              delegateType : $.support.transition.end,
              handle : function(event) {
                if ($(event.target).is(this)) {
                  return event.handleObj.handler.apply(this, arguments);
                }
              }
            };
          }
        });
      }(resultPage);
    }).call(e, n("juYr"));
  },
  LyUB : function(blob, name, universe) {
    /** @type {string} */
    blob.exports = universe.p + "assets/images/work001-04.jpg";
  },
  PExH : function(formatters, customFormatters) {
  },
  V1TA : function(clickRepeater, e, n) {
    (function(resultPage) {
      +function($) {
        /**
         * @param {!Function} opts
         * @return {?}
         */
        function Plugin(opts) {
          return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.affix");
            var options = "object" == typeof opts && opts;
            if (!data) {
              $this.data("bs.affix", data = new Affix(this, options));
            }
            if ("string" == typeof opts) {
              data[opts]();
            }
          });
        }
        /**
         * @param {string} element
         * @param {!Object} options
         * @return {undefined}
         */
        var Affix = function(element, options) {
          this.options = $.extend({}, Affix.DEFAULTS, options);
          this.$target = $(this.options.target).on("scroll.bs.affix.data-api", $.proxy(this.checkPosition, this)).on("click.bs.affix.data-api", $.proxy(this.checkPositionWithEventLoop, this));
          this.$element = $(element);
          /** @type {null} */
          this.affixed = null;
          /** @type {null} */
          this.unpin = null;
          /** @type {null} */
          this.pinnedOffset = null;
          this.checkPosition();
        };
        /** @type {string} */
        Affix.VERSION = "3.3.7";
        /** @type {string} */
        Affix.RESET = "affix affix-top affix-bottom";
        Affix.DEFAULTS = {
          offset : 0,
          target : window
        };
        /**
         * @param {number} scrollHeight
         * @param {string} height
         * @param {?} offsetTop
         * @param {number} offsetBottom
         * @return {?}
         */
        Affix.prototype.getState = function(scrollHeight, height, offsetTop, offsetBottom) {
          var scrollTop = this.$target.scrollTop();
          var position = this.$element.offset();
          var targetHeight = this.$target.height();
          if (null != offsetTop && "top" == this.affixed) {
            return scrollTop < offsetTop && "top";
          }
          if ("bottom" == this.affixed) {
            return null != offsetTop ? !(scrollTop + this.unpin <= position.top) && "bottom" : !(scrollTop + targetHeight <= scrollHeight - offsetBottom) && "bottom";
          }
          /** @type {boolean} */
          var initializing = null == this.affixed;
          var colliderTop = initializing ? scrollTop : position.top;
          var colliderHeight = initializing ? targetHeight : height;
          return null != offsetTop && scrollTop <= offsetTop ? "top" : null != offsetBottom && colliderTop + colliderHeight >= scrollHeight - offsetBottom && "bottom";
        };
        /**
         * @return {?}
         */
        Affix.prototype.getPinnedOffset = function() {
          if (this.pinnedOffset) {
            return this.pinnedOffset;
          }
          this.$element.removeClass(Affix.RESET).addClass("affix");
          var scrollTop = this.$target.scrollTop();
          var position = this.$element.offset();
          return this.pinnedOffset = position.top - scrollTop;
        };
        /**
         * @return {undefined}
         */
        Affix.prototype.checkPositionWithEventLoop = function() {
          setTimeout($.proxy(this.checkPosition, this), 1);
        };
        /**
         * @return {undefined}
         */
        Affix.prototype.checkPosition = function() {
          if (this.$element.is(":visible")) {
            var height = this.$element.height();
            var offset = this.options.offset;
            var offsetTop = offset.top;
            var offsetBottom = offset.bottom;
            /** @type {number} */
            var scrollHeight = Math.max($(document).height(), $(document.body).height());
            if ("object" != typeof offset) {
              offsetBottom = offsetTop = offset;
            }
            if ("function" == typeof offsetTop) {
              offsetTop = offset.top(this.$element);
            }
            if ("function" == typeof offsetBottom) {
              offsetBottom = offset.bottom(this.$element);
            }
            var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom);
            if (this.affixed != affix) {
              if (null != this.unpin) {
                this.$element.css("top", "");
              }
              /** @type {string} */
              var affixType = "affix" + (affix ? "-" + affix : "");
              var event = $.Event(affixType + ".bs.affix");
              if (this.$element.trigger(event), event.isDefaultPrevented()) {
                return;
              }
              this.affixed = affix;
              this.unpin = "bottom" == affix ? this.getPinnedOffset() : null;
              this.$element.removeClass(Affix.RESET).addClass(affixType).trigger(affixType.replace("affix", "affixed") + ".bs.affix");
            }
            if ("bottom" == affix) {
              this.$element.offset({
                top : scrollHeight - height - offsetBottom
              });
            }
          }
        };
        var old = $.fn.affix;
        /** @type {function(!Function): ?} */
        $.fn.affix = Plugin;
        /** @type {function(string, !Object): undefined} */
        $.fn.affix.Constructor = Affix;
        /**
         * @return {?}
         */
        $.fn.affix.noConflict = function() {
          return $.fn.affix = old, this;
        };
        $(window).on("load", function() {
          $('[data-spy="affix"]').each(function() {
            var $spy = $(this);
            var data = $spy.data();
            data.offset = data.offset || {};
            if (null != data.offsetBottom) {
              data.offset.bottom = data.offsetBottom;
            }
            if (null != data.offsetTop) {
              data.offset.top = data.offsetTop;
            }
            Plugin.call($spy, data);
          });
        });
      }(resultPage);
    }).call(e, n("juYr"));
  },
  aWFY : function(eventStr, a, n) {
    (function($) {
      /**
       * @param {?} s
       * @return {undefined}
       */
      function b(s) {
        new p.a("#typed", {
          stringsElement : "#typed-strings",
          typeSpeed : 100,
          backSpeed : 20,
          loop : true,
          loopCount : 1 / 0
        });
      }
      /**
       * @return {undefined}
       */
      function advancedTabs() {
        $('nav li a[href=".' + location.pathname + '"]').addClass("active");
        if ("/" == location.pathname) {
          $('nav li a[href="./index.html"]').addClass("active");
        }
      }
      /**
       * @return {undefined}
       */
      function FBOHelper() {
        /** @type {(Element|null)} */
        var t = document.querySelector(".hero-full-container");
        /** @type {number} */
        var width = window.innerWidth / 5;
        /** @type {number} */
        var zoom = window.innerHeight / 5;
        t.addEventListener("mousemove", function(event) {
          /** @type {number} */
          var bw1 = event.clientX / width;
          /** @type {number} */
          var y = event.clientY / zoom;
          /** @type {string} */
          t.style.transform = "translate3d(-" + 1.5 * bw1 + "px, -" + 1.5 * y + "px, 0)";
        });
      }
      n.d(a, "c", function() {
        return b;
      });
      n.d(a, "b", function() {
        return advancedTabs;
      });
      n.d(a, "a", function() {
        return FBOHelper;
      });
      var p = n("25lU");
    }).call(a, n("juYr"));
  },
  bz8M : function(blob, name, universe) {
    /** @type {string} */
    blob.exports = universe.p + "assets/images/work001-01.jpg";
  },
  e9iq : function(formatters, customFormatters) {
  },
  gnpq : function(clickRepeater, e, n) {
    (function(resultPage) {
      +function($) {
        /**
         * @param {!Object} selector
         * @param {!Object} options
         * @return {undefined}
         */
        function ScrollSpy(selector, options) {
          this.$body = $(document.body);
          this.$scrollElement = $($(selector).is(document.body) ? window : selector);
          this.options = $.extend({}, ScrollSpy.DEFAULTS, options);
          /** @type {string} */
          this.selector = (this.options.target || "") + " .nav li > a";
          /** @type {!Array} */
          this.offsets = [];
          /** @type {!Array} */
          this.targets = [];
          /** @type {null} */
          this.activeTarget = null;
          /** @type {number} */
          this.scrollHeight = 0;
          this.$scrollElement.on("scroll.bs.scrollspy", $.proxy(this.process, this));
          this.refresh();
          this.process();
        }
        /**
         * @param {!Function} opts
         * @return {?}
         */
        function Plugin(opts) {
          return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.scrollspy");
            var options = "object" == typeof opts && opts;
            if (!data) {
              $this.data("bs.scrollspy", data = new ScrollSpy(this, options));
            }
            if ("string" == typeof opts) {
              data[opts]();
            }
          });
        }
        /** @type {string} */
        ScrollSpy.VERSION = "3.3.7";
        ScrollSpy.DEFAULTS = {
          offset : 10
        };
        /**
         * @return {?}
         */
        ScrollSpy.prototype.getScrollHeight = function() {
          return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight);
        };
        /**
         * @return {undefined}
         */
        ScrollSpy.prototype.refresh = function() {
          var self = this;
          /** @type {string} */
          var min = "offset";
          /** @type {number} */
          var searchBarHeight = 0;
          /** @type {!Array} */
          this.offsets = [];
          /** @type {!Array} */
          this.targets = [];
          this.scrollHeight = this.getScrollHeight();
          if (!$.isWindow(this.$scrollElement[0])) {
            /** @type {string} */
            min = "position";
            searchBarHeight = this.$scrollElement.scrollTop();
          }
          this.$body.find(this.selector).map(function() {
            var e = $(this);
            var href = e.data("target") || e.attr("href");
            var set = /^#./.test(href) && $(href);
            return set && set.length && set.is(":visible") && [[set[min]().top + searchBarHeight, href]] || null;
          }).sort(function(subtractor, subtractee) {
            return subtractor[0] - subtractee[0];
          }).each(function() {
            self.offsets.push(this[0]);
            self.targets.push(this[1]);
          });
        };
        /**
         * @return {?}
         */
        ScrollSpy.prototype.process = function() {
          var i;
          var scrollTop = this.$scrollElement.scrollTop() + this.options.offset;
          var scrollHeight = this.getScrollHeight();
          /** @type {number} */
          var maxScroll = this.options.offset + scrollHeight - this.$scrollElement.height();
          var offsets = this.offsets;
          var targets = this.targets;
          var activeTarget = this.activeTarget;
          if (this.scrollHeight != scrollHeight && this.refresh(), scrollTop >= maxScroll) {
            return activeTarget != (i = targets[targets.length - 1]) && this.activate(i);
          }
          if (activeTarget && scrollTop < offsets[0]) {
            return this.activeTarget = null, this.clear();
          }
          i = offsets.length;
          for (; i--;) {
            if (activeTarget != targets[i] && scrollTop >= offsets[i] && (void 0 === offsets[i + 1] || scrollTop < offsets[i + 1])) {
              this.activate(targets[i]);
            }
          }
        };
        /**
         * @param {string} target
         * @return {undefined}
         */
        ScrollSpy.prototype.activate = function(target) {
          /** @type {string} */
          this.activeTarget = target;
          this.clear();
          /** @type {string} */
          var columnContainer = this.selector + '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]';
          var active = $(columnContainer).parents("li").addClass("active");
          if (active.parent(".dropdown-menu").length) {
            active = active.closest("li.dropdown").addClass("active");
          }
          active.trigger("activate.bs.scrollspy");
        };
        /**
         * @return {undefined}
         */
        ScrollSpy.prototype.clear = function() {
          $(this.selector).parentsUntil(this.options.target, ".active").removeClass("active");
        };
        var old = $.fn.scrollspy;
        /** @type {function(!Function): ?} */
        $.fn.scrollspy = Plugin;
        /** @type {function(!Object, !Object): undefined} */
        $.fn.scrollspy.Constructor = ScrollSpy;
        /**
         * @return {?}
         */
        $.fn.scrollspy.noConflict = function() {
          return $.fn.scrollspy = old, this;
        };
        $(window).on("load.bs.scrollspy.data-api", function() {
          $('[data-spy="scroll"]').each(function() {
            var $spy = $(this);
            Plugin.call($spy, $spy.data());
          });
        });
      }(resultPage);
    }).call(e, n("juYr"));
  },
  hxo1 : function(clickRepeater, e, n) {
    (function(resultPage) {
      +function($) {
        /**
         * @param {!Object} $this
         * @return {?}
         */
        function getParent($this) {
          var selector = $this.attr("data-target");
          if (!selector) {
            selector = $this.attr("href");
            selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, "");
          }
          var $parent = selector && $(selector);
          return $parent && $parent.length ? $parent : $this.parent();
        }
        /**
         * @param {!Object} e
         * @return {undefined}
         */
        function clearMenus(e) {
          if (!(e && 3 === e.which)) {
            $(liToRemove).remove();
            $(INPUT_SELECTOR).each(function() {
              var $this = $(this);
              var $parent = getParent($this);
              var options = {
                relatedTarget : this
              };
              if ($parent.hasClass("open")) {
                if (!(e && "click" == e.type && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target))) {
                  $parent.trigger(e = $.Event("hide.bs.dropdown", options));
                  if (!e.isDefaultPrevented()) {
                    $this.attr("aria-expanded", "false");
                    $parent.removeClass("open").trigger($.Event("hidden.bs.dropdown", options));
                  }
                }
              }
            });
          }
        }
        /**
         * @param {?} name
         * @return {?}
         */
        function Plugin(name) {
          return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.dropdown");
            if (!data) {
              $this.data("bs.dropdown", data = new Dropdown(this));
            }
            if ("string" == typeof name) {
              data[name].call($this);
            }
          });
        }
        /** @type {string} */
        var liToRemove = ".dropdown-backdrop";
        /** @type {string} */
        var INPUT_SELECTOR = '[data-toggle="dropdown"]';
        /**
         * @param {string} elem
         * @return {undefined}
         */
        var Dropdown = function(elem) {
          $(elem).on("click.bs.dropdown", this.toggle);
        };
        /** @type {string} */
        Dropdown.VERSION = "3.3.7";
        /**
         * @param {!Object} e
         * @return {?}
         */
        Dropdown.prototype.toggle = function(e) {
          var $this = $(this);
          if (!$this.is(".disabled, :disabled")) {
            var $parent = getParent($this);
            var isActive = $parent.hasClass("open");
            if (clearMenus(), !isActive) {
              if ("ontouchstart" in document.documentElement && !$parent.closest(".navbar-nav").length) {
                $(document.createElement("div")).addClass("dropdown-backdrop").insertAfter($(this)).on("click", clearMenus);
              }
              var options = {
                relatedTarget : this
              };
              if ($parent.trigger(e = $.Event("show.bs.dropdown", options)), e.isDefaultPrevented()) {
                return;
              }
              $this.trigger("focus").attr("aria-expanded", "true");
              $parent.toggleClass("open").trigger($.Event("shown.bs.dropdown", options));
            }
            return false;
          }
        };
        /**
         * @param {!Event} e
         * @return {?}
         */
        Dropdown.prototype.keydown = function(e) {
          if (/(38|40|27|32)/.test(e.which) && !/input|textarea/i.test(e.target.tagName)) {
            var obj = $(this);
            if (e.preventDefault(), e.stopPropagation(), !obj.is(".disabled, :disabled")) {
              var parent = getParent(obj);
              var isActive = parent.hasClass("open");
              if (!isActive && 27 != e.which || isActive && 27 == e.which) {
                return 27 == e.which && parent.find(INPUT_SELECTOR).trigger("focus"), obj.trigger("click");
              }
              var a = parent.find(".dropdown-menu li:not(.disabled):visible a");
              if (a.length) {
                var l = a.index(e.target);
                if (38 == e.which && l > 0) {
                  l--;
                }
                if (40 == e.which && l < a.length - 1) {
                  l++;
                }
                if (!~l) {
                  /** @type {number} */
                  l = 0;
                }
                a.eq(l).trigger("focus");
              }
            }
          }
        };
        var old = $.fn.dropdown;
        /** @type {function(?): ?} */
        $.fn.dropdown = Plugin;
        /** @type {function(string): undefined} */
        $.fn.dropdown.Constructor = Dropdown;
        /**
         * @return {?}
         */
        $.fn.dropdown.noConflict = function() {
          return $.fn.dropdown = old, this;
        };
        $(document).on("click.bs.dropdown.data-api", clearMenus).on("click.bs.dropdown.data-api", ".dropdown form", function(event) {
          event.stopPropagation();
        }).on("click.bs.dropdown.data-api", INPUT_SELECTOR, Dropdown.prototype.toggle).on("keydown.bs.dropdown.data-api", INPUT_SELECTOR, Dropdown.prototype.keydown).on("keydown.bs.dropdown.data-api", ".dropdown-menu", Dropdown.prototype.keydown);
      }(resultPage);
    }).call(e, n("juYr"));
  },
  jgpj : function(blob, name, universe) {
    /** @type {string} */
    blob.exports = universe.p + "assets/images/work01-hover.jpg";
  },
  juYr : function(s, e, islongclick) {
    var groups;
    var result;
    !function(global, factory) {
      if ("object" == typeof s && "object" == typeof s.exports) {
        s.exports = global.document ? factory(global, true) : function(global) {
          if (!global.document) {
            throw new Error("jQuery requires a window with a document");
          }
          return factory(global);
        };
      } else {
        factory(global);
      }
    }("undefined" != typeof window ? window : this, function(window, zoomAware) {
      /**
       * @param {string} value
       * @param {!Object} doc
       * @return {undefined}
       */
      function test(value, doc) {
        doc = doc || document;
        var node = doc.createElement("script");
        /** @type {string} */
        node.text = value;
        doc.head.appendChild(node).parentNode.removeChild(node);
      }
      /**
       * @param {!Object} obj
       * @return {?}
       */
      function isArrayLike(obj) {
        var length = !!obj && "length" in obj && obj.length;
        var ltype = jQuery.type(obj);
        return "function" !== ltype && !jQuery.isWindow(obj) && ("array" === ltype || 0 === length || "number" == typeof length && length > 0 && length - 1 in obj);
      }
      /**
       * @param {!Object} name
       * @param {string} selector
       * @return {?}
       */
      function callback(name, selector) {
        return name.nodeName && name.nodeName.toLowerCase() === selector.toLowerCase();
      }
      /**
       * @param {!Object} key
       * @param {!Object} value
       * @param {boolean} not
       * @return {?}
       */
      function winnow(key, value, not) {
        return jQuery.isFunction(value) ? jQuery.grep(key, function(context, i) {
          return !!value.call(context, i, context) !== not;
        }) : value.nodeType ? jQuery.grep(key, function(elem) {
          return elem === value !== not;
        }) : "string" != typeof value ? jQuery.grep(key, function(name) {
          return indexOf.call(value, name) > -1 !== not;
        }) : trueRE.test(value) ? jQuery.filter(value, key, not) : (value = jQuery.filter(value, key), jQuery.grep(key, function(selector) {
          return indexOf.call(value, selector) > -1 !== not && 1 === selector.nodeType;
        }));
      }
      /**
       * @param {(Array|Element)} cur
       * @param {number} dir
       * @return {?}
       */
      function sibling(cur, dir) {
        for (; (cur = cur[dir]) && 1 !== cur.nodeType;) {
        }
        return cur;
      }
      /**
       * @param {string} options
       * @return {?}
       */
      function createOptions(options) {
        var subwikiListsCache = {};
        return jQuery.each(options.match(rnotwhite) || [], function(canCreateDiscussions, wikiId) {
          /** @type {boolean} */
          subwikiListsCache[wikiId] = true;
        }), subwikiListsCache;
      }
      /**
       * @param {?} vec
       * @return {?}
       */
      function m(vec) {
        return vec;
      }
      /**
       * @param {?} state
       * @return {?}
       */
      function undefined(state) {
        throw state;
      }
      /**
       * @param {!Object} obj
       * @param {!Function} data
       * @param {!Function} object
       * @param {boolean} value
       * @return {undefined}
       */
      function resolve(obj, data, object, value) {
        var value;
        try {
          if (obj && jQuery.isFunction(value = obj.promise)) {
            value.call(obj).done(data).fail(object);
          } else {
            if (obj && jQuery.isFunction(value = obj.then)) {
              value.call(obj, data, object);
            } else {
              data.apply(void 0, [obj].slice(value));
            }
          }
        } catch (obj) {
          object.apply(void 0, [obj]);
        }
      }
      /**
       * @return {undefined}
       */
      function $__jsx_onload() {
        document.removeEventListener("DOMContentLoaded", $__jsx_onload);
        window.removeEventListener("load", $__jsx_onload);
        jQuery.ready();
      }
      /**
       * @return {undefined}
       */
      function Data() {
        this.expando = jQuery.expando + Data.uid++;
      }
      /**
       * @param {string} value
       * @return {?}
       */
      function isLiteralExpression(value) {
        return "true" === value || "false" !== value && ("null" === value ? null : value === +value + "" ? +value : contribRegex.test(value) ? JSON.parse(value) : value);
      }
      /**
       * @param {!Object} elem
       * @param {!Object} target
       * @param {!Array} content
       * @return {?}
       */
      function set(elem, target, content) {
        var name;
        if (void 0 === content && 1 === elem.nodeType) {
          if (name = "data-" + target.replace(rhyphen, "-$&").toLowerCase(), "string" == typeof(content = elem.getAttribute(name))) {
            try {
              content = isLiteralExpression(content);
            } catch (t) {
            }
            $.set(elem, target, content);
          } else {
            content = void 0;
          }
        }
        return content;
      }
      /**
       * @param {!Object} elem
       * @param {string} prop
       * @param {!Object} valueParts
       * @param {!Object} tween
       * @return {?}
       */
      function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted;
        /** @type {number} */
        var scale = 1;
        /** @type {number} */
        var s = 20;
        /** @type {function(): ?} */
        var currentValue = tween ? function() {
          return tween.cur();
        } : function() {
          return jQuery.css(elem, prop, "");
        };
        var initial = currentValue();
        var unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px");
        var initialInUnit = (jQuery.cssNumber[prop] || "px" !== unit && +initial) && regex.exec(jQuery.css(elem, prop));
        if (initialInUnit && initialInUnit[3] !== unit) {
          unit = unit || initialInUnit[3];
          valueParts = valueParts || [];
          /** @type {number} */
          initialInUnit = +initial || 1;
          do {
            /** @type {(number|string)} */
            scale = scale || ".5";
            /** @type {number} */
            initialInUnit = initialInUnit / scale;
            jQuery.style(elem, prop, initialInUnit + unit);
          } while (scale !== (scale = currentValue() / initial) && 1 !== scale && --s);
        }
        return valueParts && (initialInUnit = +initialInUnit || +initial || 0, adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2], tween && (tween.unit = unit, tween.start = initialInUnit, tween.end = adjusted)), adjusted;
      }
      /**
       * @param {!Node} elem
       * @return {?}
       */
      function getDefaultDisplay(elem) {
        var a;
        var doc = elem.ownerDocument;
        var name = elem.nodeName;
        var b = colors[name];
        return b || (a = doc.body.appendChild(doc.createElement(name)), b = jQuery.css(a, "display"), a.parentNode.removeChild(a), "none" === b && (b = "block"), colors[name] = b, b);
      }
      /**
       * @param {!Array} elements
       * @param {boolean} options
       * @return {?}
       */
      function showHide(elements, options) {
        var display;
        var elem;
        /** @type {!Array} */
        var values = [];
        /** @type {number} */
        var index = 0;
        var length = elements.length;
        for (; index < length; index++) {
          elem = elements[index];
          if (elem.style) {
            display = elem.style.display;
            if (options) {
              if ("none" === display) {
                values[index] = dataPriv.get(elem, "display") || null;
                if (!values[index]) {
                  /** @type {string} */
                  elem.style.display = "";
                }
              }
              if ("" === elem.style.display && isHidden(elem)) {
                values[index] = getDefaultDisplay(elem);
              }
            } else {
              if ("none" !== display) {
                /** @type {string} */
                values[index] = "none";
                dataPriv.set(elem, "display", display);
              }
            }
          }
        }
        /** @type {number} */
        index = 0;
        for (; index < length; index++) {
          if (null != values[index]) {
            elements[index].style.display = values[index];
          }
        }
        return elements;
      }
      /**
       * @param {!Object} context
       * @param {number} tag
       * @return {?}
       */
      function getAll(context, tag) {
        var n;
        return n = void 0 !== context.getElementsByTagName ? context.getElementsByTagName(tag || "*") : void 0 !== context.querySelectorAll ? context.querySelectorAll(tag || "*") : [], void 0 === tag || tag && callback(context, tag) ? jQuery.merge([context], n) : n;
      }
      /**
       * @param {number} elems
       * @param {!NodeList} refElements
       * @return {undefined}
       */
      function setGlobalEval(elems, refElements) {
        /** @type {number} */
        var i = 0;
        var length = elems.length;
        for (; i < length; i++) {
          dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
        }
      }
      /**
       * @param {!Object} elems
       * @param {!Object} context
       * @param {string} scripts
       * @param {!Object} arr
       * @param {!Object} result
       * @return {?}
       */
      function buildFragment(elems, context, scripts, arr, result) {
        var elem;
        var tmp;
        var tag;
        var wrap;
        var ret;
        var j;
        var fragment = context.createDocumentFragment();
        /** @type {!Array} */
        var nodes = [];
        /** @type {number} */
        var i = 0;
        var length = elems.length;
        for (; i < length; i++) {
          if ((elem = elems[i]) || 0 === elem) {
            if ("object" === jQuery.type(elem)) {
              jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
            } else {
              if (re_commas.test(elem)) {
                tmp = tmp || fragment.appendChild(context.createElement("div"));
                tag = (fullLinkRegex.exec(elem) || ["", ""])[1].toLowerCase();
                wrap = wrapMap[tag] || wrapMap._default;
                tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];
                j = wrap[0];
                for (; j--;) {
                  tmp = tmp.lastChild;
                }
                jQuery.merge(nodes, tmp.childNodes);
                tmp = fragment.firstChild;
                /** @type {string} */
                tmp.textContent = "";
              } else {
                nodes.push(context.createTextNode(elem));
              }
            }
          }
        }
        /** @type {string} */
        fragment.textContent = "";
        /** @type {number} */
        i = 0;
        for (; elem = nodes[i++];) {
          if (arr && jQuery.inArray(elem, arr) > -1) {
            if (result) {
              result.push(elem);
            }
          } else {
            if (ret = jQuery.contains(elem.ownerDocument, elem), tmp = getAll(fragment.appendChild(elem), "script"), ret && setGlobalEval(tmp), scripts) {
              /** @type {number} */
              j = 0;
              for (; elem = tmp[j++];) {
                if (opacityRe.test(elem.type || "")) {
                  scripts.push(elem);
                }
              }
            }
          }
        }
        return fragment;
      }
      /**
       * @return {?}
       */
      function returnTrue() {
        return true;
      }
      /**
       * @return {?}
       */
      function returnFalse() {
        return false;
      }
      /**
       * @return {?}
       */
      function safeActiveElement() {
        try {
          return document.activeElement;
        } catch (t) {
        }
      }
      /**
       * @param {!Object} context
       * @param {string} config
       * @param {!Object} value
       * @param {!Object} name
       * @param {!Object} callback
       * @param {number} useCapture
       * @return {?}
       */
      function bind(context, config, value, name, callback, useCapture) {
        var handler;
        var c;
        if ("object" == typeof config) {
          if ("string" != typeof value) {
            name = name || value;
            value = void 0;
          }
          for (c in config) {
            bind(context, c, value, name, config[c], useCapture);
          }
          return context;
        }
        if (null == name && null == callback ? (callback = value, name = value = void 0) : null == callback && ("string" == typeof value ? (callback = name, name = void 0) : (callback = name, name = value, value = void 0)), false === callback) {
          /** @type {function(): ?} */
          callback = returnFalse;
        } else {
          if (!callback) {
            return context;
          }
        }
        return 1 === useCapture && (handler = callback, callback = function(type) {
          return jQuery().off(type), handler.apply(this, arguments);
        }, callback.guid = handler.guid || (handler.guid = jQuery.guid++)), context.each(function() {
          jQuery.event.add(this, config, callback, name, value);
        });
      }
      /**
       * @param {undefined} context
       * @param {!Element} content
       * @return {?}
       */
      function manipulationTarget(context, content) {
        return callback(context, "table") && callback(11 !== content.nodeType ? content : content.firstChild, "tr") ? jQuery(">tbody", context)[0] || context : context;
      }
      /**
       * @param {!Element} elem
       * @return {?}
       */
      function input(elem) {
        return elem.type = (null !== elem.getAttribute("type")) + "/" + elem.type, elem;
      }
      /**
       * @param {!Object} s
       * @return {?}
       */
      function createGeneNameGenomicState(s) {
        /** @type {(Array<string>|null)} */
        var l = re.exec(s.type);
        return l ? s.type = l[1] : s.removeAttribute("type"), s;
      }
      /**
       * @param {!Object} src
       * @param {!Object} dest
       * @return {undefined}
       */
      function cloneCopyEvent(src, dest) {
        var i;
        var tableslen;
        var type;
        var pdataOld;
        var pdataCur;
        var fn;
        var children;
        var events;
        if (1 === dest.nodeType) {
          if (dataPriv.hasData(src) && (pdataOld = dataPriv.access(src), pdataCur = dataPriv.set(dest, pdataOld), events = pdataOld.events)) {
            delete pdataCur.handle;
            pdataCur.events = {};
            for (type in events) {
              /** @type {number} */
              i = 0;
              tableslen = events[type].length;
              for (; i < tableslen; i++) {
                jQuery.event.add(dest, type, events[type][i]);
              }
            }
          }
          if ($.hasData(src)) {
            fn = $.access(src);
            children = jQuery.extend({}, fn);
            $.set(dest, children);
          }
        }
      }
      /**
       * @param {!Object} src
       * @param {!Object} dest
       * @return {undefined}
       */
      function fixInput(src, dest) {
        var undefined = dest.nodeName.toLowerCase();
        if ("input" === undefined && reg.test(src.type)) {
          dest.checked = src.checked;
        } else {
          if (!("input" !== undefined && "textarea" !== undefined)) {
            dest.defaultValue = src.defaultValue;
          }
        }
      }
      /**
       * @param {!Object} collection
       * @param {!Object} args
       * @param {!Function} callback
       * @param {!Element} ignored
       * @return {?}
       */
      function domManip(collection, args, callback, ignored) {
        /** @type {!Array<?>} */
        args = concat.apply([], args);
        var fragment;
        var first;
        var e;
        var result;
        var node;
        var doc;
        /** @type {number} */
        var key = 0;
        var i = collection.length;
        /** @type {number} */
        var prevKey = i - 1;
        var a = args[0];
        var klases = jQuery.isFunction(a);
        if (klases || i > 1 && "string" == typeof a && !support.checkClone && reKeyword.test(a)) {
          return collection.each(function(index) {
            var self = collection.eq(index);
            if (klases) {
              args[0] = a.call(this, index, self.html());
            }
            domManip(self, args, callback, ignored);
          });
        }
        if (i && (fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored), first = fragment.firstChild, 1 === fragment.childNodes.length && (fragment = first), first || ignored)) {
          e = jQuery.map(getAll(fragment, "script"), input);
          result = e.length;
          for (; key < i; key++) {
            node = fragment;
            if (key !== prevKey) {
              node = jQuery.clone(node, true, true);
              if (result) {
                jQuery.merge(e, getAll(node, "script"));
              }
            }
            callback.call(collection[key], node, key);
          }
          if (result) {
            doc = e[e.length - 1].ownerDocument;
            jQuery.map(e, createGeneNameGenomicState);
            /** @type {number} */
            key = 0;
            for (; key < result; key++) {
              node = e[key];
              if (opacityRe.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
                if (node.src) {
                  if (jQuery._evalUrl) {
                    jQuery._evalUrl(node.src);
                  }
                } else {
                  test(node.textContent.replace(codePoint, ""), doc);
                }
              }
            }
          }
        }
        return collection;
      }
      /**
       * @param {!Object} target
       * @param {!Function} selector
       * @param {string} keepData
       * @return {?}
       */
      function remove(target, selector, keepData) {
        var elem;
        var nodes = selector ? jQuery.filter(selector, target) : target;
        /** @type {number} */
        var i = 0;
        for (; null != (elem = nodes[i]); i++) {
          if (!(keepData || 1 !== elem.nodeType)) {
            jQuery.cleanData(getAll(elem));
          }
          if (elem.parentNode) {
            if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
              setGlobalEval(getAll(elem, "script"));
            }
            elem.parentNode.removeChild(elem);
          }
        }
        return target;
      }
      /**
       * @param {!Object} elem
       * @param {string} name
       * @param {!Object} computed
       * @return {?}
       */
      function curCSS(elem, name, computed) {
        var i;
        var width;
        var maxWidth;
        var value;
        var element = elem.style;
        return computed = computed || getStyles(elem), computed && (value = computed.getPropertyValue(name) || computed[name], "" !== value || jQuery.contains(elem.ownerDocument, elem) || (value = jQuery.style(elem, name)), !support.pixelMarginRight() && exactRegExp.test(value) && namespaces.test(name) && (i = element.width, width = element.minWidth, maxWidth = element.maxWidth, element.minWidth = element.maxWidth = element.width = value, value = computed.width, element.width = i, element.minWidth = 
        width, element.maxWidth = maxWidth)), void 0 !== value ? value + "" : value;
      }
      /**
       * @param {?} conditionFn
       * @param {!Function} hookFn
       * @return {?}
       */
      function addGetHookIf(conditionFn, hookFn) {
        return {
          get : function() {
            return conditionFn() ? void delete this.get : (this.get = hookFn).apply(this, arguments);
          }
        };
      }
      /**
       * @param {string} name
       * @return {?}
       */
      function getName(name) {
        if (name in style) {
          return name;
        }
        var UserSelect = name[0].toUpperCase() + name.slice(1);
        /** @type {number} */
        var i = prefixes.length;
        for (; i--;) {
          if ((name = prefixes[i] + UserSelect) in style) {
            return name;
          }
        }
      }
      /**
       * @param {string} name
       * @return {?}
       */
      function vendorPropName(name) {
        var e = jQuery.cssProps[name];
        return e || (e = jQuery.cssProps[name] = getName(name) || name), e;
      }
      /**
       * @param {!Object} elem
       * @param {!Object} value
       * @param {string} name
       * @return {?}
       */
      function fn(elem, value, name) {
        /** @type {(Array<string>|null)} */
        var matches = regex.exec(value);
        return matches ? Math.max(0, matches[2] - (name || 0)) + (matches[3] || "px") : value;
      }
      /**
       * @param {!Object} elem
       * @param {string} name
       * @param {string} extra
       * @param {boolean} isBorderBox
       * @param {!Object} styles
       * @return {?}
       */
      function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i;
        /** @type {number} */
        var val = 0;
        /** @type {number} */
        i = extra === (isBorderBox ? "border" : "content") ? 4 : "width" === name ? 1 : 0;
        for (; i < 4; i = i + 2) {
          if ("margin" === extra) {
            val = val + jQuery.css(elem, extra + cssExpand[i], true, styles);
          }
          if (isBorderBox) {
            if ("content" === extra) {
              /** @type {number} */
              val = val - jQuery.css(elem, "padding" + cssExpand[i], true, styles);
            }
            if ("margin" !== extra) {
              /** @type {number} */
              val = val - jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            }
          } else {
            val = val + jQuery.css(elem, "padding" + cssExpand[i], true, styles);
            if ("padding" !== extra) {
              val = val + jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            }
          }
        }
        return val;
      }
      /**
       * @param {!Object} elem
       * @param {string} name
       * @param {!Object} extra
       * @return {?}
       */
      function getWidthOrHeight(elem, name, extra) {
        var valueIsBorderBox;
        var styles = getStyles(elem);
        var value = curCSS(elem, name, styles);
        /** @type {boolean} */
        var isBorderBox = "border-box" === jQuery.css(elem, "boxSizing", false, styles);
        return exactRegExp.test(value) ? value : (valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || value === elem.style[name]), "auto" === value && (value = elem["offset" + name[0].toUpperCase() + name.slice(1)]), (value = parseFloat(value) || 0) + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px");
      }
      /**
       * @param {string} type
       * @param {(!Function|RegExp|string)} key
       * @param {(!Function|RegExp|string)} object
       * @param {!Object} end
       * @param {!Array} easing
       * @return {?}
       */
      function Tween(type, key, object, end, easing) {
        return new Tween.prototype.init(type, key, object, end, easing);
      }
      /**
       * @return {undefined}
       */
      function step() {
        if (ye) {
          if (false === document.hidden && window.requestAnimationFrame) {
            window.requestAnimationFrame(step);
          } else {
            window.setTimeout(step, jQuery.fx.interval);
          }
          jQuery.fx.tick();
        }
      }
      /**
       * @return {?}
       */
      function createFxNow() {
        return window.setTimeout(function() {
          fxNow = void 0;
        }), fxNow = jQuery.now();
      }
      /**
       * @param {string} type
       * @param {number} includeWidth
       * @return {?}
       */
      function genFx(type, includeWidth) {
        var which;
        /** @type {number} */
        var i = 0;
        var attrs = {
          height : type
        };
        /** @type {number} */
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i = i + (2 - includeWidth)) {
          which = cssExpand[i];
          attrs["margin" + which] = attrs["padding" + which] = type;
        }
        return includeWidth && (attrs.opacity = attrs.width = type), attrs;
      }
      /**
       * @param {?} value
       * @param {string} prop
       * @param {?} animation
       * @return {?}
       */
      function createTween(value, prop, animation) {
        var tween;
        var t = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]);
        /** @type {number} */
        var o = 0;
        var oo = t.length;
        for (; o < oo; o++) {
          if (tween = t[o].call(animation, prop, value)) {
            return tween;
          }
        }
      }
      /**
       * @param {!Object} elem
       * @param {!Object} props
       * @param {!Object} opts
       * @return {undefined}
       */
      function defaultPrefilter(elem, props, opts) {
        var prop;
        var value;
        var matched;
        var hooks;
        var oldfire;
        var tween;
        var restoreDisplay;
        var display;
        /** @type {boolean} */
        var p = "width" in props || "height" in props;
        var anim = this;
        var orig = {};
        var style = elem.style;
        var hidden = elem.nodeType && isHidden(elem);
        var dataShow = dataPriv.get(elem, "fxshow");
        if (!opts.queue) {
          hooks = jQuery._queueHooks(elem, "fx");
          if (null == hooks.unqueued) {
            /** @type {number} */
            hooks.unqueued = 0;
            /** @type {function(): undefined} */
            oldfire = hooks.empty.fire;
            /**
             * @return {undefined}
             */
            hooks.empty.fire = function() {
              if (!hooks.unqueued) {
                oldfire();
              }
            };
          }
          hooks.unqueued++;
          anim.always(function() {
            anim.always(function() {
              hooks.unqueued--;
              if (!jQuery.queue(elem, "fx").length) {
                hooks.empty.fire();
              }
            });
          });
        }
        for (prop in props) {
          if (value = props[prop], r_rxpIsForPath.test(value)) {
            if (delete props[prop], matched = matched || "toggle" === value, value === (hidden ? "hide" : "show")) {
              if ("show" !== value || !dataShow || void 0 === dataShow[prop]) {
                continue;
              }
              /** @type {boolean} */
              hidden = true;
            }
            orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
          }
        }
        if ((tween = !jQuery.isEmptyObject(props)) || !jQuery.isEmptyObject(orig)) {
          if (p && 1 === elem.nodeType) {
            /** @type {!Array} */
            opts.overflow = [style.overflow, style.overflowX, style.overflowY];
            restoreDisplay = dataShow && dataShow.display;
            if (null == restoreDisplay) {
              restoreDisplay = dataPriv.get(elem, "display");
            }
            display = jQuery.css(elem, "display");
            if ("none" === display) {
              if (restoreDisplay) {
                display = restoreDisplay;
              } else {
                showHide([elem], true);
                restoreDisplay = elem.style.display || restoreDisplay;
                display = jQuery.css(elem, "display");
                showHide([elem]);
              }
            }
            if (("inline" === display || "inline-block" === display && null != restoreDisplay) && "none" === jQuery.css(elem, "float")) {
              if (!tween) {
                anim.done(function() {
                  style.display = restoreDisplay;
                });
                if (null == restoreDisplay) {
                  display = style.display;
                  restoreDisplay = "none" === display ? "" : display;
                }
              }
              /** @type {string} */
              style.display = "inline-block";
            }
          }
          if (opts.overflow) {
            /** @type {string} */
            style.overflow = "hidden";
            anim.always(function() {
              style.overflow = opts.overflow[0];
              style.overflowX = opts.overflow[1];
              style.overflowY = opts.overflow[2];
            });
          }
          /** @type {boolean} */
          tween = false;
          for (prop in orig) {
            if (!tween) {
              if (dataShow) {
                if ("hidden" in dataShow) {
                  hidden = dataShow.hidden;
                }
              } else {
                dataShow = dataPriv.access(elem, "fxshow", {
                  display : restoreDisplay
                });
              }
              if (matched) {
                /** @type {boolean} */
                dataShow.hidden = !hidden;
              }
              if (hidden) {
                showHide([elem], true);
              }
              anim.done(function() {
                if (!hidden) {
                  showHide([elem]);
                }
                dataPriv.remove(elem, "fxshow");
                for (prop in orig) {
                  jQuery.style(elem, prop, orig[prop]);
                }
              });
            }
            tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
            if (!(prop in dataShow)) {
              dataShow[prop] = tween.start;
              if (hidden) {
                tween.end = tween.start;
                /** @type {number} */
                tween.start = 0;
              }
            }
          }
        }
      }
      /**
       * @param {!Array} props
       * @param {!Array} obj
       * @return {undefined}
       */
      function propFilter(props, obj) {
        var key;
        var name;
        var result;
        var value;
        var hooks;
        for (key in props) {
          if (name = jQuery.camelCase(key), result = obj[name], value = props[key], Array.isArray(value) && (result = value[1], value = props[key] = value[0]), key !== name && (props[name] = value, delete props[key]), (hooks = jQuery.cssHooks[name]) && "expand" in hooks) {
            value = hooks.expand(value);
            delete props[name];
            for (key in value) {
              if (!(key in props)) {
                props[key] = value[key];
                obj[key] = result;
              }
            }
          } else {
            obj[name] = result;
          }
        }
      }
      /**
       * @param {string} elem
       * @param {?} properties
       * @param {!Object} options
       * @return {?}
       */
      function Animation(elem, properties, options) {
        var result;
        var o;
        /** @type {number} */
        var index = 0;
        var ncells = Animation.prefilters.length;
        var deferred = jQuery.Deferred().always(function() {
          delete tick.elem;
        });
        /**
         * @return {?}
         */
        var tick = function() {
          if (o) {
            return false;
          }
          var currentTime = fxNow || createFxNow();
          /** @type {number} */
          var remaining = Math.max(0, animation.startTime + animation.duration - currentTime);
          /** @type {number} */
          var temp = remaining / animation.duration || 0;
          /** @type {number} */
          var percent = 1 - temp;
          /** @type {number} */
          var i = 0;
          var length = animation.tweens.length;
          for (; i < length; i++) {
            animation.tweens[i].run(percent);
          }
          return deferred.notifyWith(elem, [animation, percent, remaining]), percent < 1 && length ? remaining : (length || deferred.notifyWith(elem, [animation, 1, 0]), deferred.resolveWith(elem, [animation]), false);
        };
        var animation = deferred.promise({
          elem : elem,
          props : jQuery.extend({}, properties),
          opts : jQuery.extend(true, {
            specialEasing : {},
            easing : jQuery.easing._default
          }, options),
          originalProperties : properties,
          originalOptions : options,
          startTime : fxNow || createFxNow(),
          duration : options.duration,
          tweens : [],
          createTween : function(prop, end) {
            var result = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
            return animation.tweens.push(result), result;
          },
          stop : function(value) {
            /** @type {number} */
            var i = 0;
            var mid = value ? animation.tweens.length : 0;
            if (o) {
              return this;
            }
            /** @type {boolean} */
            o = true;
            for (; i < mid; i++) {
              animation.tweens[i].run(1);
            }
            return value ? (deferred.notifyWith(elem, [animation, 1, 0]), deferred.resolveWith(elem, [animation, value])) : deferred.rejectWith(elem, [animation, value]), this;
          }
        });
        var props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (; index < ncells; index++) {
          if (result = Animation.prefilters[index].call(animation, elem, props, animation.opts)) {
            return jQuery.isFunction(result.stop) && (jQuery._queueHooks(animation.elem, animation.opts.queue).stop = jQuery.proxy(result.stop, result)), result;
          }
        }
        return jQuery.map(props, createTween, animation), jQuery.isFunction(animation.opts.start) && animation.opts.start.call(elem, animation), animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always), jQuery.fx.timer(jQuery.extend(tick, {
          elem : elem,
          anim : animation,
          queue : animation.opts.queue
        })), animation;
      }
      /**
       * @param {string} value
       * @return {?}
       */
      function log(value) {
        return (value.match(rnotwhite) || []).join(" ");
      }
      /**
       * @param {!Node} elem
       * @return {?}
       */
      function getClass(elem) {
        return elem.getAttribute && elem.getAttribute("class") || "";
      }
      /**
       * @param {string} s
       * @param {!Array} o
       * @param {string} n
       * @param {!Function} type
       * @return {undefined}
       */
      function format(s, o, n, type) {
        var name;
        if (Array.isArray(o)) {
          jQuery.each(o, function(canCreateDiscussions, o) {
            if (n || regCls.test(s)) {
              type(s, o);
            } else {
              format(s + "[" + ("object" == typeof o && null != o ? canCreateDiscussions : "") + "]", o, n, type);
            }
          });
        } else {
          if (n || "object" !== jQuery.type(o)) {
            type(s, o);
          } else {
            for (name in o) {
              format(s + "[" + name + "]", o[name], n, type);
            }
          }
        }
      }
      /**
       * @param {!Object} structure
       * @return {?}
       */
      function addToPrefiltersOrTransports(structure) {
        return function(name, n) {
          if ("string" != typeof name) {
            /** @type {string} */
            n = name;
            /** @type {string} */
            name = "*";
          }
          var type;
          /** @type {number} */
          var callbackCount = 0;
          var callbackVals = name.toLowerCase().match(rnotwhite) || [];
          if (jQuery.isFunction(n)) {
            for (; type = callbackVals[callbackCount++];) {
              if ("+" === type[0]) {
                type = type.slice(1) || "*";
                (structure[type] = structure[type] || []).unshift(n);
              } else {
                (structure[type] = structure[type] || []).push(n);
              }
            }
          }
        };
      }
      /**
       * @param {!Object} structure
       * @param {?} options
       * @param {!Object} originalOptions
       * @param {?} jqXHR
       * @return {?}
       */
      function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        /**
         * @param {string} dataType
         * @return {?}
         */
        function inspect(dataType) {
          var selected;
          return inspected[dataType] = true, jQuery.each(structure[dataType] || [], function(canCreateDiscussions, prefilterOrFactory) {
            var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
            return "string" != typeof dataTypeOrTransport || seekingTransport || inspected[dataTypeOrTransport] ? seekingTransport ? !(selected = dataTypeOrTransport) : void 0 : (options.dataTypes.unshift(dataTypeOrTransport), inspect(dataTypeOrTransport), false);
          }), selected;
        }
        var inspected = {};
        /** @type {boolean} */
        var seekingTransport = structure === transports;
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
      }
      /**
       * @param {?} target
       * @param {?} opts
       * @return {?}
       */
      function ajaxExtend(target, opts) {
        var key;
        var deep;
        var flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in opts) {
          if (void 0 !== opts[key]) {
            (flatOptions[key] ? target : deep || (deep = {}))[key] = opts[key];
          }
        }
        return deep && jQuery.extend(true, target, deep), target;
      }
      /**
       * @param {!Object} s
       * @param {!XMLHttpRequest} jqXHR
       * @param {!Array} responses
       * @return {?}
       */
      function ajaxHandleResponses(s, jqXHR, responses) {
        var ct;
        var type;
        var finalDataType;
        var firstDataType;
        var contents = s.contents;
        var dataTypes = s.dataTypes;
        for (; "*" === dataTypes[0];) {
          dataTypes.shift();
          if (void 0 === ct) {
            ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
          }
        }
        if (ct) {
          for (type in contents) {
            if (contents[type] && contents[type].test(ct)) {
              dataTypes.unshift(type);
              break;
            }
          }
        }
        if (dataTypes[0] in responses) {
          finalDataType = dataTypes[0];
        } else {
          for (type in responses) {
            if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
              /** @type {string} */
              finalDataType = type;
              break;
            }
            if (!firstDataType) {
              /** @type {string} */
              firstDataType = type;
            }
          }
          /** @type {(string|undefined)} */
          finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
          return finalDataType !== dataTypes[0] && dataTypes.unshift(finalDataType), responses[finalDataType];
        }
      }
      /**
       * @param {!Object} s
       * @param {string} response
       * @param {?} jqXHR
       * @param {number} isSuccess
       * @return {?}
       */
      function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2;
        var current;
        var conv;
        var tmp;
        var prev;
        var converters = {};
        var deps = s.dataTypes.slice();
        if (deps[1]) {
          for (conv in s.converters) {
            converters[conv.toLowerCase()] = s.converters[conv];
          }
        }
        current = deps.shift();
        for (; current;) {
          if (s.responseFields[current] && (jqXHR[s.responseFields[current]] = response), !prev && isSuccess && s.dataFilter && (response = s.dataFilter(response, s.dataType)), prev = current, current = deps.shift()) {
            if ("*" === current) {
              current = prev;
            } else {
              if ("*" !== prev && prev !== current) {
                if (!(conv = converters[prev + " " + current] || converters["* " + current])) {
                  for (conv2 in converters) {
                    if (tmp = conv2.split(" "), tmp[1] === current && (conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]])) {
                      if (true === conv) {
                        conv = converters[conv2];
                      } else {
                        if (true !== converters[conv2]) {
                          /** @type {string} */
                          current = tmp[0];
                          deps.unshift(tmp[1]);
                        }
                      }
                      break;
                    }
                  }
                }
                if (true !== conv) {
                  if (conv && s.throws) {
                    response = conv(response);
                  } else {
                    try {
                      response = conv(response);
                    } catch (e) {
                      return {
                        state : "parsererror",
                        error : conv ? e : "No conversion from " + prev + " to " + current
                      };
                    }
                  }
                }
              }
            }
          }
        }
        return {
          state : "success",
          data : response
        };
      }
      /** @type {!Array} */
      var arr = [];
      var document = window.document;
      /** @type {function(!Object): (Object|null)} */
      var getProto = Object.getPrototypeOf;
      /** @type {function(this:(IArrayLike<T>|string), *=, *=): !Array<T>} */
      var slice = arr.slice;
      /** @type {function(this:*, ...*): !Array<?>} */
      var concat = arr.concat;
      /** @type {function(this:IArrayLike<T>, ...T): number} */
      var push = arr.push;
      /** @type {function(this:(IArrayLike<T>|string), T, number=): number} */
      var indexOf = arr.indexOf;
      var class2type = {};
      /** @type {function(this:*): string} */
      var toString = class2type.toString;
      /** @type {function(this:Object, *): boolean} */
      var hasOwn = class2type.hasOwnProperty;
      /** @type {function(this:!Function): string} */
      var fnToString = hasOwn.toString;
      /** @type {string} */
      var Mixin2 = fnToString.call(Object);
      var support = {};
      /**
       * @param {string} element
       * @param {!Object} context
       * @return {?}
       */
      var jQuery = function(element, context) {
        return new jQuery.fn.init(element, context);
      };
      /** @type {!RegExp} */
      var REGEX_ESCAPE_EXPR = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
      /** @type {!RegExp} */
      var _kerningNamesHash_escapeEscape = /^-ms-/;
      /** @type {!RegExp} */
      var rcharset = /-([a-z])/g;
      /**
       * @param {?} context
       * @param {string} match
       * @return {?}
       */
      var dashToCapital = function(context, match) {
        return match.toUpperCase();
      };
      jQuery.fn = jQuery.prototype = {
        jquery : "3.2.1",
        constructor : jQuery,
        length : 0,
        toArray : function() {
          return slice.call(this);
        },
        get : function(num) {
          return null == num ? slice.call(this) : num < 0 ? this[num + this.length] : this[num];
        },
        pushStack : function(a) {
          var elm = jQuery.merge(this.constructor(), a);
          return elm.prevObject = this, elm;
        },
        each : function(callback) {
          return jQuery.each(this, callback);
        },
        map : function(b) {
          return this.pushStack(jQuery.map(this, function(parent, deferBuild) {
            return b.call(parent, deferBuild, parent);
          }));
        },
        slice : function() {
          return this.pushStack(slice.apply(this, arguments));
        },
        first : function() {
          return this.eq(0);
        },
        last : function() {
          return this.eq(-1);
        },
        eq : function(i) {
          var len = this.length;
          var j = +i + (i < 0 ? len : 0);
          return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },
        end : function() {
          return this.prevObject || this.constructor();
        },
        push : push,
        sort : arr.sort,
        splice : arr.splice
      };
      /** @type {function(): ?} */
      jQuery.extend = jQuery.fn.extend = function() {
        var options;
        var name;
        var src;
        var copy;
        var copyIsArray;
        var clone;
        var target = arguments[0] || {};
        /** @type {number} */
        var i = 1;
        /** @type {number} */
        var l = arguments.length;
        /** @type {boolean} */
        var deep = false;
        if ("boolean" == typeof target) {
          /** @type {boolean} */
          deep = target;
          target = arguments[i] || {};
          i++;
        }
        if (!("object" == typeof target || jQuery.isFunction(target))) {
          target = {};
        }
        if (i === l) {
          target = this;
          i--;
        }
        for (; i < l; i++) {
          if (null != (options = arguments[i])) {
            for (name in options) {
              src = target[name];
              copy = options[name];
              if (target !== copy) {
                if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                  if (copyIsArray) {
                    /** @type {boolean} */
                    copyIsArray = false;
                    clone = src && Array.isArray(src) ? src : [];
                  } else {
                    clone = src && jQuery.isPlainObject(src) ? src : {};
                  }
                  target[name] = jQuery.extend(deep, clone, copy);
                } else {
                  if (void 0 !== copy) {
                    target[name] = copy;
                  }
                }
              }
            }
          }
        }
        return target;
      };
      jQuery.extend({
        expando : "jQuery" + ("3.2.1" + Math.random()).replace(/\D/g, ""),
        isReady : true,
        error : function(name) {
          throw new Error(name);
        },
        noop : function() {
        },
        isFunction : function(obj) {
          return "function" === jQuery.type(obj);
        },
        isWindow : function(obj) {
          return null != obj && obj === obj.window;
        },
        isNumeric : function(value) {
          var undefined = jQuery.type(value);
          return ("number" === undefined || "string" === undefined) && !isNaN(value - parseFloat(value));
        },
        isPlainObject : function(obj) {
          var proto;
          var hasOwnProperty;
          return !(!obj || "[object Object]" !== toString.call(obj)) && (!(proto = getProto(obj)) || "function" == typeof(hasOwnProperty = hasOwn.call(proto, "constructor") && proto.constructor) && fnToString.call(hasOwnProperty) === Mixin2);
        },
        isEmptyObject : function(obj) {
          var key;
          for (key in obj) {
            return false;
          }
          return true;
        },
        type : function(obj) {
          return null == obj ? obj + "" : "object" == typeof obj || "function" == typeof obj ? class2type[toString.call(obj)] || "object" : typeof obj;
        },
        globalEval : function(data) {
          test(data);
        },
        camelCase : function(str) {
          return str.replace(_kerningNamesHash_escapeEscape, "ms-").replace(rcharset, dashToCapital);
        },
        each : function(result, state) {
          var n;
          /** @type {number} */
          var i = 0;
          if (isArrayLike(result)) {
            n = result.length;
            for (; i < n && false !== state.call(result[i], i, result[i]); i++) {
            }
          } else {
            for (i in result) {
              if (false === state.call(result[i], i, result[i])) {
                break;
              }
            }
          }
          return result;
        },
        trim : function(text) {
          return null == text ? "" : (text + "").replace(REGEX_ESCAPE_EXPR, "");
        },
        makeArray : function(arr, o) {
          var obj = o || [];
          return null != arr && (isArrayLike(Object(arr)) ? jQuery.merge(obj, "string" == typeof arr ? [arr] : arr) : push.call(obj, arr)), obj;
        },
        inArray : function(elem, arr, i) {
          return null == arr ? -1 : indexOf.call(arr, elem, i);
        },
        merge : function(list, a) {
          /** @type {number} */
          var cell_amount = +a.length;
          /** @type {number} */
          var i = 0;
          var index = list.length;
          for (; i < cell_amount; i++) {
            list[index++] = a[i];
          }
          return list.length = index, list;
        },
        grep : function(array, callback, a) {
          /** @type {!Array} */
          var ret = [];
          /** @type {number} */
          var i = 0;
          var length = array.length;
          /** @type {boolean} */
          var booA = !a;
          for (; i < length; i++) {
            if (!callback(array[i], i) !== booA) {
              ret.push(array[i]);
            }
          }
          return ret;
        },
        map : function(list, func, options) {
          var k;
          var o;
          /** @type {number} */
          var i = 0;
          /** @type {!Array} */
          var ret = [];
          if (isArrayLike(list)) {
            k = list.length;
            for (; i < k; i++) {
              if (null != (o = func(list[i], i, options))) {
                ret.push(o);
              }
            }
          } else {
            for (i in list) {
              if (null != (o = func(list[i], i, options))) {
                ret.push(o);
              }
            }
          }
          return concat.apply([], ret);
        },
        guid : 1,
        proxy : function(f, c) {
          var j;
          var headArgs;
          var proxy;
          if ("string" == typeof c && (j = f[c], c = f, f = j), jQuery.isFunction(f)) {
            return headArgs = slice.call(arguments, 2), proxy = function() {
              return f.apply(c || this, headArgs.concat(slice.call(arguments)));
            }, proxy.guid = f.guid = f.guid || jQuery.guid++, proxy;
          }
        },
        now : Date.now,
        support : support
      });
      if ("function" == typeof Symbol) {
        jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
      }
      jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function(canCreateDiscussions, p_Interval) {
        class2type["[object " + p_Interval + "]"] = p_Interval.toLowerCase();
      });
      var Sizzle = function(window) {
        /**
         * @param {string} selector
         * @param {!Object} context
         * @param {!Array} results
         * @param {!Array} seed
         * @return {?}
         */
        function Sizzle(selector, context, results, seed) {
          var m;
          var i;
          var elem;
          var nid;
          var match;
          var groups;
          var newSelector;
          var newContext = context && context.ownerDocument;
          var undefined = context ? context.nodeType : 9;
          if (results = results || [], "string" != typeof selector || !selector || 1 !== undefined && 9 !== undefined && 11 !== undefined) {
            return results;
          }
          if (!seed && ((context ? context.ownerDocument || context : preferredDoc) !== document && setDocument(context), context = context || document, documentIsHTML)) {
            if (11 !== undefined && (match = customSelectorReg.exec(selector))) {
              if (m = match[1]) {
                if (9 === undefined) {
                  if (!(elem = context.getElementById(m))) {
                    return results;
                  }
                  if (elem.id === m) {
                    return results.push(elem), results;
                  }
                } else {
                  if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                    return results.push(elem), results;
                  }
                }
              } else {
                if (match[2]) {
                  return push.apply(results, context.getElementsByTagName(selector)), results;
                }
                if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                  return push.apply(results, context.getElementsByClassName(m)), results;
                }
              }
            }
            if (support.qsa && !compilerCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
              if (1 !== undefined) {
                /** @type {!Object} */
                newContext = context;
                /** @type {string} */
                newSelector = selector;
              } else {
                if ("object" !== context.nodeName.toLowerCase()) {
                  if (nid = context.getAttribute("id")) {
                    nid = nid.replace(rcssescape, fcssescape);
                  } else {
                    context.setAttribute("id", nid = expando);
                  }
                  groups = tokenize(selector);
                  i = groups.length;
                  for (; i--;) {
                    /** @type {string} */
                    groups[i] = "#" + nid + " " + toSelector(groups[i]);
                  }
                  newSelector = groups.join(",");
                  newContext = IS_HTML_FRAGMENT.test(selector) && testContext(context.parentNode) || context;
                }
              }
              if (newSelector) {
                try {
                  return push.apply(results, newContext.querySelectorAll(newSelector)), results;
                } catch (t) {
                } finally {
                  if (nid === expando) {
                    context.removeAttribute("id");
                  }
                }
              }
            }
          }
          return select(selector.replace(rtrim, "$1"), context, results, seed);
        }
        /**
         * @return {?}
         */
        function createCache() {
          /**
           * @param {string} key
           * @param {?} service
           * @return {?}
           */
          function cache(key, service) {
            return buf.push(key + " ") > Expr.cacheLength && delete cache[buf.shift()], cache[key + " "] = service;
          }
          /** @type {!Array} */
          var buf = [];
          return cache;
        }
        /**
         * @param {!Function} fn
         * @return {?}
         */
        function markFunction(fn) {
          return fn[expando] = true, fn;
        }
        /**
         * @param {!Function} expect
         * @return {?}
         */
        function assert(expect) {
          var wrap = document.createElement("fieldset");
          try {
            return !!expect(wrap);
          } catch (t) {
            return false;
          } finally {
            if (wrap.parentNode) {
              wrap.parentNode.removeChild(wrap);
            }
            /** @type {null} */
            wrap = null;
          }
        }
        /**
         * @param {string} attrs
         * @param {!Function} handler
         * @return {undefined}
         */
        function addHandle(attrs, handler) {
          var arr = attrs.split("|");
          var i = arr.length;
          for (; i--;) {
            /** @type {!Function} */
            Expr.attrHandle[arr[i]] = handler;
          }
        }
        /**
         * @param {!Element} a
         * @param {!Element} b
         * @return {?}
         */
        function siblingCheck(a, b) {
          var cur = b && a;
          var .num_const = cur && 1 === a.nodeType && 1 === b.nodeType && a.sourceIndex - b.sourceIndex;
          if (.num_const) {
            return .num_const;
          }
          if (cur) {
            for (; cur = cur.nextSibling;) {
              if (cur === b) {
                return -1;
              }
            }
          }
          return a ? 1 : -1;
        }
        /**
         * @param {boolean} disabled
         * @return {?}
         */
        function createDisabledPseudo(disabled) {
          return function(elem) {
            return "form" in elem ? elem.parentNode && false === elem.disabled ? "label" in elem ? "label" in elem.parentNode ? elem.parentNode.disabled === disabled : elem.disabled === disabled : elem.isDisabled === disabled || elem.isDisabled !== !disabled && disabledAncestor(elem) === disabled : elem.disabled === disabled : "label" in elem && elem.disabled === disabled;
          };
        }
        /**
         * @param {!Function} fn
         * @return {?}
         */
        function createPositionalPseudo(fn) {
          return markFunction(function(value) {
            return value = +value, markFunction(function(self, global) {
              var name;
              var val = fn([], self.length, value);
              var j = val.length;
              for (; j--;) {
                if (self[name = val[j]]) {
                  /** @type {boolean} */
                  self[name] = !(global[name] = self[name]);
                }
              }
            });
          });
        }
        /**
         * @param {!Node} context
         * @return {?}
         */
        function testContext(context) {
          return context && void 0 !== context.getElementsByTagName && context;
        }
        /**
         * @return {undefined}
         */
        function setFilters() {
        }
        /**
         * @param {!Array} tokens
         * @return {?}
         */
        function toSelector(tokens) {
          /** @type {number} */
          var len = 0;
          var i = tokens.length;
          /** @type {string} */
          var selector = "";
          for (; len < i; len++) {
            /** @type {string} */
            selector = selector + tokens[len].value;
          }
          return selector;
        }
        /**
         * @param {!Function} matcher
         * @param {!Object} combinator
         * @param {string} base
         * @return {?}
         */
        function addCombinator(matcher, combinator, base) {
          var dir = combinator.dir;
          var skip = combinator.next;
          var key = skip || dir;
          var checkNonElements = base && "parentNode" === key;
          /** @type {number} */
          var doneName = done++;
          return combinator.first ? function(elem, stat, context) {
            for (; elem = elem[dir];) {
              if (1 === elem.nodeType || checkNonElements) {
                return matcher(elem, stat, context);
              }
            }
            return false;
          } : function(elem, context, xml) {
            var oldCache;
            var uniqueCache;
            var outerCache;
            /** @type {!Array} */
            var newCache = [dirruns, doneName];
            if (xml) {
              for (; elem = elem[dir];) {
                if ((1 === elem.nodeType || checkNonElements) && matcher(elem, context, xml)) {
                  return true;
                }
              }
            } else {
              for (; elem = elem[dir];) {
                if (1 === elem.nodeType || checkNonElements) {
                  if (outerCache = elem[expando] || (elem[expando] = {}), uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {}), skip && skip === elem.nodeName.toLowerCase()) {
                    elem = elem[dir] || elem;
                  } else {
                    if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                      return newCache[2] = oldCache[2];
                    }
                    if (uniqueCache[key] = newCache, newCache[2] = matcher(elem, context, xml)) {
                      return true;
                    }
                  }
                }
              }
            }
            return false;
          };
        }
        /**
         * @param {!Object} matchers
         * @return {?}
         */
        function elementMatcher(matchers) {
          return matchers.length > 1 ? function(elem, context, xml) {
            var i = matchers.length;
            for (; i--;) {
              if (!matchers[i](elem, context, xml)) {
                return false;
              }
            }
            return true;
          } : matchers[0];
        }
        /**
         * @param {string} selector
         * @param {!NodeList} contexts
         * @param {!Array} results
         * @return {?}
         */
        function multipleContexts(selector, contexts, results) {
          /** @type {number} */
          var i = 0;
          var count = contexts.length;
          for (; i < count; i++) {
            Sizzle(selector, contexts[i], results);
          }
          return results;
        }
        /**
         * @param {!Array} data
         * @param {!Object} selector
         * @param {!Function} filter
         * @param {!Object} context
         * @param {?} obj
         * @return {?}
         */
        function get(data, selector, filter, context, obj) {
          var label;
          /** @type {!Array} */
          var b = [];
          /** @type {number} */
          var i = 0;
          var tldCount = data.length;
          /** @type {boolean} */
          var isDrawLayerVisibled = null != selector;
          for (; i < tldCount; i++) {
            if (label = data[i]) {
              if (!(filter && !filter(label, context, obj))) {
                b.push(label);
                if (isDrawLayerVisibled) {
                  selector.push(i);
                }
              }
            }
          }
          return b;
        }
        /**
         * @param {!Function} preFilter
         * @param {!Object} selector
         * @param {!Function} matcher
         * @param {!Object} postFilter
         * @param {!Object} postFinder
         * @param {!Object} postSelector
         * @return {?}
         */
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
          return postFilter && !postFilter[expando] && (postFilter = setMatcher(postFilter)), postFinder && !postFinder[expando] && (postFinder = setMatcher(postFinder, postSelector)), markFunction(function(seed, results, context, xml) {
            var key;
            var i;
            var v;
            /** @type {!Array} */
            var preMap = [];
            /** @type {!Array} */
            var res = [];
            var preexisting = results.length;
            var data = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []);
            var value = !preFilter || !seed && selector ? data : get(data, preMap, preFilter, context, xml);
            var result = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : value;
            if (matcher && matcher(value, result, context, xml), postFilter) {
              key = get(result, res);
              postFilter(key, [], context, xml);
              i = key.length;
              for (; i--;) {
                if (v = key[i]) {
                  /** @type {boolean} */
                  result[res[i]] = !(value[res[i]] = v);
                }
              }
            }
            if (seed) {
              if (postFinder || preFilter) {
                if (postFinder) {
                  /** @type {!Array} */
                  key = [];
                  i = result.length;
                  for (; i--;) {
                    if (v = result[i]) {
                      key.push(value[i] = v);
                    }
                  }
                  postFinder(null, result = [], key, xml);
                }
                i = result.length;
                for (; i--;) {
                  if ((v = result[i]) && (key = postFinder ? indexOf(seed, v) : preMap[i]) > -1) {
                    /** @type {boolean} */
                    seed[key] = !(results[key] = v);
                  }
                }
              }
            } else {
              result = get(result === results ? result.splice(preexisting, result.length) : result);
              if (postFinder) {
                postFinder(null, results, result, xml);
              } else {
                push.apply(results, result);
              }
            }
          });
        }
        /**
         * @param {!Array} tokens
         * @return {?}
         */
        function matcherFromTokens(tokens) {
          var checkContext;
          var matcher;
          var j;
          var len = tokens.length;
          var leadingRelative = Expr.relative[tokens[0].type];
          var implicitRelative = leadingRelative || Expr.relative[" "];
          /** @type {number} */
          var i = leadingRelative ? 1 : 0;
          var matchContext = addCombinator(function(elem) {
            return elem === checkContext;
          }, implicitRelative, true);
          var matchAnyContext = addCombinator(function(value) {
            return indexOf(checkContext, value) > -1;
          }, implicitRelative, true);
          /** @type {!Array} */
          var matchers = [function(elem, context, xml) {
            var o = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
            return checkContext = null, o;
          }];
          for (; i < len; i++) {
            if (matcher = Expr.relative[tokens[i].type]) {
              /** @type {!Array} */
              matchers = [addCombinator(elementMatcher(matchers), matcher)];
            } else {
              if (matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches), matcher[expando]) {
                /** @type {number} */
                j = ++i;
                for (; j < len && !Expr.relative[tokens[j].type]; j++) {
                }
                return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({
                  value : " " === tokens[i - 2].type ? "*" : ""
                })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
              }
              matchers.push(matcher);
            }
          }
          return elementMatcher(matchers);
        }
        /**
         * @param {!Array} elementMatchers
         * @param {!Array} setMatchers
         * @return {?}
         */
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
          /** @type {boolean} */
          var bySet = setMatchers.length > 0;
          /** @type {boolean} */
          var byElement = elementMatchers.length > 0;
          /**
           * @param {!Function} seed
           * @param {!Object} context
           * @param {number} xml
           * @param {!Array} results
           * @param {!Object} outermost
           * @return {?}
           */
          var superMatcher = function(seed, context, xml, results, outermost) {
            var elem;
            var j;
            var matcher;
            /** @type {number} */
            var matchedCount = 0;
            /** @type {string} */
            var i = "0";
            var unmatched = seed && [];
            /** @type {!Array} */
            var data = [];
            var contextBackup = outermostContext;
            var elems = seed || byElement && Expr.find.TAG("*", outermost);
            var dirrunsUnique = dirruns = dirruns + (null == contextBackup ? 1 : Math.random() || .1);
            var length = elems.length;
            if (outermost) {
              outermostContext = context === document || context || outermost;
            }
            for (; i !== length && null != (elem = elems[i]); i++) {
              if (byElement && elem) {
                /** @type {number} */
                j = 0;
                if (!(context || elem.ownerDocument === document)) {
                  setDocument(elem);
                  /** @type {boolean} */
                  xml = !documentIsHTML;
                }
                for (; matcher = elementMatchers[j++];) {
                  if (matcher(elem, context || document, xml)) {
                    results.push(elem);
                    break;
                  }
                }
                if (outermost) {
                  dirruns = dirrunsUnique;
                }
              }
              if (bySet) {
                if (elem = !matcher && elem) {
                  matchedCount--;
                }
                if (seed) {
                  unmatched.push(elem);
                }
              }
            }
            if (matchedCount = matchedCount + i, bySet && i !== matchedCount) {
              /** @type {number} */
              j = 0;
              for (; matcher = setMatchers[j++];) {
                matcher(unmatched, data, context, xml);
              }
              if (seed) {
                if (matchedCount > 0) {
                  for (; i--;) {
                    if (!(unmatched[i] || data[i])) {
                      data[i] = pop.call(results);
                    }
                  }
                }
                data = get(data);
              }
              push.apply(results, data);
              if (outermost && !seed && data.length > 0 && matchedCount + setMatchers.length > 1) {
                Sizzle.uniqueSort(results);
              }
            }
            return outermost && (dirruns = dirrunsUnique, outermostContext = contextBackup), unmatched;
          };
          return bySet ? markFunction(superMatcher) : superMatcher;
        }
        var i;
        var support;
        var Expr;
        var getText;
        var isXML;
        var tokenize;
        var compile;
        var select;
        var outermostContext;
        var sortInput;
        var stability;
        var setDocument;
        var document;
        var docElem;
        var documentIsHTML;
        var rbuggyQSA;
        var rbuggyMatches;
        var matches;
        var contains;
        /** @type {string} */
        var expando = "sizzle" + 1 * new Date;
        var preferredDoc = window.document;
        /** @type {number} */
        var dirruns = 0;
        /** @type {number} */
        var done = 0;
        var classCache = createCache();
        var next = createCache();
        var compilerCache = createCache();
        /**
         * @param {?} type
         * @param {?} uuid
         * @return {?}
         */
        var event = function(type, uuid) {
          return type === uuid && (stability = true), 0;
        };
        /** @type {function(this:Object, *): boolean} */
        var hasOwn = {}.hasOwnProperty;
        /** @type {!Array} */
        var arr = [];
        /** @type {function(this:IArrayLike<T>): T} */
        var pop = arr.pop;
        /** @type {function(this:IArrayLike<T>, ...T): number} */
        var push_native = arr.push;
        /** @type {function(this:IArrayLike<T>, ...T): number} */
        var push = arr.push;
        /** @type {function(this:(IArrayLike<T>|string), *=, *=): !Array<T>} */
        var slice = arr.slice;
        /**
         * @param {string} list
         * @param {!Object} value
         * @return {?}
         */
        var indexOf = function(list, value) {
          /** @type {number} */
          var i = 0;
          var listLength = list.length;
          for (; i < listLength; i++) {
            if (list[i] === value) {
              return i;
            }
          }
          return -1;
        };
        /** @type {string} */
        var value = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped";
        /** @type {string} */
        var _test = "[\\x20\\t\\r\\n\\f]";
        /** @type {string} */
        var escRightBracket = "(?:\\\\.|[\\w-]|[^\x00-\\xa0])+";
        /** @type {string} */
        var _end2 = "\\[" + _test + "*(" + escRightBracket + ")(?:" + _test + "*([*^$|!~]?=)" + _test + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + escRightBracket + "))|)" + _test + "*\\]";
        /** @type {string} */
        var pseudos = ":(" + escRightBracket + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + _end2 + ")*)|.*)\\)|)";
        /** @type {!RegExp} */
        var entityEscapeRegExp = new RegExp(_test + "+", "g");
        /** @type {!RegExp} */
        var rtrim = new RegExp("^" + _test + "+|((?:^|[^\\\\])(?:\\\\.)*)" + _test + "+$", "g");
        /** @type {!RegExp} */
        var vR = new RegExp("^" + _test + "*," + _test + "*");
        /** @type {!RegExp} */
        var existingRegistrationRegex = new RegExp("^" + _test + "*([>+~]|" + _test + ")" + _test + "*");
        /** @type {!RegExp} */
        var rattributeQuotes = new RegExp("=" + _test + "*([^\\]'\"]*?)" + _test + "*\\]", "g");
        /** @type {!RegExp} */
        var rpseudo = new RegExp(pseudos);
        /** @type {!RegExp} */
        var ridentifier = new RegExp("^" + escRightBracket + "$");
        var matchExpr = {
          ID : new RegExp("^#(" + escRightBracket + ")"),
          CLASS : new RegExp("^\\.(" + escRightBracket + ")"),
          TAG : new RegExp("^(" + escRightBracket + "|[*])"),
          ATTR : new RegExp("^" + _end2),
          PSEUDO : new RegExp("^" + pseudos),
          CHILD : new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + _test + "*(even|odd|(([+-]|)(\\d*)n|)" + _test + "*(?:([+-]|)" + _test + "*(\\d+)|))" + _test + "*\\)|)", "i"),
          bool : new RegExp("^(?:" + value + ")$", "i"),
          needsContext : new RegExp("^" + _test + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + _test + "*((?:-\\d)?\\d*)" + _test + "*\\)|)(?=[^-]|$)", "i")
        };
        /** @type {!RegExp} */
        var inputNodeNames = /^(?:input|select|textarea|button)$/i;
        /** @type {!RegExp} */
        var rnoType = /^h\d$/i;
        /** @type {!RegExp} */
        var rnative = /^[^{]+\{\s*\[native \w/;
        /** @type {!RegExp} */
        var customSelectorReg = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/;
        /** @type {!RegExp} */
        var IS_HTML_FRAGMENT = /[+~]/;
        /** @type {!RegExp} */
        var start = new RegExp("\\\\([\\da-f]{1,6}" + _test + "?|(" + _test + ")|.)", "ig");
        /**
         * @param {?} n
         * @param {string} name
         * @param {boolean} elem
         * @return {?}
         */
        var data = function(n, name, elem) {
          /** @type {number} */
          var high = "0x" + name - 65536;
          return high !== high || elem ? name : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, 1023 & high | 56320);
        };
        /** @type {!RegExp} */
        var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g;
        /**
         * @param {string} text
         * @param {string} ch
         * @return {?}
         */
        var fcssescape = function(text, ch) {
          return ch ? "\x00" === text ? "\ufffd" : text.slice(0, -1) + "\\" + text.charCodeAt(text.length - 1).toString(16) + " " : "\\" + text;
        };
        /**
         * @return {undefined}
         */
        var unloadHandler = function() {
          setDocument();
        };
        var disabledAncestor = addCombinator(function(elem) {
          return true === elem.disabled && ("form" in elem || "label" in elem);
        }, {
          dir : "parentNode",
          next : "legend"
        });
        try {
          push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
          arr[preferredDoc.childNodes.length].nodeType;
        } catch (t) {
          push = {
            apply : arr.length ? function(target, array) {
              push_native.apply(target, slice.call(array));
            } : function(array, obj) {
              var length = array.length;
              /** @type {number} */
              var objCursor = 0;
              for (; array[length++] = obj[objCursor++];) {
              }
              /** @type {number} */
              array.length = length - 1;
            }
          };
        }
        support = Sizzle.support = {};
        /** @type {function(!Object): ?} */
        isXML = Sizzle.isXML = function(elem) {
          var documentElement = elem && (elem.ownerDocument || elem).documentElement;
          return !!documentElement && "HTML" !== documentElement.nodeName;
        };
        /** @type {function(!Object): ?} */
        setDocument = Sizzle.setDocument = function(node) {
          var e;
          var subWindow;
          var doc = node ? node.ownerDocument || node : preferredDoc;
          return doc !== document && 9 === doc.nodeType && doc.documentElement ? (document = doc, docElem = document.documentElement, documentIsHTML = !isXML(document), preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow && (subWindow.addEventListener ? subWindow.addEventListener("unload", unloadHandler, false) : subWindow.attachEvent && subWindow.attachEvent("onunload", unloadHandler)), support.attributes = assert(function(elm) {
            return elm.className = "i", !elm.getAttribute("className");
          }), support.getElementsByTagName = assert(function(testee) {
            return testee.appendChild(document.createComment("")), !testee.getElementsByTagName("*").length;
          }), support.getElementsByClassName = rnative.test(document.getElementsByClassName), support.getById = assert(function(body) {
            return docElem.appendChild(body).id = expando, !document.getElementsByName || !document.getElementsByName(expando).length;
          }), support.getById ? (Expr.filter.ID = function(elem) {
            var i = elem.replace(start, data);
            return function(t) {
              return t.getAttribute("id") === i;
            };
          }, Expr.find.ID = function(elem, context) {
            if (void 0 !== context.getElementById && documentIsHTML) {
              var c_style = context.getElementById(elem);
              return c_style ? [c_style] : [];
            }
          }) : (Expr.filter.ID = function(elem) {
            var content = elem.replace(start, data);
            return function(elem) {
              var token = void 0 !== elem.getAttributeNode && elem.getAttributeNode("id");
              return token && token.value === content;
            };
          }, Expr.find.ID = function(value, context) {
            if (void 0 !== context.getElementById && documentIsHTML) {
              var attr;
              var callbackCount;
              var _ref5;
              var m = context.getElementById(value);
              if (m) {
                if ((attr = m.getAttributeNode("id")) && attr.value === value) {
                  return [m];
                }
                _ref5 = context.getElementsByName(value);
                /** @type {number} */
                callbackCount = 0;
                for (; m = _ref5[callbackCount++];) {
                  if ((attr = m.getAttributeNode("id")) && attr.value === value) {
                    return [m];
                  }
                }
              }
              return [];
            }
          }), Expr.find.TAG = support.getElementsByTagName ? function(v, e) {
            return void 0 !== e.getElementsByTagName ? e.getElementsByTagName(v) : support.qsa ? e.querySelectorAll(v) : void 0;
          } : function(selector, document) {
            var arg;
            /** @type {!Array} */
            var results = [];
            /** @type {number} */
            var u = 0;
            var r = document.getElementsByTagName(selector);
            if ("*" === selector) {
              for (; arg = r[u++];) {
                if (1 === arg.nodeType) {
                  results.push(arg);
                }
              }
              return results;
            }
            return r;
          }, Expr.find.CLASS = support.getElementsByClassName && function(className, context) {
            if (void 0 !== context.getElementsByClassName && documentIsHTML) {
              return context.getElementsByClassName(className);
            }
          }, rbuggyMatches = [], rbuggyQSA = [], (support.qsa = rnative.test(document.querySelectorAll)) && (assert(function(container) {
            /** @type {string} */
            docElem.appendChild(container).innerHTML = "<a id='" + expando + "'></a><select id='" + expando + "-\r\\' msallowcapture=''><option selected=''></option></select>";
            if (container.querySelectorAll("[msallowcapture^='']").length) {
              rbuggyQSA.push("[*^$]=" + _test + "*(?:''|\"\")");
            }
            if (!container.querySelectorAll("[selected]").length) {
              rbuggyQSA.push("\\[" + _test + "*(?:value|" + value + ")");
            }
            if (!container.querySelectorAll("[id~=" + expando + "-]").length) {
              rbuggyQSA.push("~=");
            }
            if (!container.querySelectorAll(":checked").length) {
              rbuggyQSA.push(":checked");
            }
            if (!container.querySelectorAll("a#" + expando + "+*").length) {
              rbuggyQSA.push(".#.+[+~]");
            }
          }), assert(function(el) {
            /** @type {string} */
            el.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
            var input = document.createElement("input");
            input.setAttribute("type", "hidden");
            el.appendChild(input).setAttribute("name", "D");
            if (el.querySelectorAll("[name=d]").length) {
              rbuggyQSA.push("name" + _test + "*[*^$|!~]?=");
            }
            if (2 !== el.querySelectorAll(":enabled").length) {
              rbuggyQSA.push(":enabled", ":disabled");
            }
            /** @type {boolean} */
            docElem.appendChild(el).disabled = true;
            if (2 !== el.querySelectorAll(":disabled").length) {
              rbuggyQSA.push(":enabled", ":disabled");
            }
            el.querySelectorAll("*,:x");
            rbuggyQSA.push(",.*:");
          })), (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) && assert(function(el) {
            support.disconnectedMatch = matches.call(el, "*");
            matches.call(el, "[s!='']:x");
            rbuggyMatches.push("!=", pseudos);
          }), rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|")), rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|")), e = rnative.test(docElem.compareDocumentPosition), contains = e || rnative.test(docElem.contains) ? function(a, b) {
            var adown = 9 === a.nodeType ? a.documentElement : a;
            var bup = b && b.parentNode;
            return a === bup || !(!bup || 1 !== bup.nodeType || !(adown.contains ? adown.contains(bup) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(bup)));
          } : function(a, b) {
            if (b) {
              for (; b = b.parentNode;) {
                if (b === a) {
                  return true;
                }
              }
            }
            return false;
          }, event = e ? function(a, b) {
            if (a === b) {
              return stability = true, 0;
            }
            /** @type {number} */
            var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
            return compare || (compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & compare || !support.sortDetached && b.compareDocumentPosition(a) === compare ? a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ? -1 : b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0 : 4 & compare ? -1 : 1);
          } : function(a, b) {
            if (a === b) {
              return stability = true, 0;
            }
            var cur;
            /** @type {number} */
            var i = 0;
            var aup = a.parentNode;
            var bup = b.parentNode;
            /** @type {!Array} */
            var ap = [a];
            /** @type {!Array} */
            var bp = [b];
            if (!aup || !bup) {
              return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
            }
            if (aup === bup) {
              return siblingCheck(a, b);
            }
            /** @type {!HTMLElement} */
            cur = a;
            for (; cur = cur.parentNode;) {
              ap.unshift(cur);
            }
            /** @type {!HTMLElement} */
            cur = b;
            for (; cur = cur.parentNode;) {
              bp.unshift(cur);
            }
            for (; ap[i] === bp[i];) {
              i++;
            }
            return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
          }, document) : document;
        };
        /**
         * @param {string} expr
         * @param {!Array} set
         * @return {?}
         */
        Sizzle.matches = function(expr, set) {
          return Sizzle(expr, null, null, set);
        };
        /**
         * @param {!Object} elem
         * @param {string} expr
         * @return {?}
         */
        Sizzle.matchesSelector = function(elem, expr) {
          if ((elem.ownerDocument || elem) !== document && setDocument(elem), expr = expr.replace(rattributeQuotes, "='$1']"), support.matchesSelector && documentIsHTML && !compilerCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
            try {
              var ret = matches.call(elem, expr);
              if (ret || support.disconnectedMatch || elem.document && 11 !== elem.document.nodeType) {
                return ret;
              }
            } catch (t) {
            }
          }
          return Sizzle(expr, document, null, [elem]).length > 0;
        };
        /**
         * @param {!Object} context
         * @param {!Object} selector
         * @return {?}
         */
        Sizzle.contains = function(context, selector) {
          return (context.ownerDocument || context) !== document && setDocument(context), contains(context, selector);
        };
        /**
         * @param {!Object} elem
         * @param {string} name
         * @return {?}
         */
        Sizzle.attr = function(elem, name) {
          if ((elem.ownerDocument || elem) !== document) {
            setDocument(elem);
          }
          var fn = Expr.attrHandle[name.toLowerCase()];
          var val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : void 0;
          return void 0 !== val ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        };
        /**
         * @param {string} text
         * @return {?}
         */
        Sizzle.escape = function(text) {
          return (text + "").replace(rcssescape, fcssescape);
        };
        /**
         * @param {string} name
         * @return {?}
         */
        Sizzle.error = function(name) {
          throw new Error("Syntax error, unrecognized expression: " + name);
        };
        /**
         * @param {!Array} arr
         * @return {?}
         */
        Sizzle.uniqueSort = function(arr) {
          var v;
          /** @type {!Array} */
          var indices = [];
          /** @type {number} */
          var i = 0;
          /** @type {number} */
          var j = 0;
          if (stability = !support.detectDuplicates, sortInput = !support.sortStable && arr.slice(0), arr.sort(event), stability) {
            for (; v = arr[j++];) {
              if (v === arr[j]) {
                /** @type {number} */
                i = indices.push(j);
              }
            }
            for (; i--;) {
              arr.splice(indices[i], 1);
            }
          }
          return sortInput = null, arr;
        };
        /** @type {function(!Object): ?} */
        getText = Sizzle.getText = function(elem) {
          var node;
          /** @type {string} */
          var ret = "";
          /** @type {number} */
          var i = 0;
          var type = elem.nodeType;
          if (type) {
            if (1 === type || 9 === type || 11 === type) {
              if ("string" == typeof elem.textContent) {
                return elem.textContent;
              }
              elem = elem.firstChild;
              for (; elem; elem = elem.nextSibling) {
                ret = ret + getText(elem);
              }
            } else {
              if (3 === type || 4 === type) {
                return elem.nodeValue;
              }
            }
          } else {
            for (; node = elem[i++];) {
              ret = ret + getText(node);
            }
          }
          return ret;
        };
        Expr = Sizzle.selectors = {
          cacheLength : 50,
          createPseudo : markFunction,
          match : matchExpr,
          attrHandle : {},
          find : {},
          relative : {
            ">" : {
              dir : "parentNode",
              first : true
            },
            " " : {
              dir : "parentNode"
            },
            "+" : {
              dir : "previousSibling",
              first : true
            },
            "~" : {
              dir : "previousSibling"
            }
          },
          preFilter : {
            ATTR : function(attr) {
              return attr[1] = attr[1].replace(start, data), attr[3] = (attr[3] || attr[4] || attr[5] || "").replace(start, data), "~=" === attr[2] && (attr[3] = " " + attr[3] + " "), attr.slice(0, 4);
            },
            CHILD : function(match) {
              return match[1] = match[1].toLowerCase(), "nth" === match[1].slice(0, 3) ? (match[3] || Sizzle.error(match[0]), match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * ("even" === match[3] || "odd" === match[3])), match[5] = +(match[7] + match[8] || "odd" === match[3])) : match[3] && Sizzle.error(match[0]), match;
            },
            PSEUDO : function(match) {
              var excess;
              var unquoted = !match[6] && match[2];
              return matchExpr.CHILD.test(match[0]) ? null : (match[3] ? match[2] = match[4] || match[5] || "" : unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length) && (match[0] = match[0].slice(0, excess), match[2] = unquoted.slice(0, excess)), match.slice(0, 3));
            }
          },
          filter : {
            TAG : function(elem) {
              var nodeName = elem.replace(start, data).toLowerCase();
              return "*" === elem ? function() {
                return true;
              } : function(elem) {
                return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
              };
            },
            CLASS : function(className) {
              var pattern = classCache[className + " "];
              return pattern || (pattern = new RegExp("(^|" + _test + ")" + className + "(" + _test + "|$)")) && classCache(className, function(t) {
                return pattern.test("string" == typeof t.className && t.className || void 0 !== t.getAttribute && t.getAttribute("class") || "");
              });
            },
            ATTR : function(name, string, value) {
              return function(elem) {
                var key = Sizzle.attr(elem, name);
                return null == key ? "!=" === string : !string || (key = key + "", "=" === string ? key === value : "!=" === string ? key !== value : "^=" === string ? value && 0 === key.indexOf(value) : "*=" === string ? value && key.indexOf(value) > -1 : "$=" === string ? value && key.slice(-value.length) === value : "~=" === string ? (" " + key.replace(entityEscapeRegExp, " ") + " ").indexOf(value) > -1 : "|=" === string && (key === value || key.slice(0, value.length + 1) === value + "-"));
              };
            },
            CHILD : function(type, what, argument, first, last) {
              /** @type {boolean} */
              var simple = "nth" !== type.slice(0, 3);
              /** @type {boolean} */
              var forward = "last" !== type.slice(-4);
              /** @type {boolean} */
              var isStrict = "of-type" === what;
              return 1 === first && 0 === last ? function(tplDiv) {
                return !!tplDiv.parentNode;
              } : function(elem, n, isParentStrict) {
                var cache;
                var uniqueCache;
                var outerCache;
                var node;
                var nodeIndex;
                var start;
                /** @type {string} */
                var dir = simple !== forward ? "nextSibling" : "previousSibling";
                var parent = elem.parentNode;
                var iteratedVal = isStrict && elem.nodeName.toLowerCase();
                /** @type {boolean} */
                var useCache = !isParentStrict && !isStrict;
                /** @type {boolean} */
                var diff = false;
                if (parent) {
                  if (simple) {
                    for (; dir;) {
                      /** @type {!Object} */
                      node = elem;
                      for (; node = node[dir];) {
                        if (isStrict ? node.nodeName.toLowerCase() === iteratedVal : 1 === node.nodeType) {
                          return false;
                        }
                      }
                      /** @type {(boolean|string)} */
                      start = dir = "only" === type && !start && "nextSibling";
                    }
                    return true;
                  }
                  if (start = [forward ? parent.firstChild : parent.lastChild], forward && useCache) {
                    node = parent;
                    outerCache = node[expando] || (node[expando] = {});
                    uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                    cache = uniqueCache[type] || [];
                    nodeIndex = cache[0] === dirruns && cache[1];
                    diff = nodeIndex && cache[2];
                    node = nodeIndex && parent.childNodes[nodeIndex];
                    for (; node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop();) {
                      if (1 === node.nodeType && ++diff && node === elem) {
                        /** @type {!Array} */
                        uniqueCache[type] = [dirruns, nodeIndex, diff];
                        break;
                      }
                    }
                  } else {
                    if (useCache && (node = elem, outerCache = node[expando] || (node[expando] = {}), uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {}), cache = uniqueCache[type] || [], nodeIndex = cache[0] === dirruns && cache[1], diff = nodeIndex), false === diff) {
                      for (; (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) && ((isStrict ? node.nodeName.toLowerCase() !== iteratedVal : 1 !== node.nodeType) || !++diff || (useCache && (outerCache = node[expando] || (node[expando] = {}), uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {}), uniqueCache[type] = [dirruns, diff]), node !== elem));) {
                      }
                    }
                  }
                  return (diff = diff - last) === first || diff % first == 0 && diff / first >= 0;
                }
              };
            },
            PSEUDO : function(pseudo, argument) {
              var args;
              var fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
              return fn[expando] ? fn(argument) : fn.length > 1 ? (args = [pseudo, pseudo, "", argument], Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
                var idx;
                var matched = fn(seed, argument);
                var i = matched.length;
                for (; i--;) {
                  idx = indexOf(seed, matched[i]);
                  /** @type {boolean} */
                  seed[idx] = !(matches[idx] = matched[i]);
                }
              }) : function(responce) {
                return fn(responce, 0, args);
              }) : fn;
            }
          },
          pseudos : {
            not : markFunction(function(selector) {
              /** @type {!Array} */
              var a = [];
              /** @type {!Array} */
              var results = [];
              var matcher = compile(selector.replace(rtrim, "$1"));
              return matcher[expando] ? markFunction(function(a, leftbuffer, n, context) {
                var value;
                var result = matcher(a, null, context, []);
                var i = a.length;
                for (; i--;) {
                  if (value = result[i]) {
                    /** @type {boolean} */
                    a[i] = !(leftbuffer[i] = value);
                  }
                }
              }) : function(sNewObjName, i, context) {
                return a[0] = sNewObjName, matcher(a, null, context, results), a[0] = null, !results.pop();
              };
            }),
            has : markFunction(function(selector) {
              return function(elem) {
                return Sizzle(selector, elem).length > 0;
              };
            }),
            contains : markFunction(function(widget) {
              return widget = widget.replace(start, data), function(elem) {
                return (elem.textContent || elem.innerText || getText(elem)).indexOf(widget) > -1;
              };
            }),
            lang : markFunction(function(lang) {
              return ridentifier.test(lang || "") || Sizzle.error("unsupported lang: " + lang), lang = lang.replace(start, data).toLowerCase(), function(elem) {
                var elemLang;
                do {
                  if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                    return (elemLang = elemLang.toLowerCase()) === lang || 0 === elemLang.indexOf(lang + "-");
                  }
                } while ((elem = elem.parentNode) && 1 === elem.nodeType);
                return false;
              };
            }),
            target : function(name) {
              var charListNotLatin = window.location && window.location.hash;
              return charListNotLatin && charListNotLatin.slice(1) === name.id;
            },
            root : function(elem) {
              return elem === docElem;
            },
            focus : function(node) {
              return node === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(node.type || node.href || ~node.tabIndex);
            },
            enabled : createDisabledPseudo(false),
            disabled : createDisabledPseudo(true),
            checked : function(elem) {
              var custom = elem.nodeName.toLowerCase();
              return "input" === custom && !!elem.checked || "option" === custom && !!elem.selected;
            },
            selected : function(elem) {
              return elem.parentNode && elem.parentNode.selectedIndex, true === elem.selected;
            },
            empty : function(elem) {
              elem = elem.firstChild;
              for (; elem; elem = elem.nextSibling) {
                if (elem.nodeType < 6) {
                  return false;
                }
              }
              return true;
            },
            parent : function(elem) {
              return !Expr.pseudos.empty(elem);
            },
            header : function(elem) {
              return rnoType.test(elem.nodeName);
            },
            input : function(target) {
              return inputNodeNames.test(target.nodeName);
            },
            button : function(elem) {
              var left = elem.nodeName.toLowerCase();
              return "input" === left && "button" === elem.type || "button" === left;
            },
            text : function(elem) {
              var EXT;
              return "input" === elem.nodeName.toLowerCase() && "text" === elem.type && (null == (EXT = elem.getAttribute("type")) || "text" === EXT.toLowerCase());
            },
            first : createPositionalPseudo(function() {
              return [0];
            }),
            last : createPositionalPseudo(function(canCreateDiscussions, isSlidingUp) {
              return [isSlidingUp - 1];
            }),
            eq : createPositionalPseudo(function(canCreateDiscussions, pageHeight, srcY) {
              return [srcY < 0 ? srcY + pageHeight : srcY];
            }),
            even : createPositionalPseudo(function(lastshuffle, inclusiveMin) {
              /** @type {number} */
              var value = 0;
              for (; value < inclusiveMin; value = value + 2) {
                lastshuffle.push(value);
              }
              return lastshuffle;
            }),
            odd : createPositionalPseudo(function(lastshuffle, inclusiveMin) {
              /** @type {number} */
              var value = 1;
              for (; value < inclusiveMin; value = value + 2) {
                lastshuffle.push(value);
              }
              return lastshuffle;
            }),
            lt : createPositionalPseudo(function(newNodeLists, pageHeight, srcY) {
              var itemNodeList = srcY < 0 ? srcY + pageHeight : srcY;
              for (; --itemNodeList >= 0;) {
                newNodeLists.push(itemNodeList);
              }
              return newNodeLists;
            }),
            gt : createPositionalPseudo(function(newNodeLists, pageHeight, srcY) {
              var itemNodeList = srcY < 0 ? srcY + pageHeight : srcY;
              for (; ++itemNodeList < pageHeight;) {
                newNodeLists.push(itemNodeList);
              }
              return newNodeLists;
            })
          }
        };
        Expr.pseudos.nth = Expr.pseudos.eq;
        for (i in{
          radio : true,
          checkbox : true,
          file : true,
          password : true,
          image : true
        }) {
          Expr.pseudos[i] = function(name) {
            return function(section) {
              return "input" === section.nodeName.toLowerCase() && section.type === name;
            };
          }(i);
        }
        for (i in{
          submit : true,
          reset : true
        }) {
          Expr.pseudos[i] = function(name) {
            return function(section) {
              var undefined = section.nodeName.toLowerCase();
              return ("input" === undefined || "button" === undefined) && section.type === name;
            };
          }(i);
        }
        return setFilters.prototype = Expr.filters = Expr.pseudos, Expr.setFilters = new setFilters, tokenize = Sizzle.tokenize = function(name, start) {
          var s;
          var match;
          var tokens;
          var type;
          var r;
          var groups;
          var preFilters;
          var obj = next[name + " "];
          if (obj) {
            return start ? 0 : obj.slice(0);
          }
          /** @type {string} */
          r = name;
          /** @type {!Array} */
          groups = [];
          preFilters = Expr.preFilter;
          for (; r;) {
            if (!(s && !(match = vR.exec(r)))) {
              if (match) {
                r = r.slice(match[0].length) || r;
              }
              groups.push(tokens = []);
            }
            /** @type {boolean} */
            s = false;
            if (match = existingRegistrationRegex.exec(r)) {
              /** @type {string} */
              s = match.shift();
              tokens.push({
                value : s,
                type : match[0].replace(rtrim, " ")
              });
              r = r.slice(s.length);
            }
            for (type in Expr.filter) {
              if (!(!(match = matchExpr[type].exec(r)) || preFilters[type] && !(match = preFilters[type](match)))) {
                s = match.shift();
                tokens.push({
                  value : s,
                  type : type,
                  matches : match
                });
                r = r.slice(s.length);
              }
            }
            if (!s) {
              break;
            }
          }
          return start ? r.length : r ? Sizzle.error(name) : next(name, groups).slice(0);
        }, compile = Sizzle.compile = function(selector, group) {
          var i;
          /** @type {!Array} */
          var setMatchers = [];
          /** @type {!Array} */
          var elementMatchers = [];
          var cached = compilerCache[selector + " "];
          if (!cached) {
            if (!group) {
              group = tokenize(selector);
            }
            i = group.length;
            for (; i--;) {
              cached = matcherFromTokens(group[i]);
              if (cached[expando]) {
                setMatchers.push(cached);
              } else {
                elementMatchers.push(cached);
              }
            }
            cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
            /** @type {string} */
            cached.selector = selector;
          }
          return cached;
        }, select = Sizzle.select = function(selector, context, results, seed) {
          var i;
          var tokens;
          var token;
          var type;
          var find;
          /** @type {(!Function|boolean)} */
          var compiled = "function" == typeof selector && selector;
          var match = !seed && tokenize(selector = compiled.selector || selector);
          if (results = results || [], 1 === match.length) {
            if (tokens = match[0] = match[0].slice(0), tokens.length > 2 && "ID" === (token = tokens[0]).type && 9 === context.nodeType && documentIsHTML && Expr.relative[tokens[1].type]) {
              if (!(context = (Expr.find.ID(token.matches[0].replace(start, data), context) || [])[0])) {
                return results;
              }
              if (compiled) {
                context = context.parentNode;
              }
              selector = selector.slice(tokens.shift().value.length);
            }
            i = matchExpr.needsContext.test(selector) ? 0 : tokens.length;
            for (; i-- && (token = tokens[i], !Expr.relative[type = token.type]);) {
              if ((find = Expr.find[type]) && (seed = find(token.matches[0].replace(start, data), IS_HTML_FRAGMENT.test(tokens[0].type) && testContext(context.parentNode) || context))) {
                if (tokens.splice(i, 1), !(selector = seed.length && toSelector(tokens))) {
                  return push.apply(results, seed), results;
                }
                break;
              }
            }
          }
          return (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || IS_HTML_FRAGMENT.test(selector) && testContext(context.parentNode) || context), results;
        }, support.sortStable = expando.split("").sort(event).join("") === expando, support.detectDuplicates = !!stability, setDocument(), support.sortDetached = assert(function(html) {
          return 1 & html.compareDocumentPosition(document.createElement("fieldset"));
        }), assert(function(aItem) {
          return aItem.innerHTML = "<a href='#'></a>", "#" === aItem.firstChild.getAttribute("href");
        }) || addHandle("type|href|height|width", function(t, link, n) {
          if (!n) {
            return t.getAttribute(link, "type" === link.toLowerCase() ? 1 : 2);
          }
        }), support.attributes && assert(function(aItem) {
          return aItem.innerHTML = "<input/>", aItem.firstChild.setAttribute("value", ""), "" === aItem.firstChild.getAttribute("value");
        }) || addHandle("value", function(src, canCreateDiscussions, n) {
          if (!n && "input" === src.nodeName.toLowerCase()) {
            return src.defaultValue;
          }
        }), assert(function(t) {
          return null == t.getAttribute("disabled");
        }) || addHandle(value, function(elem, name, n) {
          var val;
          if (!n) {
            return true === elem[name] ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
          }
        }), Sizzle;
      }(window);
      jQuery.find = Sizzle;
      jQuery.expr = Sizzle.selectors;
      jQuery.expr[":"] = jQuery.expr.pseudos;
      jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
      jQuery.text = Sizzle.getText;
      jQuery.isXMLDoc = Sizzle.isXML;
      jQuery.contains = Sizzle.contains;
      jQuery.escapeSelector = Sizzle.escape;
      /**
       * @param {string} elem
       * @param {string} dir
       * @param {?} name
       * @return {?}
       */
      var dir = function(elem, dir, name) {
        /** @type {!Array} */
        var matched = [];
        /** @type {boolean} */
        var o = void 0 !== name;
        for (; (elem = elem[dir]) && 9 !== elem.nodeType;) {
          if (1 === elem.nodeType) {
            if (o && jQuery(elem).is(name)) {
              break;
            }
            matched.push(elem);
          }
        }
        return matched;
      };
      /**
       * @param {!Element} node
       * @param {!Node} elem
       * @return {?}
       */
      var _sibling = function(node, elem) {
        /** @type {!Array} */
        var result = [];
        for (; node; node = node.nextSibling) {
          if (1 === node.nodeType && node !== elem) {
            result.push(node);
          }
        }
        return result;
      };
      var rneedsContext = jQuery.expr.match.needsContext;
      /** @type {!RegExp} */
      var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
      /** @type {!RegExp} */
      var trueRE = /^.[^:#\[\.,]*$/;
      /**
       * @param {string} expr
       * @param {!Object} elems
       * @param {string} not
       * @return {?}
       */
      jQuery.filter = function(expr, elems, not) {
        var elem = elems[0];
        return not && (expr = ":not(" + expr + ")"), 1 === elems.length && 1 === elem.nodeType ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function(nodeToInspect) {
          return 1 === nodeToInspect.nodeType;
        }));
      };
      jQuery.fn.extend({
        find : function(selector) {
          var i;
          var ret;
          var len = this.length;
          var self = this;
          if ("string" != typeof selector) {
            return this.pushStack(jQuery(selector).filter(function() {
              /** @type {number} */
              i = 0;
              for (; i < len; i++) {
                if (jQuery.contains(self[i], this)) {
                  return true;
                }
              }
            }));
          }
          ret = this.pushStack([]);
          /** @type {number} */
          i = 0;
          for (; i < len; i++) {
            jQuery.find(selector, self[i], ret);
          }
          return len > 1 ? jQuery.uniqueSort(ret) : ret;
        },
        filter : function(val) {
          return this.pushStack(winnow(this, val || [], false));
        },
        not : function(selector) {
          return this.pushStack(winnow(this, selector || [], true));
        },
        is : function(selector) {
          return !!winnow(this, "string" == typeof selector && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        }
      });
      var rootjQuery;
      /** @type {!RegExp} */
      var customSelectorReg = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;
      (jQuery.fn.init = function(selector, context, root) {
        var match;
        var o;
        if (!selector) {
          return this;
        }
        if (root = root || rootjQuery, "string" == typeof selector) {
          if (!(match = "<" === selector[0] && ">" === selector[selector.length - 1] && selector.length >= 3 ? [null, selector, null] : customSelectorReg.exec(selector)) || !match[1] && context) {
            return !context || context.jquery ? (context || root).find(selector) : this.constructor(context).find(selector);
          }
          if (match[1]) {
            if (context = context instanceof jQuery ? context[0] : context, jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true)), rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
              for (match in context) {
                if (jQuery.isFunction(this[match])) {
                  this[match](context[match]);
                } else {
                  this.attr(match, context[match]);
                }
              }
            }
            return this;
          }
          return o = document.getElementById(match[2]), o && (this[0] = o, this.length = 1), this;
        }
        return selector.nodeType ? (this[0] = selector, this.length = 1, this) : jQuery.isFunction(selector) ? void 0 !== root.ready ? root.ready(selector) : selector(jQuery) : jQuery.makeArray(selector, this);
      }).prototype = jQuery.fn;
      rootjQuery = jQuery(document);
      /** @type {!RegExp} */
      var testRxp = /^(?:parents|prev(?:Until|All))/;
      var guaranteedUnique = {
        children : true,
        contents : true,
        next : true,
        prev : true
      };
      jQuery.fn.extend({
        has : function(elem) {
          var obj = jQuery(elem, this);
          var l = obj.length;
          return this.filter(function() {
            /** @type {number} */
            var i = 0;
            for (; i < l; i++) {
              if (jQuery.contains(this, obj[i])) {
                return true;
              }
            }
          });
        },
        closest : function(selector, context) {
          var node;
          /** @type {number} */
          var j = 0;
          var i = this.length;
          /** @type {!Array} */
          var ret = [];
          var s = "string" != typeof selector && jQuery(selector);
          if (!rneedsContext.test(selector)) {
            for (; j < i; j++) {
              node = this[j];
              for (; node && node !== context; node = node.parentNode) {
                if (node.nodeType < 11 && (s ? s.index(node) > -1 : 1 === node.nodeType && jQuery.find.matchesSelector(node, selector))) {
                  ret.push(node);
                  break;
                }
              }
            }
          }
          return this.pushStack(ret.length > 1 ? jQuery.uniqueSort(ret) : ret);
        },
        index : function(elem) {
          return elem ? "string" == typeof elem ? indexOf.call(jQuery(elem), this[0]) : indexOf.call(this, elem.jquery ? elem[0] : elem) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
        },
        add : function(elem, context) {
          return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(elem, context))));
        },
        addBack : function(selector) {
          return this.add(null == selector ? this.prevObject : this.prevObject.filter(selector));
        }
      });
      jQuery.each({
        parent : function(elem) {
          var parent = elem.parentNode;
          return parent && 11 !== parent.nodeType ? parent : null;
        },
        parents : function(elem) {
          return dir(elem, "parentNode");
        },
        parentsUntil : function(elem, i, until) {
          return dir(elem, "parentNode", until);
        },
        next : function(elem) {
          return sibling(elem, "nextSibling");
        },
        prev : function(elem) {
          return sibling(elem, "previousSibling");
        },
        nextAll : function(elem) {
          return dir(elem, "nextSibling");
        },
        prevAll : function(elem) {
          return dir(elem, "previousSibling");
        },
        nextUntil : function(elem, i, until) {
          return dir(elem, "nextSibling", until);
        },
        prevUntil : function(elem, i, until) {
          return dir(elem, "previousSibling", until);
        },
        siblings : function(elem) {
          return _sibling((elem.parentNode || {}).firstChild, elem);
        },
        children : function(elem) {
          return _sibling(elem.firstChild);
        },
        contents : function(elem) {
          return callback(elem, "iframe") ? elem.contentDocument : (callback(elem, "template") && (elem = elem.content || elem), jQuery.merge([], elem.childNodes));
        }
      }, function(name, e) {
        /**
         * @param {boolean} callback
         * @param {boolean} fn
         * @return {?}
         */
        jQuery.fn[name] = function(callback, fn) {
          var ret = jQuery.map(this, e, callback);
          return "Until" !== name.slice(-5) && (fn = callback), fn && "string" == typeof fn && (ret = jQuery.filter(fn, ret)), this.length > 1 && (guaranteedUnique[name] || jQuery.uniqueSort(ret), testRxp.test(name) && ret.reverse()), this.pushStack(ret);
        };
      });
      /** @type {!RegExp} */
      var rnotwhite = /[^\x20\t\r\n\f]+/g;
      /**
       * @param {string} options
       * @return {?}
       */
      jQuery.Callbacks = function(options) {
        options = "string" == typeof options ? createOptions(options) : jQuery.extend({}, options);
        var e;
        var n;
        var evOrig;
        var t;
        /** @type {!Array} */
        var c = [];
        /** @type {!Array} */
        var s = [];
        /** @type {number} */
        var b = -1;
        /**
         * @return {undefined}
         */
        var fire = function() {
          t = t || options.once;
          /** @type {boolean} */
          evOrig = e = true;
          for (; s.length; b = -1) {
            n = s.shift();
            for (; ++b < c.length;) {
              if (false === c[b].apply(n[0], n[1]) && options.stopOnFalse) {
                b = c.length;
                /** @type {boolean} */
                n = false;
              }
            }
          }
          if (!options.memory) {
            /** @type {boolean} */
            n = false;
          }
          /** @type {boolean} */
          e = false;
          if (t) {
            /** @type {(Array|string)} */
            c = n ? [] : "";
          }
        };
        var self = {
          add : function() {
            return c && (n && !e && (b = c.length - 1, s.push(n)), function add(callback) {
              jQuery.each(callback, function(n, name) {
                if (jQuery.isFunction(name)) {
                  if (!(options.unique && self.has(name))) {
                    c.push(name);
                  }
                } else {
                  if (name && name.length && "string" !== jQuery.type(name)) {
                    add(name);
                  }
                }
              });
            }(arguments), n && !e && fire()), this;
          },
          remove : function() {
            return jQuery.each(arguments, function(canCreateDiscussions, img) {
              var a;
              for (; (a = jQuery.inArray(img, c, a)) > -1;) {
                c.splice(a, 1);
                if (a <= b) {
                  b--;
                }
              }
            }), this;
          },
          has : function(className) {
            return className ? jQuery.inArray(className, c) > -1 : c.length > 0;
          },
          empty : function() {
            return c && (c = []), this;
          },
          disable : function() {
            return t = s = [], c = n = "", this;
          },
          disabled : function() {
            return !c;
          },
          lock : function() {
            return t = s = [], n || e || (c = n = ""), this;
          },
          locked : function() {
            return !!t;
          },
          fireWith : function(context, args) {
            return t || (args = args || [], args = [context, args.slice ? args.slice() : args], s.push(args), e || fire()), this;
          },
          fire : function() {
            return self.fireWith(this, arguments), this;
          },
          fired : function() {
            return !!evOrig;
          }
        };
        return self;
      };
      jQuery.extend({
        Deferred : function(func) {
          /** @type {!Array} */
          var e = [["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]];
          /** @type {string} */
          var state = "pending";
          var promise = {
            state : function() {
              return state;
            },
            always : function() {
              return deferred.done(arguments).fail(arguments), this;
            },
            catch : function(c) {
              return promise.then(null, c);
            },
            pipe : function() {
              /** @type {!Arguments} */
              var values = arguments;
              return jQuery.Deferred(function(newDefer) {
                jQuery.each(e, function(canCreateDiscussions, tuple) {
                  var fn = jQuery.isFunction(values[tuple[4]]) && values[tuple[4]];
                  deferred[tuple[1]](function() {
                    var returned = fn && fn.apply(this, arguments);
                    if (returned && jQuery.isFunction(returned.promise)) {
                      returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                    } else {
                      newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
                    }
                  });
                });
                /** @type {null} */
                values = null;
              }).promise();
            },
            then : function(type, value, html) {
              /**
               * @param {number} a
               * @param {!Object} deferred
               * @param {!Function} method
               * @param {boolean} x
               * @return {?}
               */
              function fn(a, deferred, method, x) {
                return function() {
                  var elem = this;
                  /** @type {!Arguments} */
                  var values = arguments;
                  /**
                   * @return {undefined}
                   */
                  var filter = function() {
                    var value;
                    var result;
                    if (!(a < c)) {
                      if ((value = method.apply(elem, values)) === deferred.promise()) {
                        throw new TypeError("Thenable self-resolution");
                      }
                      result = value && ("object" == typeof value || "function" == typeof value) && value.then;
                      if (jQuery.isFunction(result)) {
                        if (x) {
                          result.call(value, fn(c, deferred, m, x), fn(c, deferred, undefined, x));
                        } else {
                          c++;
                          result.call(value, fn(c, deferred, m, x), fn(c, deferred, undefined, x), fn(c, deferred, m, deferred.notifyWith));
                        }
                      } else {
                        if (method !== m) {
                          elem = void 0;
                          /** @type {!Array} */
                          values = [value];
                        }
                        (x || deferred.resolveWith)(elem, values);
                      }
                    }
                  };
                  /** @type {function(): undefined} */
                  var error = x ? filter : function() {
                    try {
                      filter();
                    } catch (scheduled) {
                      if (jQuery.Deferred.exceptionHook) {
                        jQuery.Deferred.exceptionHook(scheduled, error.stackTrace);
                      }
                      if (a + 1 >= c) {
                        if (method !== undefined) {
                          elem = void 0;
                          /** @type {!Array} */
                          values = [scheduled];
                        }
                        deferred.rejectWith(elem, values);
                      }
                    }
                  };
                  if (a) {
                    error();
                  } else {
                    if (jQuery.Deferred.getStackHook) {
                      error.stackTrace = jQuery.Deferred.getStackHook();
                    }
                    window.setTimeout(error);
                  }
                };
              }
              /** @type {number} */
              var c = 0;
              return jQuery.Deferred(function(d) {
                e[0][3].add(fn(0, d, jQuery.isFunction(html) ? html : m, d.notifyWith));
                e[1][3].add(fn(0, d, jQuery.isFunction(type) ? type : m));
                e[2][3].add(fn(0, d, jQuery.isFunction(value) ? value : undefined));
              }).promise();
            },
            promise : function(context) {
              return null != context ? jQuery.extend(context, promise) : promise;
            }
          };
          var deferred = {};
          return jQuery.each(e, function(s, tuple) {
            var list = tuple[2];
            var stateString = tuple[5];
            promise[tuple[1]] = list.add;
            if (stateString) {
              list.add(function() {
                state = stateString;
              }, e[3 - s][2].disable, e[0][2].lock);
            }
            list.add(tuple[3].fire);
            /**
             * @return {?}
             */
            deferred[tuple[0]] = function() {
              return deferred[tuple[0] + "With"](this === deferred ? void 0 : this, arguments), this;
            };
            deferred[tuple[0] + "With"] = list.fireWith;
          }), promise.promise(deferred), func && func.call(deferred, deferred), deferred;
        },
        when : function(data) {
          /** @type {number} */
          var sampleSize = arguments.length;
          var i = sampleSize;
          /** @type {!Array} */
          var elements = Array(i);
          /** @type {!Array<?>} */
          var args = slice.call(arguments);
          var d = jQuery.Deferred();
          /**
           * @param {undefined} i
           * @return {?}
           */
          var updateFn = function(i) {
            return function(value) {
              elements[i] = this;
              args[i] = arguments.length > 1 ? slice.call(arguments) : value;
              if (!--sampleSize) {
                d.resolveWith(elements, args);
              }
            };
          };
          if (sampleSize <= 1 && (resolve(data, d.done(updateFn(i)).resolve, d.reject, !sampleSize), "pending" === d.state() || jQuery.isFunction(args[i] && args[i].then))) {
            return d.then();
          }
          for (; i--;) {
            resolve(args[i], updateFn(i), d.reject);
          }
          return d.promise();
        }
      });
      /** @type {!RegExp} */
      var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
      /**
       * @param {?} error
       * @param {?} stack
       * @return {undefined}
       */
      jQuery.Deferred.exceptionHook = function(error, stack) {
        if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
          window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
        }
      };
      /**
       * @param {?} error
       * @return {undefined}
       */
      jQuery.readyException = function(error) {
        window.setTimeout(function() {
          throw error;
        });
      };
      var f = jQuery.Deferred();
      /**
       * @param {?} t
       * @return {?}
       */
      jQuery.fn.ready = function(t) {
        return f.then(t).catch(function(t) {
          jQuery.readyException(t);
        }), this;
      };
      jQuery.extend({
        isReady : false,
        readyWait : 1,
        ready : function(user) {
          if (!(true === user ? --jQuery.readyWait : jQuery.isReady)) {
            /** @type {boolean} */
            jQuery.isReady = true;
            if (!(true !== user && --jQuery.readyWait > 0)) {
              f.resolveWith(document, [jQuery]);
            }
          }
        }
      });
      jQuery.ready.then = f.then;
      if ("complete" === document.readyState || "loading" !== document.readyState && !document.documentElement.doScroll) {
        window.setTimeout(jQuery.ready);
      } else {
        document.addEventListener("DOMContentLoaded", $__jsx_onload);
        window.addEventListener("load", $__jsx_onload);
      }
      /**
       * @param {string} elems
       * @param {!Function} fn
       * @param {string} key
       * @param {?} value
       * @param {number} chainable
       * @param {string} emptyGet
       * @param {boolean} raw
       * @return {?}
       */
      var access = function(elems, fn, key, value, chainable, emptyGet, raw) {
        /** @type {number} */
        var i = 0;
        var len = elems.length;
        /** @type {boolean} */
        var bulk = null == key;
        if ("object" === jQuery.type(key)) {
          /** @type {boolean} */
          chainable = true;
          for (i in key) {
            access(elems, fn, i, key[i], true, emptyGet, raw);
          }
        } else {
          if (void 0 !== value && (chainable = true, jQuery.isFunction(value) || (raw = true), bulk && (raw ? (fn.call(elems, value), fn = null) : (bulk = fn, fn = function(elem, e, value) {
            return bulk.call(jQuery(elem), value);
          })), fn)) {
            for (; i < len; i++) {
              fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
            }
          }
        }
        return chainable ? elems : bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;
      };
      /**
       * @param {!Object} elem
       * @return {?}
       */
      var acceptData = function(elem) {
        return 1 === elem.nodeType || 9 === elem.nodeType || !+elem.nodeType;
      };
      /** @type {number} */
      Data.uid = 1;
      Data.prototype = {
        cache : function(elem) {
          var value = elem[this.expando];
          return value || (value = {}, acceptData(elem) && (elem.nodeType ? elem[this.expando] = value : Object.defineProperty(elem, this.expando, {
            value : value,
            configurable : true
          }))), value;
        },
        set : function(key, data, name) {
          var prop;
          var cache = this.cache(key);
          if ("string" == typeof data) {
            /** @type {string} */
            cache[jQuery.camelCase(data)] = name;
          } else {
            for (prop in data) {
              cache[jQuery.camelCase(prop)] = data[prop];
            }
          }
          return cache;
        },
        get : function(data, key) {
          return void 0 === key ? this.cache(data) : data[this.expando] && data[this.expando][jQuery.camelCase(key)];
        },
        access : function(value, fn, size) {
          return void 0 === fn || fn && "string" == typeof fn && void 0 === size ? this.get(value, fn) : (this.set(value, fn, size), void 0 !== size ? size : fn);
        },
        remove : function(owner, key) {
          var j;
          var value = owner[this.expando];
          if (void 0 !== value) {
            if (void 0 !== key) {
              if (Array.isArray(key)) {
                key = key.map(jQuery.camelCase);
              } else {
                key = jQuery.camelCase(key);
                key = key in value ? [key] : key.match(rnotwhite) || [];
              }
              j = key.length;
              for (; j--;) {
                delete value[key[j]];
              }
            }
            if (void 0 === key || jQuery.isEmptyObject(value)) {
              if (owner.nodeType) {
                owner[this.expando] = void 0;
              } else {
                delete owner[this.expando];
              }
            }
          }
        },
        hasData : function(owner) {
          var cache = owner[this.expando];
          return void 0 !== cache && !jQuery.isEmptyObject(cache);
        }
      };
      var dataPriv = new Data;
      var $ = new Data;
      /** @type {!RegExp} */
      var contribRegex = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/;
      /** @type {!RegExp} */
      var rhyphen = /[A-Z]/g;
      jQuery.extend({
        hasData : function(elem) {
          return $.hasData(elem) || dataPriv.hasData(elem);
        },
        data : function(name, done, value) {
          return $.access(name, done, value);
        },
        removeData : function(elem, key) {
          $.remove(elem, key);
        },
        _data : function(elem, name, data) {
          return dataPriv.access(elem, name, data);
        },
        _removeData : function(elem, name) {
          dataPriv.remove(elem, name);
        }
      });
      jQuery.fn.extend({
        data : function(name, value) {
          var w;
          var key;
          var data;
          var elem = this[0];
          var root = elem && elem.attributes;
          if (void 0 === name) {
            if (this.length && (data = $.get(elem), 1 === elem.nodeType && !dataPriv.get(elem, "hasDataAttrs"))) {
              w = root.length;
              for (; w--;) {
                if (root[w]) {
                  key = root[w].name;
                  if (0 === key.indexOf("data-")) {
                    key = jQuery.camelCase(key.slice(5));
                    set(elem, key, data[key]);
                  }
                }
              }
              dataPriv.set(elem, "hasDataAttrs", true);
            }
            return data;
          }
          return "object" == typeof name ? this.each(function() {
            $.set(this, name);
          }) : access(this, function(label) {
            var data;
            if (elem && void 0 === label) {
              if (void 0 !== (data = $.get(elem, name))) {
                return data;
              }
              if (void 0 !== (data = set(elem, name))) {
                return data;
              }
            } else {
              this.each(function() {
                $.set(this, name, label);
              });
            }
          }, null, value, arguments.length > 1, null, true);
        },
        removeData : function(key) {
          return this.each(function() {
            $.remove(this, key);
          });
        }
      });
      jQuery.extend({
        queue : function(elem, type, data) {
          var q;
          if (elem) {
            return type = (type || "fx") + "queue", q = dataPriv.get(elem, type), data && (!q || Array.isArray(data) ? q = dataPriv.access(elem, type, jQuery.makeArray(data)) : q.push(data)), q || [];
          }
        },
        dequeue : function(elem, type) {
          type = type || "fx";
          var queue = jQuery.queue(elem, type);
          var i = queue.length;
          var listener = queue.shift();
          var handle = jQuery._queueHooks(elem, type);
          /**
           * @return {undefined}
           */
          var next = function() {
            jQuery.dequeue(elem, type);
          };
          if ("inprogress" === listener) {
            listener = queue.shift();
            i--;
          }
          if (listener) {
            if ("fx" === type) {
              queue.unshift("inprogress");
            }
            delete handle.stop;
            listener.call(elem, next, handle);
          }
          if (!i && handle) {
            handle.empty.fire();
          }
        },
        _queueHooks : function(elem, type) {
          /** @type {string} */
          var key = type + "queueHooks";
          return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
            empty : jQuery.Callbacks("once memory").add(function() {
              dataPriv.remove(elem, [type + "queue", key]);
            })
          });
        }
      });
      jQuery.fn.extend({
        queue : function(type, data) {
          /** @type {number} */
          var setter = 2;
          return "string" != typeof type && (data = type, type = "fx", setter--), arguments.length < setter ? jQuery.queue(this[0], type) : void 0 === data ? this : this.each(function() {
            var queue = jQuery.queue(this, type, data);
            jQuery._queueHooks(this, type);
            if ("fx" === type && "inprogress" !== queue[0]) {
              jQuery.dequeue(this, type);
            }
          });
        },
        dequeue : function(type) {
          return this.each(function() {
            jQuery.dequeue(this, type);
          });
        },
        clearQueue : function(type) {
          return this.queue(type || "fx", []);
        },
        promise : function(type, result) {
          var sel;
          /** @type {number} */
          var l = 1;
          var defer = jQuery.Deferred();
          var elements = this;
          var i = this.length;
          /**
           * @return {undefined}
           */
          var resolve = function() {
            if (!--l) {
              defer.resolveWith(elements, [elements]);
            }
          };
          if ("string" != typeof type) {
            /** @type {!Object} */
            result = type;
            type = void 0;
          }
          type = type || "fx";
          for (; i--;) {
            if ((sel = dataPriv.get(elements[i], type + "queueHooks")) && sel.empty) {
              l++;
              sel.empty.add(resolve);
            }
          }
          return resolve(), defer.promise(result);
        }
      });
      /** @type {string} */
      var FSSource = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
      /** @type {!RegExp} */
      var regex = new RegExp("^(?:([+-])=|)(" + FSSource + ")([a-z%]*)$", "i");
      /** @type {!Array} */
      var cssExpand = ["Top", "Right", "Bottom", "Left"];
      /**
       * @param {!Object} element
       * @param {!Object} root
       * @return {?}
       */
      var isHidden = function(element, root) {
        return element = root || element, "none" === element.style.display || "" === element.style.display && jQuery.contains(element.ownerDocument, element) && "none" === jQuery.css(element, "display");
      };
      /**
       * @param {!Object} elem
       * @param {!Array} fn
       * @param {!Function} that
       * @param {number} options
       * @return {?}
       */
      var swap = function(elem, fn, that, options) {
        var ret;
        var prop;
        var originObject = {};
        for (prop in fn) {
          originObject[prop] = elem.style[prop];
          elem.style[prop] = fn[prop];
        }
        ret = that.apply(elem, options || []);
        for (prop in fn) {
          elem.style[prop] = originObject[prop];
        }
        return ret;
      };
      var colors = {};
      jQuery.fn.extend({
        show : function() {
          return showHide(this, true);
        },
        hide : function() {
          return showHide(this);
        },
        toggle : function(state) {
          return "boolean" == typeof state ? state ? this.show() : this.hide() : this.each(function() {
            if (isHidden(this)) {
              jQuery(this).show();
            } else {
              jQuery(this).hide();
            }
          });
        }
      });
      /** @type {!RegExp} */
      var reg = /^(?:checkbox|radio)$/i;
      /** @type {!RegExp} */
      var fullLinkRegex = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i;
      /** @type {!RegExp} */
      var opacityRe = /^$|\/(?:java|ecma)script/i;
      var wrapMap = {
        option : [1, "<select multiple='multiple'>", "</select>"],
        thead : [1, "<table>", "</table>"],
        col : [2, "<table><colgroup>", "</colgroup></table>"],
        tr : [2, "<table><tbody>", "</tbody></table>"],
        td : [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        _default : [0, "", ""]
      };
      /** @type {!Array} */
      wrapMap.optgroup = wrapMap.option;
      /** @type {!Array} */
      wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
      /** @type {!Array} */
      wrapMap.th = wrapMap.td;
      /** @type {!RegExp} */
      var re_commas = /<|&#?\w+;/;
      !function() {
        var text_screen = document.createDocumentFragment();
        var e = text_screen.appendChild(document.createElement("div"));
        var input = document.createElement("input");
        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");
        e.appendChild(input);
        support.checkClone = e.cloneNode(true).cloneNode(true).lastChild.checked;
        /** @type {string} */
        e.innerHTML = "<textarea>x</textarea>";
        /** @type {boolean} */
        support.noCloneChecked = !!e.cloneNode(true).lastChild.defaultValue;
      }();
      var node = document.documentElement;
      /** @type {!RegExp} */
      var receivedErrorEvents = /^key/;
      /** @type {!RegExp} */
      var receivedOpenEvents = /^(?:mouse|pointer|contextmenu|drag|drop)|click/;
      /** @type {!RegExp} */
      var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
      jQuery.event = {
        global : {},
        add : function(elem, types, handler, data, selector) {
          var handleObjIn;
          var eventHandle;
          var tmp;
          var events;
          var t;
          var handleObj;
          var special;
          var handlers;
          var type;
          var h;
          var origType;
          var elemData = dataPriv.get(elem);
          if (elemData) {
            if (handler.handler) {
              /** @type {!Object} */
              handleObjIn = handler;
              handler = handleObjIn.handler;
              selector = handleObjIn.selector;
            }
            if (selector) {
              jQuery.find.matchesSelector(node, selector);
            }
            if (!handler.guid) {
              /** @type {number} */
              handler.guid = jQuery.guid++;
            }
            if (!(events = elemData.events)) {
              events = elemData.events = {};
            }
            if (!(eventHandle = elemData.handle)) {
              /** @type {function(!Object): ?} */
              eventHandle = elemData.handle = function(e) {
                return void 0 !== jQuery && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : void 0;
              };
            }
            types = (types || "").match(rnotwhite) || [""];
            t = types.length;
            for (; t--;) {
              /** @type {!Array} */
              tmp = rtypenamespace.exec(types[t]) || [];
              type = origType = tmp[1];
              h = (tmp[2] || "").split(".").sort();
              if (type) {
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                special = jQuery.event.special[type] || {};
                handleObj = jQuery.extend({
                  type : type,
                  origType : origType,
                  data : data,
                  handler : handler,
                  guid : handler.guid,
                  selector : selector,
                  needsContext : selector && jQuery.expr.match.needsContext.test(selector),
                  namespace : h.join(".")
                }, handleObjIn);
                if (!(handlers = events[type])) {
                  /** @type {!Array} */
                  handlers = events[type] = [];
                  /** @type {number} */
                  handlers.delegateCount = 0;
                  if (!(special.setup && false !== special.setup.call(elem, data, h, eventHandle))) {
                    if (elem.addEventListener) {
                      elem.addEventListener(type, eventHandle);
                    }
                  }
                }
                if (special.add) {
                  special.add.call(elem, handleObj);
                  if (!handleObj.handler.guid) {
                    handleObj.handler.guid = handler.guid;
                  }
                }
                if (selector) {
                  handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                  handlers.push(handleObj);
                }
                /** @type {boolean} */
                jQuery.event.global[type] = true;
              }
            }
          }
        },
        remove : function(elem, types, fn, selector, mappedTypes) {
          var j;
          var origCount;
          var tmp;
          var events;
          var t;
          var handleObj;
          var special;
          var handlers;
          var type;
          var h;
          var origType;
          var elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
          if (elemData && (events = elemData.events)) {
            types = (types || "").match(rnotwhite) || [""];
            t = types.length;
            for (; t--;) {
              if (tmp = rtypenamespace.exec(types[t]) || [], type = origType = tmp[1], h = (tmp[2] || "").split(".").sort(), type) {
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)");
                origCount = j = handlers.length;
                for (; j--;) {
                  handleObj = handlers[j];
                  if (!(!mappedTypes && origType !== handleObj.origType || fn && fn.guid !== handleObj.guid || tmp && !tmp.test(handleObj.namespace) || selector && selector !== handleObj.selector && ("**" !== selector || !handleObj.selector))) {
                    handlers.splice(j, 1);
                    if (handleObj.selector) {
                      handlers.delegateCount--;
                    }
                    if (special.remove) {
                      special.remove.call(elem, handleObj);
                    }
                  }
                }
                if (origCount && !handlers.length) {
                  if (!(special.teardown && false !== special.teardown.call(elem, h, elemData.handle))) {
                    jQuery.removeEvent(elem, type, elemData.handle);
                  }
                  delete events[type];
                }
              } else {
                for (type in events) {
                  jQuery.event.remove(elem, type + types[t], fn, selector, true);
                }
              }
            }
            if (jQuery.isEmptyObject(events)) {
              dataPriv.remove(elem, "handle events");
            }
          }
        },
        dispatch : function(e) {
          var i;
          var j;
          var docs;
          var matched;
          var handleObj;
          var handlerQueue;
          var event = jQuery.event.fix(e);
          /** @type {!Array} */
          var options = new Array(arguments.length);
          var handlers = (dataPriv.get(this, "events") || {})[event.type] || [];
          var special = jQuery.event.special[event.type] || {};
          options[0] = event;
          /** @type {number} */
          i = 1;
          for (; i < arguments.length; i++) {
            options[i] = arguments[i];
          }
          if (event.delegateTarget = this, !special.preDispatch || false !== special.preDispatch.call(this, event)) {
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            /** @type {number} */
            i = 0;
            for (; (matched = handlerQueue[i++]) && !event.isPropagationStopped();) {
              event.currentTarget = matched.elem;
              /** @type {number} */
              j = 0;
              for (; (handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped();) {
                if (!(event.rnamespace && !event.rnamespace.test(handleObj.namespace))) {
                  event.handleObj = handleObj;
                  event.data = handleObj.data;
                  if (void 0 !== (docs = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, options)) && false === (event.result = docs)) {
                    event.preventDefault();
                    event.stopPropagation();
                  }
                }
              }
            }
            return special.postDispatch && special.postDispatch.call(this, event), event.result;
          }
        },
        handlers : function(event, handlers) {
          var i;
          var handleObj;
          var name;
          var matches;
          var __mojoServiceRegistry;
          /** @type {!Array} */
          var handlerQueue = [];
          var delegateCount = handlers.delegateCount;
          var cur = event.target;
          if (delegateCount && cur.nodeType && !("click" === event.type && event.button >= 1)) {
            for (; cur !== this; cur = cur.parentNode || this) {
              if (1 === cur.nodeType && ("click" !== event.type || true !== cur.disabled)) {
                /** @type {!Array} */
                matches = [];
                __mojoServiceRegistry = {};
                /** @type {number} */
                i = 0;
                for (; i < delegateCount; i++) {
                  handleObj = handlers[i];
                  /** @type {string} */
                  name = handleObj.selector + " ";
                  if (void 0 === __mojoServiceRegistry[name]) {
                    __mojoServiceRegistry[name] = handleObj.needsContext ? jQuery(name, this).index(cur) > -1 : jQuery.find(name, this, null, [cur]).length;
                  }
                  if (__mojoServiceRegistry[name]) {
                    matches.push(handleObj);
                  }
                }
                if (matches.length) {
                  handlerQueue.push({
                    elem : cur,
                    handlers : matches
                  });
                }
              }
            }
          }
          return cur = this, delegateCount < handlers.length && handlerQueue.push({
            elem : cur,
            handlers : handlers.slice(delegateCount)
          }), handlerQueue;
        },
        addProp : function(name, hook) {
          Object.defineProperty(jQuery.Event.prototype, name, {
            enumerable : true,
            configurable : true,
            get : jQuery.isFunction(hook) ? function() {
              if (this.originalEvent) {
                return hook(this.originalEvent);
              }
            } : function() {
              if (this.originalEvent) {
                return this.originalEvent[name];
              }
            },
            set : function(elem) {
              Object.defineProperty(this, name, {
                enumerable : true,
                configurable : true,
                writable : true,
                value : elem
              });
            }
          });
        },
        fix : function(originalEvent) {
          return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
        },
        special : {
          load : {
            noBubble : true
          },
          focus : {
            trigger : function() {
              if (this !== safeActiveElement() && this.focus) {
                return this.focus(), false;
              }
            },
            delegateType : "focusin"
          },
          blur : {
            trigger : function() {
              if (this === safeActiveElement() && this.blur) {
                return this.blur(), false;
              }
            },
            delegateType : "focusout"
          },
          click : {
            trigger : function() {
              if ("checkbox" === this.type && this.click && callback(this, "input")) {
                return this.click(), false;
              }
            },
            _default : function(event) {
              return callback(event.target, "a");
            }
          },
          beforeunload : {
            postDispatch : function(event) {
              if (void 0 !== event.result && event.originalEvent) {
                event.originalEvent.returnValue = event.result;
              }
            }
          }
        }
      };
      /**
       * @param {!Object} e
       * @param {!Object} type
       * @param {?} cb
       * @return {undefined}
       */
      jQuery.removeEvent = function(e, type, cb) {
        if (e.removeEventListener) {
          e.removeEventListener(type, cb);
        }
      };
      /**
       * @param {!Object} src
       * @param {!Object} props
       * @return {?}
       */
      jQuery.Event = function(src, props) {
        if (!(this instanceof jQuery.Event)) {
          return new jQuery.Event(src, props);
        }
        if (src && src.type) {
          /** @type {!Object} */
          this.originalEvent = src;
          this.type = src.type;
          /** @type {function(): ?} */
          this.isDefaultPrevented = src.defaultPrevented || void 0 === src.defaultPrevented && false === src.returnValue ? returnTrue : returnFalse;
          this.target = src.target && 3 === src.target.nodeType ? src.target.parentNode : src.target;
          this.currentTarget = src.currentTarget;
          this.relatedTarget = src.relatedTarget;
        } else {
          /** @type {!Object} */
          this.type = src;
        }
        if (props) {
          jQuery.extend(this, props);
        }
        this.timeStamp = src && src.timeStamp || jQuery.now();
        /** @type {boolean} */
        this[jQuery.expando] = true;
      };
      jQuery.Event.prototype = {
        constructor : jQuery.Event,
        isDefaultPrevented : returnFalse,
        isPropagationStopped : returnFalse,
        isImmediatePropagationStopped : returnFalse,
        isSimulated : false,
        preventDefault : function() {
          var e = this.originalEvent;
          /** @type {function(): ?} */
          this.isDefaultPrevented = returnTrue;
          if (e && !this.isSimulated) {
            e.preventDefault();
          }
        },
        stopPropagation : function() {
          var e = this.originalEvent;
          /** @type {function(): ?} */
          this.isPropagationStopped = returnTrue;
          if (e && !this.isSimulated) {
            e.stopPropagation();
          }
        },
        stopImmediatePropagation : function() {
          var e = this.originalEvent;
          /** @type {function(): ?} */
          this.isImmediatePropagationStopped = returnTrue;
          if (e && !this.isSimulated) {
            e.stopImmediatePropagation();
          }
          this.stopPropagation();
        }
      };
      jQuery.each({
        altKey : true,
        bubbles : true,
        cancelable : true,
        changedTouches : true,
        ctrlKey : true,
        detail : true,
        eventPhase : true,
        metaKey : true,
        pageX : true,
        pageY : true,
        shiftKey : true,
        view : true,
        char : true,
        charCode : true,
        key : true,
        keyCode : true,
        button : true,
        buttons : true,
        clientX : true,
        clientY : true,
        offsetX : true,
        offsetY : true,
        pointerId : true,
        pointerType : true,
        screenX : true,
        screenY : true,
        targetTouches : true,
        toElement : true,
        touches : true,
        which : function(e) {
          var button = e.button;
          return null == e.which && receivedErrorEvents.test(e.type) ? null != e.charCode ? e.charCode : e.keyCode : !e.which && void 0 !== button && receivedOpenEvents.test(e.type) ? 1 & button ? 1 : 2 & button ? 3 : 4 & button ? 2 : 0 : e.which;
        }
      }, jQuery.event.addProp);
      jQuery.each({
        mouseenter : "mouseover",
        mouseleave : "mouseout",
        pointerenter : "pointerover",
        pointerleave : "pointerout"
      }, function(orig, fix) {
        jQuery.event.special[orig] = {
          delegateType : fix,
          bindType : fix,
          handle : function(event) {
            var _ref12;
            var target = this;
            var body = event.relatedTarget;
            var handleObj = event.handleObj;
            return body && (body === target || jQuery.contains(target, body)) || (event.type = handleObj.origType, _ref12 = handleObj.handler.apply(this, arguments), event.type = fix), _ref12;
          }
        };
      });
      jQuery.fn.extend({
        on : function(type, selector, data, callback) {
          return bind(this, type, selector, data, callback);
        },
        one : function(event, name, cb, delay) {
          return bind(this, event, name, cb, delay, 1);
        },
        off : function(types, callback, fn) {
          var handleObj;
          var type;
          if (types && types.preventDefault && types.handleObj) {
            return handleObj = types.handleObj, jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler), this;
          }
          if ("object" == typeof types) {
            for (type in types) {
              this.off(type, callback, types[type]);
            }
            return this;
          }
          return false !== callback && "function" != typeof callback || (fn = callback, callback = void 0), false === fn && (fn = returnFalse), this.each(function() {
            jQuery.event.remove(this, types, fn, callback);
          });
        }
      });
      /** @type {!RegExp} */
      var regPlaceholder = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi;
      /** @type {!RegExp} */
      var reValidName = /<script|<style|<link/i;
      /** @type {!RegExp} */
      var reKeyword = /checked\s*(?:[^=]|=\s*.checked.)/i;
      /** @type {!RegExp} */
      var re = /^true\/(.*)/;
      /** @type {!RegExp} */
      var codePoint = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
      jQuery.extend({
        htmlPrefilter : function(src) {
          return src.replace(regPlaceholder, "<$1></$2>");
        },
        clone : function(elem, n, array) {
          var i;
          var l;
          var srcElements;
          var destElements;
          var clone = elem.cloneNode(true);
          var inPage = jQuery.contains(elem.ownerDocument, elem);
          if (!(support.noCloneChecked || 1 !== elem.nodeType && 11 !== elem.nodeType || jQuery.isXMLDoc(elem))) {
            destElements = getAll(clone);
            srcElements = getAll(elem);
            /** @type {number} */
            i = 0;
            l = srcElements.length;
            for (; i < l; i++) {
              fixInput(srcElements[i], destElements[i]);
            }
          }
          if (n) {
            if (array) {
              srcElements = srcElements || getAll(elem);
              destElements = destElements || getAll(clone);
              /** @type {number} */
              i = 0;
              l = srcElements.length;
              for (; i < l; i++) {
                cloneCopyEvent(srcElements[i], destElements[i]);
              }
            } else {
              cloneCopyEvent(elem, clone);
            }
          }
          return destElements = getAll(clone, "script"), destElements.length > 0 && setGlobalEval(destElements, !inPage && getAll(elem, "script")), clone;
        },
        cleanData : function(elems) {
          var data;
          var elem;
          var type;
          var special = jQuery.event.special;
          /** @type {number} */
          var i = 0;
          for (; void 0 !== (elem = elems[i]); i++) {
            if (acceptData(elem)) {
              if (data = elem[dataPriv.expando]) {
                if (data.events) {
                  for (type in data.events) {
                    if (special[type]) {
                      jQuery.event.remove(elem, type);
                    } else {
                      jQuery.removeEvent(elem, type, data.handle);
                    }
                  }
                }
                elem[dataPriv.expando] = void 0;
              }
              if (elem[$.expando]) {
                elem[$.expando] = void 0;
              }
            }
          }
        }
      });
      jQuery.fn.extend({
        detach : function(context) {
          return remove(this, context, true);
        },
        remove : function(elem) {
          return remove(this, elem);
        },
        text : function(value) {
          return access(this, function(value) {
            return void 0 === value ? jQuery.text(this) : this.empty().each(function() {
              if (!(1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType)) {
                this.textContent = value;
              }
            });
          }, null, value, arguments.length);
        },
        append : function() {
          return domManip(this, arguments, function(elem) {
            if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
              manipulationTarget(this, elem).appendChild(elem);
            }
          });
        },
        prepend : function() {
          return domManip(this, arguments, function(elem) {
            if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
              var target = manipulationTarget(this, elem);
              target.insertBefore(elem, target.firstChild);
            }
          });
        },
        before : function() {
          return domManip(this, arguments, function(elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this);
            }
          });
        },
        after : function() {
          return domManip(this, arguments, function(elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this.nextSibling);
            }
          });
        },
        empty : function() {
          var node;
          /** @type {number} */
          var PARENT_NODE = 0;
          for (; null != (node = this[PARENT_NODE]); PARENT_NODE++) {
            if (1 === node.nodeType) {
              jQuery.cleanData(getAll(node, false));
              /** @type {string} */
              node.textContent = "";
            }
          }
          return this;
        },
        clone : function(value, options) {
          return value = null != value && value, options = null == options ? value : options, this.map(function() {
            return jQuery.clone(this, value, options);
          });
        },
        html : function(value) {
          return access(this, function(value) {
            var elem = this[0] || {};
            /** @type {number} */
            var thatpos = 0;
            var i = this.length;
            if (void 0 === value && 1 === elem.nodeType) {
              return elem.innerHTML;
            }
            if ("string" == typeof value && !reValidName.test(value) && !wrapMap[(fullLinkRegex.exec(value) || ["", ""])[1].toLowerCase()]) {
              value = jQuery.htmlPrefilter(value);
              try {
                for (; thatpos < i; thatpos++) {
                  elem = this[thatpos] || {};
                  if (1 === elem.nodeType) {
                    jQuery.cleanData(getAll(elem, false));
                    /** @type {number} */
                    elem.innerHTML = value;
                  }
                }
                /** @type {number} */
                elem = 0;
              } catch (t) {
              }
            }
            if (elem) {
              this.empty().append(value);
            }
          }, null, value, arguments.length);
        },
        replaceWith : function() {
          /** @type {!Array} */
          var ignored = [];
          return domManip(this, arguments, function(e) {
            var div = this.parentNode;
            if (jQuery.inArray(this, ignored) < 0) {
              jQuery.cleanData(getAll(this));
              if (div) {
                div.replaceChild(e, this);
              }
            }
          }, ignored);
        }
      });
      jQuery.each({
        appendTo : "append",
        prependTo : "prepend",
        insertBefore : "before",
        insertAfter : "after",
        replaceAll : "replaceWith"
      }, function(original, name) {
        /**
         * @param {undefined} path
         * @return {?}
         */
        jQuery.fn[original] = function(path) {
          var param;
          /** @type {!Array} */
          var ret = [];
          var a = jQuery(path);
          /** @type {number} */
          var last = a.length - 1;
          /** @type {number} */
          var i = 0;
          for (; i <= last; i++) {
            param = i === last ? this : this.clone(true);
            jQuery(a[i])[name](param);
            push.apply(ret, param.get());
          }
          return this.pushStack(ret);
        };
      });
      /** @type {!RegExp} */
      var namespaces = /^margin/;
      /** @type {!RegExp} */
      var exactRegExp = new RegExp("^(" + FSSource + ")(?!px)[a-z%]+$", "i");
      /**
       * @param {!Object} elem
       * @return {?}
       */
      var getStyles = function(elem) {
        var win = elem.ownerDocument.defaultView;
        return win && win.opener || (win = window), win.getComputedStyle(elem);
      };
      !function() {
        /**
         * @return {undefined}
         */
        function computeStyleTests() {
          if (div) {
            /** @type {string} */
            div.style.cssText = "box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%";
            /** @type {string} */
            div.innerHTML = "";
            node.appendChild(s);
            var cs = window.getComputedStyle(div);
            /** @type {boolean} */
            e = "1%" !== cs.top;
            /** @type {boolean} */
            r = "2px" === cs.marginLeft;
            /** @type {boolean} */
            i = "4px" === cs.width;
            /** @type {string} */
            div.style.marginRight = "50%";
            /** @type {boolean} */
            o = "4px" === cs.marginRight;
            node.removeChild(s);
            /** @type {null} */
            div = null;
          }
        }
        var e;
        var i;
        var o;
        var r;
        var s = document.createElement("div");
        var div = document.createElement("div");
        if (div.style) {
          /** @type {string} */
          div.style.backgroundClip = "content-box";
          /** @type {string} */
          div.cloneNode(true).style.backgroundClip = "";
          /** @type {boolean} */
          support.clearCloneStyle = "content-box" === div.style.backgroundClip;
          /** @type {string} */
          s.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute";
          s.appendChild(div);
          jQuery.extend(support, {
            pixelPosition : function() {
              return computeStyleTests(), e;
            },
            boxSizingReliable : function() {
              return computeStyleTests(), i;
            },
            pixelMarginRight : function() {
              return computeStyleTests(), o;
            },
            reliableMarginLeft : function() {
              return computeStyleTests(), r;
            }
          });
        }
      }();
      /** @type {!RegExp} */
      var rdisplayswap = /^(none|table(?!-c[ea]).+)/;
      /** @type {!RegExp} */
      var ngTranslationProvider = /^--/;
      var cssShow = {
        position : "absolute",
        visibility : "hidden",
        display : "block"
      };
      var cssNormalTransform = {
        letterSpacing : "0",
        fontWeight : "400"
      };
      /** @type {!Array} */
      var prefixes = ["Webkit", "Moz", "ms"];
      var style = document.createElement("div").style;
      jQuery.extend({
        cssHooks : {
          opacity : {
            get : function(elem, value) {
              if (value) {
                var to = curCSS(elem, "opacity");
                return "" === to ? "1" : to;
              }
            }
          }
        },
        cssNumber : {
          animationIterationCount : true,
          columnCount : true,
          fillOpacity : true,
          flexGrow : true,
          flexShrink : true,
          fontWeight : true,
          lineHeight : true,
          opacity : true,
          order : true,
          orphans : true,
          widows : true,
          zIndex : true,
          zoom : true
        },
        cssProps : {
          float : "cssFloat"
        },
        style : function(elem, name, value, extra) {
          if (elem && 3 !== elem.nodeType && 8 !== elem.nodeType && elem.style) {
            var ret;
            var type;
            var hooks;
            var origName = jQuery.camelCase(name);
            /** @type {boolean} */
            var versionByName = ngTranslationProvider.test(name);
            var style = elem.style;
            if (versionByName || (name = vendorPropName(origName)), hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName], void 0 === value) {
              return hooks && "get" in hooks && void 0 !== (ret = hooks.get(elem, false, extra)) ? ret : style[name];
            }
            /** @type {string} */
            type = typeof value;
            if ("string" === type && (ret = regex.exec(value)) && ret[1]) {
              value = adjustCSS(elem, name, ret);
              /** @type {string} */
              type = "number";
            }
            if (null != value && value === value) {
              if ("number" === type) {
                /** @type {string} */
                value = value + (ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px"));
              }
              if (!(support.clearCloneStyle || "" !== value || 0 !== name.indexOf("background"))) {
                /** @type {string} */
                style[name] = "inherit";
              }
              if (!(hooks && "set" in hooks && void 0 === (value = hooks.set(elem, value, extra)))) {
                if (versionByName) {
                  style.setProperty(name, value);
                } else {
                  /** @type {string} */
                  style[name] = value;
                }
              }
            }
          }
        },
        css : function(key, name, value, styles) {
          var val;
          var length;
          var hooks;
          var origName = jQuery.camelCase(name);
          return ngTranslationProvider.test(name) || (name = vendorPropName(origName)), hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName], hooks && "get" in hooks && (val = hooks.get(key, true, value)), void 0 === val && (val = curCSS(key, name, styles)), "normal" === val && name in cssNormalTransform && (val = cssNormalTransform[name]), "" === value || value ? (length = parseFloat(val), true === value || isFinite(length) ? length || 0 : val) : val;
        }
      });
      jQuery.each(["height", "width"], function(canCreateDiscussions, name) {
        jQuery.cssHooks[name] = {
          get : function(elem, value, view) {
            if (value) {
              return !rdisplayswap.test(jQuery.css(elem, "display")) || elem.getClientRects().length && elem.getBoundingClientRect().width ? getWidthOrHeight(elem, name, view) : swap(elem, cssShow, function() {
                return getWidthOrHeight(elem, name, view);
              });
            }
          },
          set : function(elem, value, extra) {
            var matches;
            var styles = extra && getStyles(elem);
            var subtract = extra && augmentWidthOrHeight(elem, name, extra, "border-box" === jQuery.css(elem, "boxSizing", false, styles), styles);
            return subtract && (matches = regex.exec(value)) && "px" !== (matches[3] || "px") && (elem.style[name] = value, value = jQuery.css(elem, name)), fn(elem, value, subtract);
          }
        };
      });
      jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function(elem, canCreateDiscussions) {
        if (canCreateDiscussions) {
          return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {
            marginLeft : 0
          }, function() {
            return elem.getBoundingClientRect().left;
          })) + "px";
        }
      });
      jQuery.each({
        margin : "",
        padding : "",
        border : "Width"
      }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
          expand : function(data) {
            /** @type {number} */
            var i = 0;
            var expanded = {};
            /** @type {!Array} */
            var stops = "string" == typeof data ? data.split(" ") : [data];
            for (; i < 4; i++) {
              expanded[prefix + cssExpand[i] + suffix] = stops[i] || stops[i - 2] || stops[0];
            }
            return expanded;
          }
        };
        if (!namespaces.test(prefix)) {
          /** @type {function(!Object, !Object, string): ?} */
          jQuery.cssHooks[prefix + suffix].set = fn;
        }
      });
      jQuery.fn.extend({
        css : function(name, value) {
          return access(this, function(elem, name, undefined) {
            var styles;
            var l;
            var map = {};
            /** @type {number} */
            var i = 0;
            if (Array.isArray(name)) {
              styles = getStyles(elem);
              l = name.length;
              for (; i < l; i++) {
                map[name[i]] = jQuery.css(elem, name[i], false, styles);
              }
              return map;
            }
            return void 0 !== undefined ? jQuery.style(elem, name, undefined) : jQuery.css(elem, name);
          }, name, value, arguments.length > 1);
        }
      });
      /** @type {function(string, (!Function|RegExp|string), (!Function|RegExp|string), !Object, !Array): ?} */
      jQuery.Tween = Tween;
      Tween.prototype = {
        constructor : Tween,
        init : function(node, options, prop, end, easing, unit) {
          /** @type {string} */
          this.elem = node;
          /** @type {!Object} */
          this.prop = prop;
          this.easing = easing || jQuery.easing._default;
          /** @type {!Object} */
          this.options = options;
          this.start = this.now = this.cur();
          /** @type {number} */
          this.end = end;
          this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur : function() {
          var hooks = Tween.propHooks[this.prop];
          return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run : function(percent) {
          var eased;
          var hooks = Tween.propHooks[this.prop];
          return this.options.duration ? this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration) : this.pos = eased = percent, this.now = (this.end - this.start) * eased + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), hooks && hooks.set ? hooks.set(this) : Tween.propHooks._default.set(this), this;
        }
      };
      Tween.prototype.init.prototype = Tween.prototype;
      Tween.propHooks = {
        _default : {
          get : function(s) {
            var node;
            return 1 !== s.elem.nodeType || null != s.elem[s.prop] && null == s.elem.style[s.prop] ? s.elem[s.prop] : (node = jQuery.css(s.elem, s.prop, ""), node && "auto" !== node ? node : 0);
          },
          set : function(tween) {
            if (jQuery.fx.step[tween.prop]) {
              jQuery.fx.step[tween.prop](tween);
            } else {
              if (1 !== tween.elem.nodeType || null == tween.elem.style[jQuery.cssProps[tween.prop]] && !jQuery.cssHooks[tween.prop]) {
                tween.elem[tween.prop] = tween.now;
              } else {
                jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
              }
            }
          }
        }
      };
      Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set : function(tween) {
          if (tween.elem.nodeType && tween.elem.parentNode) {
            tween.elem[tween.prop] = tween.now;
          }
        }
      };
      jQuery.easing = {
        linear : function(p) {
          return p;
        },
        swing : function(p) {
          return .5 - Math.cos(p * Math.PI) / 2;
        },
        _default : "swing"
      };
      /** @type {function(string, !Object, !Object, number, string, !Object): undefined} */
      jQuery.fx = Tween.prototype.init;
      jQuery.fx.step = {};
      var fxNow;
      var ye;
      /** @type {!RegExp} */
      var r_rxpIsForPath = /^(?:toggle|show|hide)$/;
      /** @type {!RegExp} */
      var rrun = /queueHooks$/;
      jQuery.Animation = jQuery.extend(Animation, {
        tweeners : {
          "*" : [function(prop, value) {
            var tween = this.createTween(prop, value);
            return adjustCSS(tween.elem, prop, regex.exec(value), tween), tween;
          }]
        },
        tweener : function(props, callback) {
          if (jQuery.isFunction(props)) {
            /** @type {!Object} */
            callback = props;
            /** @type {!Array} */
            props = ["*"];
          } else {
            props = props.match(rnotwhite);
          }
          var prop;
          /** @type {number} */
          var i = 0;
          var k = props.length;
          for (; i < k; i++) {
            prop = props[i];
            Animation.tweeners[prop] = Animation.tweeners[prop] || [];
            Animation.tweeners[prop].unshift(callback);
          }
        },
        prefilters : [defaultPrefilter],
        prefilter : function(callback, options) {
          if (options) {
            Animation.prefilters.unshift(callback);
          } else {
            Animation.prefilters.push(callback);
          }
        }
      });
      /**
       * @param {string} speed
       * @param {string} easing
       * @param {string} fn
       * @return {?}
       */
      jQuery.speed = function(speed, easing, fn) {
        var opt = speed && "object" == typeof speed ? jQuery.extend({}, speed) : {
          complete : fn || !fn && easing || jQuery.isFunction(speed) && speed,
          duration : speed,
          easing : fn && easing || easing && !jQuery.isFunction(easing) && easing
        };
        return jQuery.fx.off ? opt.duration = 0 : "number" != typeof opt.duration && (opt.duration in jQuery.fx.speeds ? opt.duration = jQuery.fx.speeds[opt.duration] : opt.duration = jQuery.fx.speeds._default), null != opt.queue && true !== opt.queue || (opt.queue = "fx"), opt.old = opt.complete, opt.complete = function() {
          if (jQuery.isFunction(opt.old)) {
            opt.old.call(this);
          }
          if (opt.queue) {
            jQuery.dequeue(this, opt.queue);
          }
        }, opt;
      };
      jQuery.fn.extend({
        fadeTo : function(speed, to, callback, context) {
          return this.filter(isHidden).css("opacity", 0).show().end().animate({
            opacity : to
          }, speed, callback, context);
        },
        animate : function(prop, speed, easing, callback) {
          var empty = jQuery.isEmptyObject(prop);
          var optall = jQuery.speed(speed, easing, callback);
          /**
           * @return {undefined}
           */
          var doAnimation = function() {
            var anim = Animation(this, jQuery.extend({}, prop), optall);
            if (empty || dataPriv.get(this, "finish")) {
              anim.stop(true);
            }
          };
          return doAnimation.finish = doAnimation, empty || false === optall.queue ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop : function(type, n, t) {
          /**
           * @param {!Object} o
           * @return {undefined}
           */
          var callback = function(o) {
            var s = o.stop;
            delete o.stop;
            s(t);
          };
          return "string" != typeof type && (t = n, n = type, type = void 0), n && false !== type && this.queue(type || "fx", []), this.each(function() {
            /** @type {boolean} */
            var cmp = true;
            /** @type {(boolean|string)} */
            var index = null != type && type + "queueHooks";
            /** @type {!Array} */
            var timers = jQuery.timers;
            var data = dataPriv.get(this);
            if (index) {
              if (data[index] && data[index].stop) {
                callback(data[index]);
              }
            } else {
              for (index in data) {
                if (data[index] && data[index].stop && rrun.test(index)) {
                  callback(data[index]);
                }
              }
            }
            /** @type {number} */
            index = timers.length;
            for (; index--;) {
              if (!(timers[index].elem !== this || null != type && timers[index].queue !== type)) {
                timers[index].anim.stop(t);
                /** @type {boolean} */
                cmp = false;
                timers.splice(index, 1);
              }
            }
            if (!(!cmp && t)) {
              jQuery.dequeue(this, type);
            }
          });
        },
        finish : function(type) {
          return false !== type && (type = type || "fx"), this.each(function() {
            var index;
            var data = dataPriv.get(this);
            var queue = data[type + "queue"];
            var hooks = data[type + "queueHooks"];
            /** @type {!Array} */
            var timers = jQuery.timers;
            var length = queue ? queue.length : 0;
            /** @type {boolean} */
            data.finish = true;
            jQuery.queue(this, type, []);
            if (hooks && hooks.stop) {
              hooks.stop.call(this, true);
            }
            /** @type {number} */
            index = timers.length;
            for (; index--;) {
              if (timers[index].elem === this && timers[index].queue === type) {
                timers[index].anim.stop(true);
                timers.splice(index, 1);
              }
            }
            /** @type {number} */
            index = 0;
            for (; index < length; index++) {
              if (queue[index] && queue[index].finish) {
                queue[index].finish.call(this);
              }
            }
            delete data.finish;
          });
        }
      });
      jQuery.each(["toggle", "show", "hide"], function(canCreateDiscussions, name) {
        var cssFn = jQuery.fn[name];
        /**
         * @param {string} x
         * @param {string} callback
         * @param {string} options
         * @return {?}
         */
        jQuery.fn[name] = function(x, callback, options) {
          return null == x || "boolean" == typeof x ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), x, callback, options);
        };
      });
      jQuery.each({
        slideDown : genFx("show"),
        slideUp : genFx("hide"),
        slideToggle : genFx("toggle"),
        fadeIn : {
          opacity : "show"
        },
        fadeOut : {
          opacity : "hide"
        },
        fadeToggle : {
          opacity : "toggle"
        }
      }, function(original, props) {
        /**
         * @param {string} speed
         * @param {string} callback
         * @param {string} options
         * @return {?}
         */
        jQuery.fn[original] = function(speed, callback, options) {
          return this.animate(props, speed, callback, options);
        };
      });
      /** @type {!Array} */
      jQuery.timers = [];
      /**
       * @return {undefined}
       */
      jQuery.fx.tick = function() {
        var maxBet;
        /** @type {number} */
        var i = 0;
        /** @type {!Array} */
        var timers = jQuery.timers;
        fxNow = jQuery.now();
        for (; i < timers.length; i++) {
          if (!((maxBet = timers[i])() || timers[i] !== maxBet)) {
            timers.splice(i--, 1);
          }
        }
        if (!timers.length) {
          jQuery.fx.stop();
        }
        fxNow = void 0;
      };
      /**
       * @param {?} url
       * @return {undefined}
       */
      jQuery.fx.timer = function(url) {
        jQuery.timers.push(url);
        jQuery.fx.start();
      };
      /** @type {number} */
      jQuery.fx.interval = 13;
      /**
       * @return {undefined}
       */
      jQuery.fx.start = function() {
        if (!ye) {
          /** @type {boolean} */
          ye = true;
          step();
        }
      };
      /**
       * @return {undefined}
       */
      jQuery.fx.stop = function() {
        /** @type {null} */
        ye = null;
      };
      jQuery.fx.speeds = {
        slow : 600,
        fast : 200,
        _default : 400
      };
      /**
       * @param {!Function} time
       * @param {!Object} type
       * @return {?}
       */
      jQuery.fn.delay = function(time, type) {
        return time = jQuery.fx ? jQuery.fx.speeds[time] || time : time, type = type || "fx", this.queue(type, function(next, i) {
          var timeout = window.setTimeout(next, time);
          /**
           * @return {undefined}
           */
          i.stop = function() {
            window.clearTimeout(timeout);
          };
        });
      };
      (function() {
        var input = document.createElement("input");
        var select = document.createElement("select");
        var opt = select.appendChild(document.createElement("option"));
        /** @type {string} */
        input.type = "checkbox";
        /** @type {boolean} */
        support.checkOn = "" !== input.value;
        support.optSelected = opt.selected;
        input = document.createElement("input");
        /** @type {string} */
        input.value = "t";
        /** @type {string} */
        input.type = "radio";
        /** @type {boolean} */
        support.radioValue = "t" === input.value;
      })();
      var boolHook;
      var attrHandle = jQuery.expr.attrHandle;
      jQuery.fn.extend({
        attr : function(name, value) {
          return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr : function(name) {
          return this.each(function() {
            jQuery.removeAttr(this, name);
          });
        }
      });
      jQuery.extend({
        attr : function(elem, name, value) {
          var message;
          var hooks;
          var type = elem.nodeType;
          if (3 !== type && 8 !== type && 2 !== type) {
            return void 0 === elem.getAttribute ? jQuery.prop(elem, name, value) : (1 === type && jQuery.isXMLDoc(elem) || (hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : void 0)), void 0 !== value ? null === value ? void jQuery.removeAttr(elem, name) : hooks && "set" in hooks && void 0 !== (message = hooks.set(elem, value, name)) ? message : (elem.setAttribute(name, value + ""), value) : hooks && "get" in hooks && null !== (message = hooks.get(elem, 
            name)) ? message : (message = jQuery.find.attr(elem, name), null == message ? void 0 : message));
          }
        },
        attrHooks : {
          type : {
            set : function(item, value) {
              if (!support.radioValue && "radio" === value && callback(item, "input")) {
                var n = item.value;
                return item.setAttribute("type", value), n && (item.value = n), value;
              }
            }
          }
        },
        removeAttr : function(name, value) {
          var match;
          /** @type {number} */
          var curr = 0;
          var matches = value && value.match(rnotwhite);
          if (matches && 1 === name.nodeType) {
            for (; match = matches[curr++];) {
              name.removeAttribute(match);
            }
          }
        }
      });
      boolHook = {
        set : function(elem, value, name) {
          return false === value ? jQuery.removeAttr(elem, name) : elem.setAttribute(name, name), name;
        }
      };
      jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(canCreateDiscussions, name) {
        var n = attrHandle[name] || jQuery.find.attr;
        /**
         * @param {undefined} window
         * @param {string} status
         * @param {number} s
         * @return {?}
         */
        attrHandle[name] = function(window, status, s) {
          var ret;
          var handle;
          var lowercaseName = status.toLowerCase();
          return s || (handle = attrHandle[lowercaseName], attrHandle[lowercaseName] = ret, ret = null != n(window, status, s) ? lowercaseName : null, attrHandle[lowercaseName] = handle), ret;
        };
      });
      /** @type {!RegExp} */
      var k_r_success_contrls = /^(?:input|select|textarea|button)$/i;
      /** @type {!RegExp} */
      var submittable = /^(?:a|area)$/i;
      jQuery.fn.extend({
        prop : function(name, value) {
          return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp : function(name) {
          return this.each(function() {
            delete this[jQuery.propFix[name] || name];
          });
        }
      });
      jQuery.extend({
        prop : function(elem, name, value) {
          var ret;
          var hooks;
          var type = elem.nodeType;
          if (3 !== type && 8 !== type && 2 !== type) {
            return 1 === type && jQuery.isXMLDoc(elem) || (name = jQuery.propFix[name] || name, hooks = jQuery.propHooks[name]), void 0 !== value ? hooks && "set" in hooks && void 0 !== (ret = hooks.set(elem, value, name)) ? ret : elem[name] = value : hooks && "get" in hooks && null !== (ret = hooks.get(elem, name)) ? ret : elem[name];
          }
        },
        propHooks : {
          tabIndex : {
            get : function(element) {
              var idx = jQuery.find.attr(element, "tabindex");
              return idx ? parseInt(idx, 10) : k_r_success_contrls.test(element.nodeName) || submittable.test(element.nodeName) && element.href ? 0 : -1;
            }
          }
        },
        propFix : {
          for : "htmlFor",
          class : "className"
        }
      });
      if (!support.optSelected) {
        jQuery.propHooks.selected = {
          get : function(e) {
            var elem = e.parentNode;
            return elem && elem.parentNode && elem.parentNode.selectedIndex, null;
          },
          set : function(elem) {
            var parent = elem.parentNode;
            if (parent) {
              parent.selectedIndex;
              if (parent.parentNode) {
                parent.parentNode.selectedIndex;
              }
            }
          }
        };
      }
      jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function() {
        jQuery.propFix[this.toLowerCase()] = this;
      });
      jQuery.fn.extend({
        addClass : function(name) {
          var args;
          var elem;
          var e;
          var i;
          var successCB;
          var argIndex;
          var y;
          /** @type {number} */
          var l = 0;
          if (jQuery.isFunction(name)) {
            return this.each(function(i) {
              jQuery(this).addClass(name.call(this, i, getClass(this)));
            });
          }
          if ("string" == typeof name && name) {
            /** @type {!Array} */
            args = name.match(rnotwhite) || [];
            for (; elem = this[l++];) {
              if (i = getClass(elem), e = 1 === elem.nodeType && " " + log(i) + " ") {
                /** @type {number} */
                argIndex = 0;
                for (; successCB = args[argIndex++];) {
                  if (e.indexOf(" " + successCB + " ") < 0) {
                    /** @type {string} */
                    e = e + (successCB + " ");
                  }
                }
                y = log(e);
                if (i !== y) {
                  elem.setAttribute("class", y);
                }
              }
            }
          }
          return this;
        },
        removeClass : function(name) {
          var zeroSizeMaxes;
          var elem;
          var e;
          var i;
          var zeroSizeMax;
          var callbackCount;
          var y;
          /** @type {number} */
          var l = 0;
          if (jQuery.isFunction(name)) {
            return this.each(function(i) {
              jQuery(this).removeClass(name.call(this, i, getClass(this)));
            });
          }
          if (!arguments.length) {
            return this.attr("class", "");
          }
          if ("string" == typeof name && name) {
            /** @type {!Array} */
            zeroSizeMaxes = name.match(rnotwhite) || [];
            for (; elem = this[l++];) {
              if (i = getClass(elem), e = 1 === elem.nodeType && " " + log(i) + " ") {
                /** @type {number} */
                callbackCount = 0;
                for (; zeroSizeMax = zeroSizeMaxes[callbackCount++];) {
                  for (; e.indexOf(" " + zeroSizeMax + " ") > -1;) {
                    /** @type {string} */
                    e = e.replace(" " + zeroSizeMax + " ", " ");
                  }
                }
                y = log(e);
                if (i !== y) {
                  elem.setAttribute("class", y);
                }
              }
            }
          }
          return this;
        },
        toggleClass : function(value, stateVal) {
          /** @type {string} */
          var undefined = typeof value;
          return "boolean" == typeof stateVal && "string" === undefined ? stateVal ? this.addClass(value) : this.removeClass(value) : jQuery.isFunction(value) ? this.each(function(i) {
            jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
          }) : this.each(function() {
            var className;
            var i;
            var $body;
            var classNames;
            if ("string" === undefined) {
              /** @type {number} */
              i = 0;
              $body = jQuery(this);
              classNames = value.match(rnotwhite) || [];
              for (; className = classNames[i++];) {
                if ($body.hasClass(className)) {
                  $body.removeClass(className);
                } else {
                  $body.addClass(className);
                }
              }
            } else {
              if (!(void 0 !== value && "boolean" !== undefined)) {
                className = getClass(this);
                if (className) {
                  dataPriv.set(this, "__className__", className);
                }
                if (this.setAttribute) {
                  this.setAttribute("class", className || false === value ? "" : dataPriv.get(this, "__className__") || "");
                }
              }
            }
          });
        },
        hasClass : function(name) {
          var exactLanguageCode;
          var value;
          /** @type {number} */
          var i = 0;
          /** @type {string} */
          exactLanguageCode = " " + name + " ";
          for (; value = this[i++];) {
            if (1 === value.nodeType && (" " + log(getClass(value)) + " ").indexOf(exactLanguageCode) > -1) {
              return true;
            }
          }
          return false;
        }
      });
      /** @type {!RegExp} */
      var n = /\r/g;
      jQuery.fn.extend({
        val : function(val) {
          var hooks;
          var value;
          var m;
          var elem = this[0];
          {
            if (arguments.length) {
              return m = jQuery.isFunction(val), this.each(function(error2) {
                var value;
                if (1 === this.nodeType) {
                  value = m ? val.call(this, error2, jQuery(this).val()) : val;
                  if (null == value) {
                    /** @type {string} */
                    value = "";
                  } else {
                    if ("number" == typeof value) {
                      /** @type {string} */
                      value = value + "";
                    } else {
                      if (Array.isArray(value)) {
                        value = jQuery.map(value, function(value) {
                          return null == value ? "" : value + "";
                        });
                      }
                    }
                  }
                  if (!((hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]) && "set" in hooks && void 0 !== hooks.set(this, value, "value"))) {
                    this.value = value;
                  }
                }
              });
            }
            if (elem) {
              return (hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()]) && "get" in hooks && void 0 !== (value = hooks.get(elem, "value")) ? value : (value = elem.value, "string" == typeof value ? value.replace(n, "") : null == value ? "" : value);
            }
          }
        }
      });
      jQuery.extend({
        valHooks : {
          option : {
            get : function(key) {
              var isInvalid = jQuery.find.attr(key, "value");
              return null != isInvalid ? isInvalid : log(jQuery.text(key));
            }
          },
          select : {
            get : function(elem) {
              var value;
              var option;
              var i;
              var options = elem.options;
              var index = elem.selectedIndex;
              /** @type {boolean} */
              var one = "select-one" === elem.type;
              /** @type {(Array|null)} */
              var values = one ? null : [];
              var max = one ? index + 1 : options.length;
              i = index < 0 ? max : one ? index : 0;
              for (; i < max; i++) {
                if (option = options[i], (option.selected || i === index) && !option.disabled && (!option.parentNode.disabled || !callback(option.parentNode, "optgroup"))) {
                  if (value = jQuery(option).val(), one) {
                    return value;
                  }
                  values.push(value);
                }
              }
              return values;
            },
            set : function(elem, value) {
              var outputFn;
              var option;
              var options = elem.options;
              var result = jQuery.makeArray(value);
              var i = options.length;
              for (; i--;) {
                option = options[i];
                if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), result) > -1) {
                  /** @type {boolean} */
                  outputFn = true;
                }
              }
              return outputFn || (elem.selectedIndex = -1), result;
            }
          }
        }
      });
      jQuery.each(["radio", "checkbox"], function() {
        jQuery.valHooks[this] = {
          set : function(elem, value) {
            if (Array.isArray(value)) {
              return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
            }
          }
        };
        if (!support.checkOn) {
          /**
           * @param {!Object} elem
           * @return {?}
           */
          jQuery.valHooks[this].get = function(elem) {
            return null === elem.getAttribute("value") ? "on" : elem.value;
          };
        }
      });
      /** @type {!RegExp} */
      var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;
      jQuery.extend(jQuery.event, {
        trigger : function(event, value, elem, onlyHandlers) {
          var i;
          var cur;
          var tmp;
          var bubbleType;
          var ontype;
          var next;
          var special;
          /** @type {!Array} */
          var eventPath = [elem || document];
          var type = hasOwn.call(event, "type") ? event.type : event;
          var h = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
          if (cur = tmp = elem = elem || document, 3 !== elem.nodeType && 8 !== elem.nodeType && !rfocusMorph.test(type + jQuery.event.triggered) && (type.indexOf(".") > -1 && (h = type.split("."), type = h.shift(), h.sort()), ontype = type.indexOf(":") < 0 && "on" + type, event = event[jQuery.expando] ? event : new jQuery.Event(type, "object" == typeof event && event), event.isTrigger = onlyHandlers ? 2 : 3, event.namespace = h.join("."), event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + 
          h.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, event.result = void 0, event.target || (event.target = elem), value = null == value ? [event] : jQuery.makeArray(value, [event]), special = jQuery.event.special[type] || {}, onlyHandlers || !special.trigger || false !== special.trigger.apply(elem, value))) {
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
              bubbleType = special.delegateType || type;
              if (!rfocusMorph.test(bubbleType + type)) {
                cur = cur.parentNode;
              }
              for (; cur; cur = cur.parentNode) {
                eventPath.push(cur);
                tmp = cur;
              }
              if (tmp === (elem.ownerDocument || document)) {
                eventPath.push(tmp.defaultView || tmp.parentWindow || window);
              }
            }
            /** @type {number} */
            i = 0;
            for (; (cur = eventPath[i++]) && !event.isPropagationStopped();) {
              event.type = i > 1 ? bubbleType : special.bindType || type;
              next = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");
              if (next) {
                next.apply(cur, value);
              }
              if ((next = ontype && cur[ontype]) && next.apply && acceptData(cur)) {
                event.result = next.apply(cur, value);
                if (false === event.result) {
                  event.preventDefault();
                }
              }
            }
            return event.type = type, onlyHandlers || event.isDefaultPrevented() || special._default && false !== special._default.apply(eventPath.pop(), value) || !acceptData(elem) || ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem) && (tmp = elem[ontype], tmp && (elem[ontype] = null), jQuery.event.triggered = type, elem[type](), jQuery.event.triggered = void 0, tmp && (elem[ontype] = tmp)), event.result;
          }
        },
        simulate : function(type, elem, target) {
          var i = jQuery.extend(new jQuery.Event, target, {
            type : type,
            isSimulated : true
          });
          jQuery.event.trigger(i, null, elem);
        }
      });
      jQuery.fn.extend({
        trigger : function(type, data) {
          return this.each(function() {
            jQuery.event.trigger(type, data, this);
          });
        },
        triggerHandler : function(type, data) {
          var parent = this[0];
          if (parent) {
            return jQuery.event.trigger(type, data, parent, true);
          }
        }
      });
      jQuery.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function(canCreateDiscussions, type) {
        /**
         * @param {!Function} data
         * @param {!Object} callback
         * @return {?}
         */
        jQuery.fn[type] = function(data, callback) {
          return arguments.length > 0 ? this.on(type, null, data, callback) : this.trigger(type);
        };
      });
      jQuery.fn.extend({
        hover : function(fnOver, fnOut) {
          return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
      });
      /** @type {boolean} */
      support.focusin = "onfocusin" in window;
      if (!support.focusin) {
        jQuery.each({
          focus : "focusin",
          blur : "focusout"
        }, function(orig, fix) {
          /**
           * @param {(Object|string)} event
           * @return {undefined}
           */
          var handler = function(event) {
            jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
          };
          jQuery.event.special[fix] = {
            setup : function() {
              var doc = this.ownerDocument || this;
              var attaches = dataPriv.access(doc, fix);
              if (!attaches) {
                doc.addEventListener(orig, handler, true);
              }
              dataPriv.access(doc, fix, (attaches || 0) + 1);
            },
            teardown : function() {
              var doc = this.ownerDocument || this;
              /** @type {number} */
              var data = dataPriv.access(doc, fix) - 1;
              if (data) {
                dataPriv.access(doc, fix, data);
              } else {
                doc.removeEventListener(orig, handler, true);
                dataPriv.remove(doc, fix);
              }
            }
          };
        });
      }
      var location = window.location;
      var widgetUniqueIDIndex = jQuery.now();
      /** @type {!RegExp} */
      var rquery = /\?/;
      /**
       * @param {string} data
       * @return {?}
       */
      jQuery.parseXML = function(data) {
        var xml;
        if (!data || "string" != typeof data) {
          return null;
        }
        try {
          xml = (new window.DOMParser).parseFromString(data, "text/xml");
        } catch (t) {
          xml = void 0;
        }
        return xml && !xml.getElementsByTagName("parsererror").length || jQuery.error("Invalid XML: " + data), xml;
      };
      /** @type {!RegExp} */
      var regCls = /\[\]$/;
      /** @type {!RegExp} */
      var reVowels = /\r?\n/g;
      /** @type {!RegExp} */
      var reHasHexPrefix = /^(?:submit|button|image|reset|file)$/i;
      /** @type {!RegExp} */
      var rsubmittable = /^(?:input|select|textarea|keygen)/i;
      /**
       * @param {?} a
       * @param {string} n
       * @return {?}
       */
      jQuery.param = function(a, n) {
        var i;
        /** @type {!Array} */
        var displayUsedBy = [];
        /**
         * @param {?} file
         * @param {string} val
         * @return {undefined}
         */
        var add = function(file, val) {
          var value = jQuery.isFunction(val) ? val() : val;
          /** @type {string} */
          displayUsedBy[displayUsedBy.length] = encodeURIComponent(file) + "=" + encodeURIComponent(null == value ? "" : value);
        };
        if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
          jQuery.each(a, function() {
            add(this.name, this.value);
          });
        } else {
          for (i in a) {
            format(i, a[i], n, add);
          }
        }
        return displayUsedBy.join("&");
      };
      jQuery.fn.extend({
        serialize : function() {
          return jQuery.param(this.serializeArray());
        },
        serializeArray : function() {
          return this.map(function() {
            var elements = jQuery.prop(this, "elements");
            return elements ? jQuery.makeArray(elements) : this;
          }).filter(function() {
            var string = this.type;
            return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !reHasHexPrefix.test(string) && (this.checked || !reg.test(string));
          }).map(function(canCreateDiscussions, ctlParams) {
            var val = jQuery(this).val();
            return null == val ? null : Array.isArray(val) ? jQuery.map(val, function(val) {
              return {
                name : ctlParams.name,
                value : val.replace(reVowels, "\r\n")
              };
            }) : {
              name : ctlParams.name,
              value : val.replace(reVowels, "\r\n")
            };
          }).get();
        }
      });
      /** @type {!RegExp} */
      var jsre = /%20/g;
      /** @type {!RegExp} */
      var rhash = /#.*$/;
      /** @type {!RegExp} */
      var rts = /([?&])_=[^&]*/;
      /** @type {!RegExp} */
      var rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm;
      /** @type {!RegExp} */
      var rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/;
      /** @type {!RegExp} */
      var loader = /^(?:GET|HEAD)$/;
      /** @type {!RegExp} */
      var rprotocol = /^\/\//;
      var prefilters = {};
      var transports = {};
      /** @type {string} */
      var _e = "*/".concat("*");
      var originAnchor = document.createElement("a");
      originAnchor.href = location.href;
      jQuery.extend({
        active : 0,
        lastModified : {},
        etag : {},
        ajaxSettings : {
          url : location.href,
          type : "GET",
          isLocal : rlocalProtocol.test(location.protocol),
          global : true,
          processData : true,
          async : true,
          contentType : "application/x-www-form-urlencoded; charset=UTF-8",
          accepts : {
            "*" : _e,
            text : "text/plain",
            html : "text/html",
            xml : "application/xml, text/xml",
            json : "application/json, text/javascript"
          },
          contents : {
            xml : /\bxml\b/,
            html : /\bhtml/,
            json : /\bjson\b/
          },
          responseFields : {
            xml : "responseXML",
            text : "responseText",
            json : "responseJSON"
          },
          converters : {
            "* text" : String,
            "text html" : true,
            "text json" : JSON.parse,
            "text xml" : jQuery.parseXML
          },
          flatOptions : {
            url : true,
            context : true
          }
        },
        ajaxSetup : function(target, settings) {
          return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter : addToPrefiltersOrTransports(prefilters),
        ajaxTransport : addToPrefiltersOrTransports(transports),
        ajax : function(url, options) {
          /**
           * @param {number} status
           * @param {!Object} nativeStatusText
           * @param {!Array} responses
           * @param {!Object} headers
           * @return {undefined}
           */
          function done(status, nativeStatusText, responses, headers) {
            var isSuccess;
            var success;
            var error;
            var response;
            var modified;
            /** @type {!Object} */
            var statusText = nativeStatusText;
            if (!completed) {
              /** @type {boolean} */
              completed = true;
              if (showAboveTimeout) {
                window.clearTimeout(showAboveTimeout);
              }
              transport = void 0;
              responseHeadersString = headers || "";
              /** @type {number} */
              jqXHR.readyState = status > 0 ? 4 : 0;
              /** @type {boolean} */
              isSuccess = status >= 200 && status < 300 || 304 === status;
              if (responses) {
                response = ajaxHandleResponses(s, jqXHR, responses);
              }
              response = ajaxConvert(s, response, jqXHR, isSuccess);
              if (isSuccess) {
                if (s.ifModified) {
                  modified = jqXHR.getResponseHeader("Last-Modified");
                  if (modified) {
                    jQuery.lastModified[cacheURL] = modified;
                  }
                  if (modified = jqXHR.getResponseHeader("etag")) {
                    jQuery.etag[cacheURL] = modified;
                  }
                }
                if (204 === status || "HEAD" === s.type) {
                  /** @type {string} */
                  statusText = "nocontent";
                } else {
                  if (304 === status) {
                    /** @type {string} */
                    statusText = "notmodified";
                  } else {
                    statusText = response.state;
                    success = response.data;
                    error = response.error;
                    /** @type {boolean} */
                    isSuccess = !error;
                  }
                }
              } else {
                error = statusText;
                if (!(!status && statusText)) {
                  /** @type {string} */
                  statusText = "error";
                  if (status < 0) {
                    /** @type {number} */
                    status = 0;
                  }
                }
              }
              /** @type {number} */
              jqXHR.status = status;
              /** @type {string} */
              jqXHR.statusText = (nativeStatusText || statusText) + "";
              if (isSuccess) {
                deferred.resolveWith(obj, [success, statusText, jqXHR]);
              } else {
                deferred.rejectWith(obj, [jqXHR, statusText, error]);
              }
              jqXHR.statusCode(statusCode);
              statusCode = void 0;
              if (l) {
                globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
              }
              completeDeferred.fireWith(obj, [jqXHR, statusText]);
              if (l) {
                globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
                if (!--jQuery.active) {
                  jQuery.event.trigger("ajaxStop");
                }
              }
            }
          }
          if ("object" == typeof url) {
            /** @type {!Object} */
            options = url;
            url = void 0;
          }
          options = options || {};
          var transport;
          var cacheURL;
          var responseHeadersString;
          var x;
          var showAboveTimeout;
          var urlAnchor;
          var completed;
          var l;
          var i;
          var uncached;
          var s = jQuery.ajaxSetup({}, options);
          var obj = s.context || s;
          var globalEventContext = s.context && (obj.nodeType || obj.jquery) ? jQuery(obj) : jQuery.event;
          var deferred = jQuery.Deferred();
          var completeDeferred = jQuery.Callbacks("once memory");
          var statusCode = s.statusCode || {};
          var data = {};
          var requestHeadersNames = {};
          /** @type {string} */
          var status = "canceled";
          var jqXHR = {
            readyState : 0,
            getResponseHeader : function(header) {
              var a;
              if (completed) {
                if (!x) {
                  x = {};
                  for (; a = rheaders.exec(responseHeadersString);) {
                    /** @type {string} */
                    x[a[1].toLowerCase()] = a[2];
                  }
                }
                a = x[header.toLowerCase()];
              }
              return null == a ? null : a;
            },
            getAllResponseHeaders : function() {
              return completed ? responseHeadersString : null;
            },
            setRequestHeader : function(name, value) {
              return null == completed && (name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name, data[name] = value), this;
            },
            overrideMimeType : function(type) {
              return null == completed && (s.mimeType = type), this;
            },
            statusCode : function(map) {
              var tmp;
              if (map) {
                if (completed) {
                  jqXHR.always(map[jqXHR.status]);
                } else {
                  for (tmp in map) {
                    /** @type {!Array} */
                    statusCode[tmp] = [statusCode[tmp], map[tmp]];
                  }
                }
              }
              return this;
            },
            abort : function(type) {
              var statusText = type || status;
              return transport && transport.abort(statusText), done(0, statusText), this;
            }
          };
          if (deferred.promise(jqXHR), s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//"), s.type = options.method || options.type || s.method || s.type, s.dataTypes = (s.dataType || "*").toLowerCase().match(rnotwhite) || [""], null == s.crossDomain) {
            urlAnchor = document.createElement("a");
            try {
              /** @type {string} */
              urlAnchor.href = s.url;
              /** @type {string} */
              urlAnchor.href = urlAnchor.href;
              /** @type {boolean} */
              s.crossDomain = originAnchor.protocol + "//" + originAnchor.host != urlAnchor.protocol + "//" + urlAnchor.host;
            } catch (t) {
              /** @type {boolean} */
              s.crossDomain = true;
            }
          }
          if (s.data && s.processData && "string" != typeof s.data && (s.data = jQuery.param(s.data, s.traditional)), inspectPrefiltersOrTransports(prefilters, s, options, jqXHR), completed) {
            return jqXHR;
          }
          l = jQuery.event && s.global;
          if (l && 0 == jQuery.active++) {
            jQuery.event.trigger("ajaxStart");
          }
          s.type = s.type.toUpperCase();
          /** @type {boolean} */
          s.hasContent = !loader.test(s.type);
          /** @type {string} */
          cacheURL = s.url.replace(rhash, "");
          if (s.hasContent) {
            if (s.data && s.processData && 0 === (s.contentType || "").indexOf("application/x-www-form-urlencoded")) {
              s.data = s.data.replace(jsre, "+");
            }
          } else {
            /** @type {string} */
            uncached = s.url.slice(cacheURL.length);
            if (s.data) {
              /** @type {string} */
              cacheURL = cacheURL + ((rquery.test(cacheURL) ? "&" : "?") + s.data);
              delete s.data;
            }
            if (false === s.cache) {
              /** @type {string} */
              cacheURL = cacheURL.replace(rts, "$1");
              /** @type {string} */
              uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + widgetUniqueIDIndex++ + uncached;
            }
            /** @type {string} */
            s.url = cacheURL + uncached;
          }
          if (s.ifModified) {
            if (jQuery.lastModified[cacheURL]) {
              jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
            }
            if (jQuery.etag[cacheURL]) {
              jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
            }
          }
          if (s.data && s.hasContent && false !== s.contentType || options.contentType) {
            jqXHR.setRequestHeader("Content-Type", s.contentType);
          }
          jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + ("*" !== s.dataTypes[0] ? ", " + _e + "; q=0.01" : "") : s.accepts["*"]);
          for (i in s.headers) {
            jqXHR.setRequestHeader(i, s.headers[i]);
          }
          if (s.beforeSend && (false === s.beforeSend.call(obj, jqXHR, s) || completed)) {
            return jqXHR.abort();
          }
          if (status = "abort", completeDeferred.add(s.complete), jqXHR.done(s.success), jqXHR.fail(s.error), transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR)) {
            if (jqXHR.readyState = 1, l && globalEventContext.trigger("ajaxSend", [jqXHR, s]), completed) {
              return jqXHR;
            }
            if (s.async && s.timeout > 0) {
              showAboveTimeout = window.setTimeout(function() {
                jqXHR.abort("timeout");
              }, s.timeout);
            }
            try {
              /** @type {boolean} */
              completed = false;
              transport.send(data, done);
            } catch (success) {
              if (completed) {
                throw success;
              }
              done(-1, success);
            }
          } else {
            done(-1, "No Transport");
          }
          return jqXHR;
        },
        getJSON : function(token, callback, data) {
          return jQuery.get(token, callback, data, "json");
        },
        getScript : function(name, callback) {
          return jQuery.get(name, void 0, callback, "script");
        }
      });
      jQuery.each(["get", "post"], function(canCreateDiscussions, method) {
        /**
         * @param {!Object} url
         * @param {!Object} v
         * @param {!Object} s
         * @param {!Object} o
         * @return {?}
         */
        jQuery[method] = function(url, v, s, o) {
          return jQuery.isFunction(v) && (o = o || s, s = v, v = void 0), jQuery.ajax(jQuery.extend({
            url : url,
            type : method,
            dataType : o,
            data : v,
            success : s
          }, jQuery.isPlainObject(url) && url));
        };
      });
      /**
       * @param {string} url
       * @return {?}
       */
      jQuery._evalUrl = function(url) {
        return jQuery.ajax({
          url : url,
          type : "GET",
          dataType : "script",
          cache : true,
          async : false,
          global : false,
          throws : true
        });
      };
      jQuery.fn.extend({
        wrapAll : function(html) {
          var e;
          return this[0] && (jQuery.isFunction(html) && (html = html.call(this[0])), e = jQuery(html, this[0].ownerDocument).eq(0).clone(true), this[0].parentNode && e.insertBefore(this[0]), e.map(function() {
            var elem = this;
            for (; elem.firstElementChild;) {
              elem = elem.firstElementChild;
            }
            return elem;
          }).append(this)), this;
        },
        wrapInner : function(html) {
          return jQuery.isFunction(html) ? this.each(function(i) {
            jQuery(this).wrapInner(html.call(this, i));
          }) : this.each(function() {
            var e = jQuery(this);
            var contents = e.contents();
            if (contents.length) {
              contents.wrapAll(html);
            } else {
              e.append(html);
            }
          });
        },
        wrap : function(html) {
          var isFunction = jQuery.isFunction(html);
          return this.each(function(i) {
            jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
          });
        },
        unwrap : function(data) {
          return this.parent(data).not("body").each(function() {
            jQuery(this).replaceWith(this.childNodes);
          }), this;
        }
      });
      /**
       * @param {string} name
       * @return {?}
       */
      jQuery.expr.pseudos.hidden = function(name) {
        return !jQuery.expr.pseudos.visible(name);
      };
      /**
       * @param {!Element} elem
       * @return {?}
       */
      jQuery.expr.pseudos.visible = function(elem) {
        return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
      };
      /**
       * @return {?}
       */
      jQuery.ajaxSettings.xhr = function() {
        try {
          return new window.XMLHttpRequest;
        } catch (t) {
        }
      };
      var xhrSuccessStatus = {
        0 : 200,
        1223 : 204
      };
      var xhrSupported = jQuery.ajaxSettings.xhr();
      /** @type {boolean} */
      support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
      /** @type {boolean} */
      support.ajax = xhrSupported = !!xhrSupported;
      jQuery.ajaxTransport(function(options) {
        var callback;
        var errorCallback;
        if (support.cors || xhrSupported && !options.crossDomain) {
          return {
            send : function(headers, callback) {
              var name;
              var xhr = options.xhr();
              if (xhr.open(options.type, options.url, options.async, options.username, options.password), options.xhrFields) {
                for (name in options.xhrFields) {
                  xhr[name] = options.xhrFields[name];
                }
              }
              if (options.mimeType && xhr.overrideMimeType) {
                xhr.overrideMimeType(options.mimeType);
              }
              if (!(options.crossDomain || headers["X-Requested-With"])) {
                /** @type {string} */
                headers["X-Requested-With"] = "XMLHttpRequest";
              }
              for (name in headers) {
                xhr.setRequestHeader(name, headers[name]);
              }
              /**
               * @param {string} event
               * @return {?}
               */
              callback = function(event) {
                return function() {
                  if (callback) {
                    /** @type {null} */
                    callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;
                    if ("abort" === event) {
                      xhr.abort();
                    } else {
                      if ("error" === event) {
                        if ("number" != typeof xhr.status) {
                          callback(0, "error");
                        } else {
                          callback(xhr.status, xhr.statusText);
                        }
                      } else {
                        callback(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, "text" !== (xhr.responseType || "text") || "string" != typeof xhr.responseText ? {
                          binary : xhr.response
                        } : {
                          text : xhr.responseText
                        }, xhr.getAllResponseHeaders());
                      }
                    }
                  }
                };
              };
              xhr.onload = callback();
              errorCallback = xhr.onerror = callback("error");
              if (void 0 !== xhr.onabort) {
                xhr.onabort = errorCallback;
              } else {
                /**
                 * @return {undefined}
                 */
                xhr.onreadystatechange = function() {
                  if (4 === xhr.readyState) {
                    window.setTimeout(function() {
                      if (callback) {
                        errorCallback();
                      }
                    });
                  }
                };
              }
              callback = callback("abort");
              try {
                xhr.send(options.hasContent && options.data || null);
              } catch (t) {
                if (callback) {
                  throw t;
                }
              }
            },
            abort : function() {
              if (callback) {
                callback();
              }
            }
          };
        }
      });
      jQuery.ajaxPrefilter(function(options) {
        if (options.crossDomain) {
          /** @type {boolean} */
          options.contents.script = false;
        }
      });
      jQuery.ajaxSetup({
        accepts : {
          script : "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents : {
          script : /\b(?:java|ecma)script\b/
        },
        converters : {
          "text script" : function(value) {
            return jQuery.globalEval(value), value;
          }
        }
      });
      jQuery.ajaxPrefilter("script", function(settings) {
        if (void 0 === settings.cache) {
          /** @type {boolean} */
          settings.cache = false;
        }
        if (settings.crossDomain) {
          /** @type {string} */
          settings.type = "GET";
        }
      });
      jQuery.ajaxTransport("script", function(s) {
        if (s.crossDomain) {
          var fileElem;
          var callback;
          return {
            send : function(payloadBuffer, done) {
              fileElem = jQuery("<script>").prop({
                charset : s.scriptCharset,
                src : s.url
              }).on("load error", callback = function(result) {
                fileElem.remove();
                /** @type {null} */
                callback = null;
                if (result) {
                  done("error" === result.type ? 404 : 200, result.type);
                }
              });
              document.head.appendChild(fileElem[0]);
            },
            abort : function() {
              if (callback) {
                callback();
              }
            }
          };
        }
      });
      /** @type {!Array} */
      var oldCallbacks = [];
      /** @type {!RegExp} */
      var rjsonp = /(=)\?(?=&|$)|\?\?/;
      jQuery.ajaxSetup({
        jsonp : "callback",
        jsonpCallback : function() {
          var indexLookupKey = oldCallbacks.pop() || jQuery.expando + "_" + widgetUniqueIDIndex++;
          return this[indexLookupKey] = true, indexLookupKey;
        }
      });
      jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, scanners) {
        var callbackName;
        var overwritten;
        var responseContainer;
        /** @type {(boolean|string)} */
        var jsonProp = false !== s.jsonp && (rjsonp.test(s.url) ? "url" : "string" == typeof s.data && 0 === (s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");
        if (jsonProp || "jsonp" === s.dataTypes[0]) {
          return callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback, jsonProp ? s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName) : false !== s.jsonp && (s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName), s.converters["script json"] = function() {
            return responseContainer || jQuery.error(callbackName + " was not called"), responseContainer[0];
          }, s.dataTypes[0] = "json", overwritten = window[callbackName], window[callbackName] = function() {
            /** @type {!Arguments} */
            responseContainer = arguments;
          }, scanners.always(function() {
            if (void 0 === overwritten) {
              jQuery(window).removeProp(callbackName);
            } else {
              window[callbackName] = overwritten;
            }
            if (s[callbackName]) {
              s.jsonpCallback = originalSettings.jsonpCallback;
              oldCallbacks.push(callbackName);
            }
            if (responseContainer && jQuery.isFunction(overwritten)) {
              overwritten(responseContainer[0]);
            }
            responseContainer = overwritten = void 0;
          }), "script";
        }
      });
      support.createHTMLDocument = function() {
        var iframeBody = document.implementation.createHTMLDocument("").body;
        return iframeBody.innerHTML = "<form></form><form></form>", 2 === iframeBody.childNodes.length;
      }();
      /**
       * @param {string} data
       * @param {!Object} context
       * @param {!Function} keepScripts
       * @return {?}
       */
      jQuery.parseHTML = function(data, context, keepScripts) {
        if ("string" != typeof data) {
          return [];
        }
        if ("boolean" == typeof context) {
          /** @type {!Object} */
          keepScripts = context;
          /** @type {boolean} */
          context = false;
        }
        var base;
        var parsed;
        var scripts;
        return context || (support.createHTMLDocument ? (context = document.implementation.createHTMLDocument(""), base = context.createElement("base"), base.href = document.location.href, context.head.appendChild(base)) : context = document), parsed = rsingleTag.exec(data), scripts = !keepScripts && [], parsed ? [context.createElement(parsed[1])] : (parsed = buildFragment([data], context, scripts), scripts && scripts.length && jQuery(scripts).remove(), jQuery.merge([], parsed.childNodes));
      };
      /**
       * @param {string} addr
       * @param {!Object} value
       * @param {!Array} callback
       * @return {?}
       */
      jQuery.fn.load = function(addr, value, callback) {
        var selector;
        var method;
        var args;
        var self = this;
        var i = addr.indexOf(" ");
        return i > -1 && (selector = log(addr.slice(i)), addr = addr.slice(0, i)), jQuery.isFunction(value) ? (callback = value, value = void 0) : value && "object" == typeof value && (method = "POST"), self.length > 0 && jQuery.ajax({
          url : addr,
          type : method || "GET",
          dataType : "html",
          data : value
        }).done(function(responseText) {
          /** @type {!Arguments} */
          args = arguments;
          self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText);
        }).always(callback && function(name, document) {
          self.each(function() {
            callback.apply(this, args || [name.responseText, document, name]);
          });
        }), this;
      };
      jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function(canCreateDiscussions, type) {
        /**
         * @param {string} leaveFunction
         * @return {?}
         */
        jQuery.fn[type] = function(leaveFunction) {
          return this.on(type, leaveFunction);
        };
      });
      /**
       * @param {?} elem
       * @return {?}
       */
      jQuery.expr.pseudos.animated = function(elem) {
        return jQuery.grep(jQuery.timers, function(fn) {
          return elem === fn.elem;
        }).length;
      };
      jQuery.offset = {
        setOffset : function(element, options, x) {
          var offset;
          var left;
          var a;
          var i;
          var curOffset;
          var value;
          var u;
          var propertyName = jQuery.css(element, "position");
          var p = jQuery(element);
          var temp = {};
          if ("static" === propertyName) {
            /** @type {string} */
            element.style.position = "relative";
          }
          curOffset = p.offset();
          a = jQuery.css(element, "top");
          value = jQuery.css(element, "left");
          /** @type {boolean} */
          u = ("absolute" === propertyName || "fixed" === propertyName) && (a + value).indexOf("auto") > -1;
          if (u) {
            offset = p.position();
            i = offset.top;
            left = offset.left;
          } else {
            /** @type {number} */
            i = parseFloat(a) || 0;
            /** @type {number} */
            left = parseFloat(value) || 0;
          }
          if (jQuery.isFunction(options)) {
            options = options.call(element, x, jQuery.extend({}, curOffset));
          }
          if (null != options.top) {
            /** @type {number} */
            temp.top = options.top - curOffset.top + i;
          }
          if (null != options.left) {
            /** @type {number} */
            temp.left = options.left - curOffset.left + left;
          }
          if ("using" in options) {
            options.using.call(element, temp);
          } else {
            p.css(temp);
          }
        }
      };
      jQuery.fn.extend({
        offset : function(y) {
          if (arguments.length) {
            return void 0 === y ? this : this.each(function(i) {
              jQuery.offset.setOffset(this, y, i);
            });
          }
          var doc;
          var docElem;
          var box;
          var win;
          var target = this[0];
          if (target) {
            return target.getClientRects().length ? (box = target.getBoundingClientRect(), doc = target.ownerDocument, docElem = doc.documentElement, win = doc.defaultView, {
              top : box.top + win.pageYOffset - docElem.clientTop,
              left : box.left + win.pageXOffset - docElem.clientLeft
            }) : {
              top : 0,
              left : 0
            };
          }
        },
        position : function() {
          if (this[0]) {
            var offsetParent;
            var toOffset;
            var n = this[0];
            var offset = {
              top : 0,
              left : 0
            };
            return "fixed" === jQuery.css(n, "position") ? toOffset = n.getBoundingClientRect() : (offsetParent = this.offsetParent(), toOffset = this.offset(), callback(offsetParent[0], "html") || (offset = offsetParent.offset()), offset = {
              top : offset.top + jQuery.css(offsetParent[0], "borderTopWidth", true),
              left : offset.left + jQuery.css(offsetParent[0], "borderLeftWidth", true)
            }), {
              top : toOffset.top - offset.top - jQuery.css(n, "marginTop", true),
              left : toOffset.left - offset.left - jQuery.css(n, "marginLeft", true)
            };
          }
        },
        offsetParent : function() {
          return this.map(function() {
            var parent = this.offsetParent;
            for (; parent && "static" === jQuery.css(parent, "position");) {
              parent = parent.offsetParent;
            }
            return parent || node;
          });
        }
      });
      jQuery.each({
        scrollLeft : "pageXOffset",
        scrollTop : "pageYOffset"
      }, function(type, prop) {
        /** @type {boolean} */
        var top = "pageYOffset" === prop;
        /**
         * @param {?} value
         * @return {?}
         */
        jQuery.fn[type] = function(value) {
          return access(this, function(node, method, val) {
            var win;
            if (jQuery.isWindow(node) ? win = node : 9 === node.nodeType && (win = node.defaultView), void 0 === val) {
              return win ? win[prop] : node[method];
            }
            if (win) {
              win.scrollTo(top ? win.pageXOffset : val, top ? val : win.pageYOffset);
            } else {
              /** @type {number} */
              node[method] = val;
            }
          }, type, value, arguments.length);
        };
      });
      jQuery.each(["top", "left"], function(canCreateDiscussions, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(parent, val) {
          if (val) {
            return val = curCSS(parent, prop), exactRegExp.test(val) ? jQuery(parent).position()[prop] + "px" : val;
          }
        });
      });
      jQuery.each({
        Height : "height",
        Width : "width"
      }, function(name, type) {
        jQuery.each({
          padding : "inner" + name,
          content : type,
          "" : "outer" + name
        }, function(defaultExtra, type) {
          /**
           * @param {boolean} margin
           * @param {(number|string)} boardManager
           * @return {?}
           */
          jQuery.fn[type] = function(margin, boardManager) {
            var chainable = arguments.length && (defaultExtra || "boolean" != typeof margin);
            var extra = defaultExtra || (true === margin || true === boardManager ? "margin" : "border");
            return access(this, function(el, offset, undefined) {
              var doc;
              return jQuery.isWindow(el) ? 0 === type.indexOf("outer") ? el["inner" + name] : el.document.documentElement["client" + name] : 9 === el.nodeType ? (doc = el.documentElement, Math.max(el.body["scroll" + name], doc["scroll" + name], el.body["offset" + name], doc["offset" + name], doc["client" + name])) : void 0 === undefined ? jQuery.css(el, offset, extra) : jQuery.style(el, offset, undefined, extra);
            }, type, chainable ? margin : void 0, chainable);
          };
        });
      });
      jQuery.fn.extend({
        bind : function(event, data, fn) {
          return this.on(event, null, data, fn);
        },
        unbind : function(type, fn) {
          return this.off(type, null, fn);
        },
        delegate : function(selector, type, fn, t) {
          return this.on(type, selector, fn, t);
        },
        undelegate : function(selector, event, callback) {
          return 1 === arguments.length ? this.off(selector, "**") : this.off(event, selector || "**", callback);
        }
      });
      /**
       * @param {?} hold
       * @return {undefined}
       */
      jQuery.holdReady = function(hold) {
        if (hold) {
          jQuery.readyWait++;
        } else {
          jQuery.ready(true);
        }
      };
      /** @type {function(*): boolean} */
      jQuery.isArray = Array.isArray;
      /** @type {function(this:JSONType, string, function(string, *): *=): *} */
      jQuery.parseJSON = JSON.parse;
      /** @type {function(!Object, string): ?} */
      jQuery.nodeName = callback;
      /** @type {!Array} */
      groups = [];
      if (void 0 !== (result = function() {
        return jQuery;
      }.apply(e, groups))) {
        s.exports = result;
      }
      var _jQuery = window.jQuery;
      var old$ = window.$;
      return jQuery.noConflict = function(deep) {
        return window.$ === jQuery && (window.$ = old$), deep && window.jQuery === jQuery && (window.jQuery = _jQuery), jQuery;
      }, zoomAware || (window.jQuery = window.$ = jQuery), jQuery;
    });
  },
  laCn : function(clickRepeater, e, n) {
    (function(resultPage) {
      +function($) {
        /**
         * @param {!Object} $trigger
         * @return {?}
         */
        function getTargetFromTrigger($trigger) {
          var href;
          var i = $trigger.attr("data-target") || (href = $trigger.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, "");
          return $(i);
        }
        /**
         * @param {!Function} config
         * @return {?}
         */
        function Plugin(config) {
          return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.collapse");
            var options = $.extend({}, Collapse.DEFAULTS, $this.data(), "object" == typeof config && config);
            if (!data && options.toggle && /show|hide/.test(config)) {
              /** @type {boolean} */
              options.toggle = false;
            }
            if (!data) {
              $this.data("bs.collapse", data = new Collapse(this, options));
            }
            if ("string" == typeof config) {
              data[config]();
            }
          });
        }
        /**
         * @param {string} element
         * @param {!Object} options
         * @return {undefined}
         */
        var Collapse = function(element, options) {
          this.$element = $(element);
          this.options = $.extend({}, Collapse.DEFAULTS, options);
          this.$trigger = $('[data-toggle="collapse"][href="#' + element.id + '"],[data-toggle="collapse"][data-target="#' + element.id + '"]');
          /** @type {null} */
          this.transitioning = null;
          if (this.options.parent) {
            this.$parent = this.getParent();
          } else {
            this.addAriaAndCollapsedClass(this.$element, this.$trigger);
          }
          if (this.options.toggle) {
            this.toggle();
          }
        };
        /** @type {string} */
        Collapse.VERSION = "3.3.7";
        /** @type {number} */
        Collapse.TRANSITION_DURATION = 350;
        Collapse.DEFAULTS = {
          toggle : true
        };
        /**
         * @return {?}
         */
        Collapse.prototype.dimension = function() {
          return this.$element.hasClass("width") ? "width" : "height";
        };
        /**
         * @return {?}
         */
        Collapse.prototype.show = function() {
          if (!this.transitioning && !this.$element.hasClass("in")) {
            var data;
            var actives = this.$parent && this.$parent.children(".panel").children(".in, .collapsing");
            if (!(actives && actives.length && (data = actives.data("bs.collapse")) && data.transitioning)) {
              var event = $.Event("show.bs.collapse");
              if (this.$element.trigger(event), !event.isDefaultPrevented()) {
                if (actives && actives.length) {
                  Plugin.call(actives, "hide");
                  if (!data) {
                    actives.data("bs.collapse", null);
                  }
                }
                var dimension = this.dimension();
                this.$element.removeClass("collapse").addClass("collapsing")[dimension](0).attr("aria-expanded", true);
                this.$trigger.removeClass("collapsed").attr("aria-expanded", true);
                /** @type {number} */
                this.transitioning = 1;
                /**
                 * @return {undefined}
                 */
                var complete = function() {
                  this.$element.removeClass("collapsing").addClass("collapse in")[dimension]("");
                  /** @type {number} */
                  this.transitioning = 0;
                  this.$element.trigger("shown.bs.collapse");
                };
                if (!$.support.transition) {
                  return complete.call(this);
                }
                var scrollSize = $.camelCase(["scroll", dimension].join("-"));
                this.$element.one("bsTransitionEnd", $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize]);
              }
            }
          }
        };
        /**
         * @return {?}
         */
        Collapse.prototype.hide = function() {
          if (!this.transitioning && this.$element.hasClass("in")) {
            var event = $.Event("hide.bs.collapse");
            if (this.$element.trigger(event), !event.isDefaultPrevented()) {
              var dimension = this.dimension();
              this.$element[dimension](this.$element[dimension]())[0].offsetHeight;
              this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded", false);
              this.$trigger.addClass("collapsed").attr("aria-expanded", false);
              /** @type {number} */
              this.transitioning = 1;
              /**
               * @return {undefined}
               */
              var complete = function() {
                /** @type {number} */
                this.transitioning = 0;
                this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse");
              };
              if (!$.support.transition) {
                return complete.call(this);
              }
              this.$element[dimension](0).one("bsTransitionEnd", $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION);
            }
          }
        };
        /**
         * @return {undefined}
         */
        Collapse.prototype.toggle = function() {
          this[this.$element.hasClass("in") ? "hide" : "show"]();
        };
        /**
         * @return {?}
         */
        Collapse.prototype.getParent = function() {
          return $(this.options.parent).find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]').each($.proxy(function(n, tr) {
            var $element = $(tr);
            this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element);
          }, this)).end();
        };
        /**
         * @param {!Object} $element
         * @param {!Object} $trigger
         * @return {undefined}
         */
        Collapse.prototype.addAriaAndCollapsedClass = function($element, $trigger) {
          var isOpen = $element.hasClass("in");
          $element.attr("aria-expanded", isOpen);
          $trigger.toggleClass("collapsed", !isOpen).attr("aria-expanded", isOpen);
        };
        var old = $.fn.collapse;
        /** @type {function(!Function): ?} */
        $.fn.collapse = Plugin;
        /** @type {function(string, !Object): undefined} */
        $.fn.collapse.Constructor = Collapse;
        /**
         * @return {?}
         */
        $.fn.collapse.noConflict = function() {
          return $.fn.collapse = old, this;
        };
        $(document).on("click.bs.collapse.data-api", '[data-toggle="collapse"]', function(event) {
          var $this = $(this);
          if (!$this.attr("data-target")) {
            event.preventDefault();
          }
          var $target = getTargetFromTrigger($this);
          var data = $target.data("bs.collapse");
          var option = data ? "toggle" : $this.data();
          Plugin.call($target, option);
        });
      }(resultPage);
    }).call(e, n("juYr"));
  },
  m5Wh : function(clickRepeater, e, n) {
    (function(resultPage) {
      +function($) {
        /**
         * @param {string} key
         * @return {?}
         */
        function Plugin(key) {
          return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.button");
            var options = "object" == typeof key && key;
            if (!data) {
              $this.data("bs.button", data = new Button(this, options));
            }
            if ("toggle" == key) {
              data.toggle();
            } else {
              if (key) {
                data.setState(key);
              }
            }
          });
        }
        /**
         * @param {string} element
         * @param {!Object} options
         * @return {undefined}
         */
        var Button = function(element, options) {
          this.$element = $(element);
          this.options = $.extend({}, Button.DEFAULTS, options);
          /** @type {boolean} */
          this.isLoading = false;
        };
        /** @type {string} */
        Button.VERSION = "3.3.7";
        Button.DEFAULTS = {
          loadingText : "loading..."
        };
        /**
         * @param {string} state
         * @return {undefined}
         */
        Button.prototype.setState = function(state) {
          /** @type {string} */
          var d = "disabled";
          var $el = this.$element;
          /** @type {string} */
          var val = $el.is("input") ? "val" : "html";
          var data = $el.data();
          /** @type {string} */
          state = state + "Text";
          if (null == data.resetText) {
            $el.data("resetText", $el[val]());
          }
          setTimeout($.proxy(function() {
            $el[val](null == data[state] ? this.options[state] : data[state]);
            if ("loadingText" == state) {
              /** @type {boolean} */
              this.isLoading = true;
              $el.addClass(d).attr(d, d).prop(d, true);
            } else {
              if (this.isLoading) {
                /** @type {boolean} */
                this.isLoading = false;
                $el.removeClass(d).removeAttr(d).prop(d, false);
              }
            }
          }, this), 0);
        };
        /**
         * @return {undefined}
         */
        Button.prototype.toggle = function() {
          /** @type {boolean} */
          var t = true;
          var el_form_group = this.$element.closest('[data-toggle="buttons"]');
          if (el_form_group.length) {
            var $input = this.$element.find("input");
            if ("radio" == $input.prop("type")) {
              if ($input.prop("checked")) {
                /** @type {boolean} */
                t = false;
              }
              el_form_group.find(".active").removeClass("active");
              this.$element.addClass("active");
            } else {
              if ("checkbox" == $input.prop("type")) {
                if ($input.prop("checked") !== this.$element.hasClass("active")) {
                  /** @type {boolean} */
                  t = false;
                }
                this.$element.toggleClass("active");
              }
            }
            $input.prop("checked", this.$element.hasClass("active"));
            if (t) {
              $input.trigger("change");
            }
          } else {
            this.$element.attr("aria-pressed", !this.$element.hasClass("active"));
            this.$element.toggleClass("active");
          }
        };
        var old = $.fn.button;
        /** @type {function(string): ?} */
        $.fn.button = Plugin;
        /** @type {function(string, !Object): undefined} */
        $.fn.button.Constructor = Button;
        /**
         * @return {?}
         */
        $.fn.button.noConflict = function() {
          return $.fn.button = old, this;
        };
        $(document).on("click.bs.button.data-api", '[data-toggle^="button"]', function(event) {
          var $btn = $(event.target).closest(".btn");
          Plugin.call($btn, "toggle");
          if (!$(event.target).is('input[type="radio"], input[type="checkbox"]')) {
            event.preventDefault();
            if ($btn.is("input,button")) {
              $btn.trigger("focus");
            } else {
              $btn.find("input:visible,button:visible").first().trigger("focus");
            }
          }
        }).on("focus.bs.button.data-api blur.bs.button.data-api", '[data-toggle^="button"]', function(e) {
          $(e.target).closest(".btn").toggleClass("focus", /^focus(in)?$/.test(e.type));
        });
      }(resultPage);
    }).call(e, n("juYr"));
  },
  mEQU : function(clickRepeater, e, n) {
    (function(resultPage) {
      +function($) {
        /**
         * @param {!Function} options
         * @param {undefined} settings
         * @return {?}
         */
        function Plugin(options, settings) {
          return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.modal");
            var _config = $.extend({}, Modal.DEFAULTS, $this.data(), "object" == typeof options && options);
            if (!data) {
              $this.data("bs.modal", data = new Modal(this, _config));
            }
            if ("string" == typeof options) {
              data[options](settings);
            } else {
              if (_config.show) {
                data.show(settings);
              }
            }
          });
        }
        /**
         * @param {string} element
         * @param {!Object} options
         * @return {undefined}
         */
        var Modal = function(element, options) {
          /** @type {!Object} */
          this.options = options;
          this.$body = $(document.body);
          this.$element = $(element);
          this.$dialog = this.$element.find(".modal-dialog");
          /** @type {null} */
          this.$backdrop = null;
          /** @type {null} */
          this.isShown = null;
          /** @type {null} */
          this.originalBodyPad = null;
          /** @type {number} */
          this.scrollbarWidth = 0;
          /** @type {boolean} */
          this.ignoreBackdropClick = false;
          if (this.options.remote) {
            this.$element.find(".modal-content").load(this.options.remote, $.proxy(function() {
              this.$element.trigger("loaded.bs.modal");
            }, this));
          }
        };
        /** @type {string} */
        Modal.VERSION = "3.3.7";
        /** @type {number} */
        Modal.TRANSITION_DURATION = 300;
        /** @type {number} */
        Modal.BACKDROP_TRANSITION_DURATION = 150;
        Modal.DEFAULTS = {
          backdrop : true,
          keyboard : true,
          show : true
        };
        /**
         * @param {undefined} _relatedTarget
         * @return {?}
         */
        Modal.prototype.toggle = function(_relatedTarget) {
          return this.isShown ? this.hide() : this.show(_relatedTarget);
        };
        /**
         * @param {!HTMLElement} _relatedTarget
         * @return {undefined}
         */
        Modal.prototype.show = function(_relatedTarget) {
          var that = this;
          var event = $.Event("show.bs.modal", {
            relatedTarget : _relatedTarget
          });
          this.$element.trigger(event);
          if (!(this.isShown || event.isDefaultPrevented())) {
            /** @type {boolean} */
            this.isShown = true;
            this.checkScrollbar();
            this.setScrollbar();
            this.$body.addClass("modal-open");
            this.escape();
            this.resize();
            this.$element.on("click.dismiss.bs.modal", '[data-dismiss="modal"]', $.proxy(this.hide, this));
            this.$dialog.on("mousedown.dismiss.bs.modal", function() {
              that.$element.one("mouseup.dismiss.bs.modal", function(jEvent) {
                if ($(jEvent.target).is(that.$element)) {
                  /** @type {boolean} */
                  that.ignoreBackdropClick = true;
                }
              });
            });
            this.backdrop(function() {
              var o = $.support.transition && that.$element.hasClass("fade");
              if (!that.$element.parent().length) {
                that.$element.appendTo(that.$body);
              }
              that.$element.show().scrollTop(0);
              that.adjustDialog();
              if (o) {
                that.$element[0].offsetWidth;
              }
              that.$element.addClass("in");
              that.enforceFocus();
              var r = $.Event("shown.bs.modal", {
                relatedTarget : _relatedTarget
              });
              if (o) {
                that.$dialog.one("bsTransitionEnd", function() {
                  that.$element.trigger("focus").trigger(r);
                }).emulateTransitionEnd(Modal.TRANSITION_DURATION);
              } else {
                that.$element.trigger("focus").trigger(r);
              }
            });
          }
        };
        /**
         * @param {!Object} e
         * @return {undefined}
         */
        Modal.prototype.hide = function(e) {
          if (e) {
            e.preventDefault();
          }
          e = $.Event("hide.bs.modal");
          this.$element.trigger(e);
          if (this.isShown && !e.isDefaultPrevented()) {
            /** @type {boolean} */
            this.isShown = false;
            this.escape();
            this.resize();
            $(document).off("focusin.bs.modal");
            this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal");
            this.$dialog.off("mousedown.dismiss.bs.modal");
            if ($.support.transition && this.$element.hasClass("fade")) {
              this.$element.one("bsTransitionEnd", $.proxy(this.hideModal, this)).emulateTransitionEnd(Modal.TRANSITION_DURATION);
            } else {
              this.hideModal();
            }
          }
        };
        /**
         * @return {undefined}
         */
        Modal.prototype.enforceFocus = function() {
          $(document).off("focusin.bs.modal").on("focusin.bs.modal", $.proxy(function(options) {
            if (!(document === options.target || this.$element[0] === options.target || this.$element.has(options.target).length)) {
              this.$element.trigger("focus");
            }
          }, this));
        };
        /**
         * @return {undefined}
         */
        Modal.prototype.escape = function() {
          if (this.isShown && this.options.keyboard) {
            this.$element.on("keydown.dismiss.bs.modal", $.proxy(function(event) {
              if (27 == event.which) {
                this.hide();
              }
            }, this));
          } else {
            if (!this.isShown) {
              this.$element.off("keydown.dismiss.bs.modal");
            }
          }
        };
        /**
         * @return {undefined}
         */
        Modal.prototype.resize = function() {
          if (this.isShown) {
            $(window).on("resize.bs.modal", $.proxy(this.handleUpdate, this));
          } else {
            $(window).off("resize.bs.modal");
          }
        };
        /**
         * @return {undefined}
         */
        Modal.prototype.hideModal = function() {
          var that = this;
          this.$element.hide();
          this.backdrop(function() {
            that.$body.removeClass("modal-open");
            that.resetAdjustments();
            that.resetScrollbar();
            that.$element.trigger("hidden.bs.modal");
          });
        };
        /**
         * @return {undefined}
         */
        Modal.prototype.removeBackdrop = function() {
          if (this.$backdrop) {
            this.$backdrop.remove();
          }
          /** @type {null} */
          this.$backdrop = null;
        };
        /**
         * @param {!Function} callback
         * @return {undefined}
         */
        Modal.prototype.backdrop = function(callback) {
          var that = this;
          /** @type {string} */
          var animate = this.$element.hasClass("fade") ? "fade" : "";
          if (this.isShown && this.options.backdrop) {
            var doAnimate = $.support.transition && animate;
            if (this.$backdrop = $(document.createElement("div")).addClass("modal-backdrop " + animate).appendTo(this.$body), this.$element.on("click.dismiss.bs.modal", $.proxy(function(event) {
              if (this.ignoreBackdropClick) {
                return void(this.ignoreBackdropClick = false);
              }
              if (event.target === event.currentTarget) {
                if ("static" == this.options.backdrop) {
                  this.$element[0].focus();
                } else {
                  this.hide();
                }
              }
            }, this)), doAnimate && this.$backdrop[0].offsetWidth, this.$backdrop.addClass("in"), !callback) {
              return;
            }
            if (doAnimate) {
              this.$backdrop.one("bsTransitionEnd", callback).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION);
            } else {
              callback();
            }
          } else {
            if (!this.isShown && this.$backdrop) {
              this.$backdrop.removeClass("in");
              /**
               * @return {undefined}
               */
              var callbackRemove = function() {
                that.removeBackdrop();
                if (callback) {
                  callback();
                }
              };
              if ($.support.transition && this.$element.hasClass("fade")) {
                this.$backdrop.one("bsTransitionEnd", callbackRemove).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION);
              } else {
                callbackRemove();
              }
            } else {
              if (callback) {
                callback();
              }
            }
          }
        };
        /**
         * @return {undefined}
         */
        Modal.prototype.handleUpdate = function() {
          this.adjustDialog();
        };
        /**
         * @return {undefined}
         */
        Modal.prototype.adjustDialog = function() {
          /** @type {boolean} */
          var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight;
          this.$element.css({
            paddingLeft : !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : "",
            paddingRight : this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ""
          });
        };
        /**
         * @return {undefined}
         */
        Modal.prototype.resetAdjustments = function() {
          this.$element.css({
            paddingLeft : "",
            paddingRight : ""
          });
        };
        /**
         * @return {undefined}
         */
        Modal.prototype.checkScrollbar = function() {
          /** @type {number} */
          var fullWindowWidth = window.innerWidth;
          if (!fullWindowWidth) {
            /** @type {!ClientRect} */
            var documentElementRect = document.documentElement.getBoundingClientRect();
            /** @type {number} */
            fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);
          }
          /** @type {boolean} */
          this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;
          this.scrollbarWidth = this.measureScrollbar();
        };
        /**
         * @return {undefined}
         */
        Modal.prototype.setScrollbar = function() {
          /** @type {number} */
          var bodyPad = parseInt(this.$body.css("padding-right") || 0, 10);
          /** @type {(number|string)} */
          this.originalBodyPad = document.body.style.paddingRight || "";
          if (this.bodyIsOverflowing) {
            this.$body.css("padding-right", bodyPad + this.scrollbarWidth);
          }
        };
        /**
         * @return {undefined}
         */
        Modal.prototype.resetScrollbar = function() {
          this.$body.css("padding-right", this.originalBodyPad);
        };
        /**
         * @return {?}
         */
        Modal.prototype.measureScrollbar = function() {
          /** @type {!Element} */
          var scrollDiv = document.createElement("div");
          /** @type {string} */
          scrollDiv.className = "modal-scrollbar-measure";
          this.$body.append(scrollDiv);
          /** @type {number} */
          var e = scrollDiv.offsetWidth - scrollDiv.clientWidth;
          return this.$body[0].removeChild(scrollDiv), e;
        };
        var old = $.fn.modal;
        /** @type {function(!Function, undefined): ?} */
        $.fn.modal = Plugin;
        /** @type {function(string, !Object): undefined} */
        $.fn.modal.Constructor = Modal;
        /**
         * @return {?}
         */
        $.fn.modal.noConflict = function() {
          return $.fn.modal = old, this;
        };
        $(document).on("click.bs.modal.data-api", '[data-toggle="modal"]', function(event) {
          var $this = $(this);
          var href = $this.attr("href");
          var $target = $($this.attr("data-target") || href && href.replace(/.*(?=#[^\s]+$)/, ""));
          var option = $target.data("bs.modal") ? "toggle" : $.extend({
            remote : !/#/.test(href) && href
          }, $target.data(), $this.data());
          if ($this.is("a")) {
            event.preventDefault();
          }
          $target.one("show.bs.modal", function(event) {
            if (!event.isDefaultPrevented()) {
              $target.one("hidden.bs.modal", function() {
                if ($this.is(":visible")) {
                  $this.trigger("focus");
                }
              });
            }
          });
          Plugin.call($target, option, this);
        });
      }(resultPage);
    }).call(e, n("juYr"));
  },
  nzgf : function(module, selector, convertToImages) {
    !function(addedRenderer, factory) {
      module.exports = factory();
    }(0, function() {
      return function(modules) {
        /**
         * @param {string} moduleId
         * @return {?}
         */
        function __webpack_require__(moduleId) {
          if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
          }
          var module = installedModules[moduleId] = {
            exports : {},
            id : moduleId,
            loaded : false
          };
          return modules[moduleId].call(module.exports, module, module.exports, __webpack_require__), module.loaded = true, module.exports;
        }
        var installedModules = {};
        return __webpack_require__.m = modules, __webpack_require__.c = installedModules, __webpack_require__.p = "", __webpack_require__(0);
      }([function(exports, e, __webpack_require__) {
        /**
         * @param {!AudioNode} error
         * @param {!Function} value
         * @return {undefined}
         */
        function reject(error, value) {
          if (!(error instanceof value)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        Object.defineProperty(e, "__esModule", {
          value : true
        });
        var baseAssignValue = function() {
          /**
           * @param {!Function} d
           * @param {string} props
           * @return {undefined}
           */
          function t(d, props) {
            /** @type {number} */
            var i = 0;
            for (; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              /** @type {boolean} */
              descriptor.configurable = true;
              if ("value" in descriptor) {
                /** @type {boolean} */
                descriptor.writable = true;
              }
              Object.defineProperty(d, descriptor.key, descriptor);
            }
          }
          return function(p, n, a) {
            return n && t(p.prototype, n), a && t(p, a), p;
          };
        }();
        var app = __webpack_require__(1);
        var global = __webpack_require__(3);
        var newOrg = function() {
          /**
           * @param {!Array} p
           * @param {!Object} scale
           * @return {undefined}
           */
          function result(p, scale) {
            reject(this, result);
            app.initializer.load(this, scale, p);
            this.begin();
          }
          return baseAssignValue(result, [{
            key : "toggle",
            value : function() {
              if (this.pause.status) {
                this.start();
              } else {
                this.stop();
              }
            }
          }, {
            key : "stop",
            value : function() {
              if (!(this.typingComplete || this.pause.status)) {
                this.toggleBlinking(true);
                /** @type {boolean} */
                this.pause.status = true;
                this.options.onStop(this.arrayPos, this);
              }
            }
          }, {
            key : "start",
            value : function() {
              if (!this.typingComplete) {
                if (this.pause.status) {
                  /** @type {boolean} */
                  this.pause.status = false;
                  if (this.pause.typewrite) {
                    this.typewrite(this.pause.curString, this.pause.curStrPos);
                  } else {
                    this.backspace(this.pause.curString, this.pause.curStrPos);
                  }
                  this.options.onStart(this.arrayPos, this);
                }
              }
            }
          }, {
            key : "destroy",
            value : function() {
              this.reset(false);
              this.options.onDestroy(this);
            }
          }, {
            key : "reset",
            value : function() {
              var t = arguments.length <= 0 || void 0 === arguments[0] || arguments[0];
              clearInterval(this.timeout);
              this.replaceText("");
              if (this.cursor && this.cursor.parentNode) {
                this.cursor.parentNode.removeChild(this.cursor);
                /** @type {null} */
                this.cursor = null;
              }
              /** @type {number} */
              this.strPos = 0;
              /** @type {number} */
              this.arrayPos = 0;
              /** @type {number} */
              this.curLoop = 0;
              if (t) {
                this.insertCursor();
                this.options.onReset(this);
                this.begin();
              }
            }
          }, {
            key : "begin",
            value : function() {
              var self = this;
              /** @type {boolean} */
              this.typingComplete = false;
              this.shuffleStringsIfNeeded(this);
              this.insertCursor();
              if (this.bindInputFocusEvents) {
                this.bindFocusEvents();
              }
              /** @type {number} */
              this.timeout = setTimeout(function() {
                if (self.currentElContent && 0 !== self.currentElContent.length) {
                  self.backspace(self.currentElContent, self.currentElContent.length);
                } else {
                  self.typewrite(self.strings[self.sequence[self.arrayPos]], self.strPos);
                }
              }, this.startDelay);
            }
          }, {
            key : "typewrite",
            value : function(s, index) {
              var self = this;
              if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {
                this.el.classList.remove(this.fadeOutClass);
                if (this.cursor) {
                  this.cursor.classList.remove(this.fadeOutClass);
                }
              }
              var delayMs = this.humanizer(this.typeSpeed);
              /** @type {number} */
              var len = 1;
              if (true === this.pause.status) {
                return void this.setPauseStatus(s, index, true);
              }
              /** @type {number} */
              this.timeout = setTimeout(function() {
                index = global.htmlParser.typeHtmlChars(s, index, self);
                /** @type {number} */
                var options = 0;
                var c = s.substr(index);
                if ("^" === c.charAt(0) && /^\^\d+/.test(c)) {
                  /** @type {number} */
                  var count = 1;
                  /** @type {string} */
                  c = /\d+/.exec(c)[0];
                  /** @type {number} */
                  count = count + c.length;
                  /** @type {number} */
                  options = parseInt(c);
                  /** @type {boolean} */
                  self.temporaryPause = true;
                  self.options.onTypingPaused(self.arrayPos, self);
                  s = s.substring(0, index) + s.substring(index + count);
                  self.toggleBlinking(true);
                }
                if ("`" === c.charAt(0)) {
                  for (; "`" !== s.substr(index + len).charAt(0) && (len++, !(index + len > s.length));) {
                  }
                  var current = s.substring(0, index);
                  var op = s.substring(current.length + 1, index + len);
                  var val = s.substring(index + len + 1);
                  s = current + op + val;
                  len--;
                }
                /** @type {number} */
                self.timeout = setTimeout(function() {
                  self.toggleBlinking(false);
                  if (index === s.length) {
                    self.doneTyping(s, index);
                  } else {
                    self.keepTyping(s, index, len);
                  }
                  if (self.temporaryPause) {
                    /** @type {boolean} */
                    self.temporaryPause = false;
                    self.options.onTypingResumed(self.arrayPos, self);
                  }
                }, options);
              }, delayMs);
            }
          }, {
            key : "keepTyping",
            value : function(name, a, n) {
              if (0 === a) {
                this.toggleBlinking(false);
                this.options.preStringTyped(this.arrayPos, this);
              }
              a = a + n;
              var b = name.substr(0, a);
              this.replaceText(b);
              this.typewrite(name, a);
            }
          }, {
            key : "doneTyping",
            value : function(name, event) {
              var self = this;
              this.options.onStringTyped(this.arrayPos, this);
              this.toggleBlinking(true);
              if (!(this.arrayPos === this.strings.length - 1 && (this.complete(), false === this.loop || this.curLoop === this.loopCount))) {
                /** @type {number} */
                this.timeout = setTimeout(function() {
                  self.backspace(name, event);
                }, this.backDelay);
              }
            }
          }, {
            key : "backspace",
            value : function(name, id) {
              var self = this;
              if (true === this.pause.status) {
                return void this.setPauseStatus(name, id, true);
              }
              if (this.fadeOut) {
                return this.initFadeOut();
              }
              this.toggleBlinking(false);
              var delayMs = this.humanizer(this.backSpeed);
              /** @type {number} */
              this.timeout = setTimeout(function() {
                id = global.htmlParser.backSpaceHtmlChars(name, id, self);
                var text = name.substr(0, id);
                if (self.replaceText(text), self.smartBackspace) {
                  var option = self.strings[self.arrayPos + 1];
                  if (option && text === option.substr(0, id)) {
                    /** @type {!Object} */
                    self.stopNum = id;
                  } else {
                    /** @type {number} */
                    self.stopNum = 0;
                  }
                }
                if (id > self.stopNum) {
                  id--;
                  self.backspace(name, id);
                } else {
                  if (id <= self.stopNum) {
                    self.arrayPos++;
                    if (self.arrayPos === self.strings.length) {
                      /** @type {number} */
                      self.arrayPos = 0;
                      self.options.onLastStringBackspaced();
                      self.shuffleStringsIfNeeded();
                      self.begin();
                    } else {
                      self.typewrite(self.strings[self.sequence[self.arrayPos]], id);
                    }
                  }
                }
              }, delayMs);
            }
          }, {
            key : "complete",
            value : function() {
              this.options.onComplete(this);
              if (this.loop) {
                this.curLoop++;
              } else {
                /** @type {boolean} */
                this.typingComplete = true;
              }
            }
          }, {
            key : "setPauseStatus",
            value : function(name, n, context) {
              /** @type {!Function} */
              this.pause.typewrite = context;
              /** @type {string} */
              this.pause.curString = name;
              /** @type {!Object} */
              this.pause.curStrPos = n;
            }
          }, {
            key : "toggleBlinking",
            value : function(name) {
              if (this.cursor && !this.pause.status && this.cursorBlinking !== name) {
                /** @type {string} */
                this.cursorBlinking = name;
                /** @type {(number|string)} */
                var inf = name ? "infinite" : 0;
                /** @type {(number|string)} */
                this.cursor.style.animationIterationCount = inf;
              }
            }
          }, {
            key : "humanizer",
            value : function(name) {
              return Math.round(Math.random() * name / 2) + name;
            }
          }, {
            key : "shuffleStringsIfNeeded",
            value : function() {
              if (this.shuffle) {
                this.sequence = this.sequence.sort(function() {
                  return Math.random() - .5;
                });
              }
            }
          }, {
            key : "initFadeOut",
            value : function() {
              var self = this;
              return this.el.className += " " + this.fadeOutClass, this.cursor && (this.cursor.className += " " + this.fadeOutClass), setTimeout(function() {
                self.arrayPos++;
                self.replaceText("");
                if (self.strings.length > self.arrayPos) {
                  self.typewrite(self.strings[self.sequence[self.arrayPos]], 0);
                } else {
                  self.typewrite(self.strings[0], 0);
                  /** @type {number} */
                  self.arrayPos = 0;
                }
              }, this.fadeOutDelay);
            }
          }, {
            key : "replaceText",
            value : function(value) {
              if (this.attr) {
                this.el.setAttribute(this.attr, value);
              } else {
                if (this.isInput) {
                  /** @type {string} */
                  this.el.value = value;
                } else {
                  if ("html" === this.contentType) {
                    /** @type {string} */
                    this.el.innerHTML = value;
                  } else {
                    /** @type {string} */
                    this.el.textContent = value;
                  }
                }
              }
            }
          }, {
            key : "bindFocusEvents",
            value : function() {
              var t = this;
              if (this.isInput) {
                this.el.addEventListener("focus", function(canCreateDiscussions) {
                  t.stop();
                });
                this.el.addEventListener("blur", function(canCreateDiscussions) {
                  if (!(t.el.value && 0 !== t.el.value.length)) {
                    t.start();
                  }
                });
              }
            }
          }, {
            key : "insertCursor",
            value : function() {
              if (this.showCursor) {
                if (!this.cursor) {
                  /** @type {!Element} */
                  this.cursor = document.createElement("span");
                  /** @type {string} */
                  this.cursor.className = "typed-cursor";
                  this.cursor.innerHTML = this.cursorChar;
                  if (this.el.parentNode) {
                    this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);
                  }
                }
              }
            }
          }]), result;
        }();
        e.default = newOrg;
        exports.exports = e.default;
      }, function(canCreateDiscussions, module, keysFunc) {
        /**
         * @param {!AudioNode} name
         * @param {!Function} scale
         * @return {undefined}
         */
        function t(name, scale) {
          if (!(name instanceof scale)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        Object.defineProperty(module, "__esModule", {
          value : true
        });
        /** @type {function(!Object, ...(Object|null)): !Object} */
        var _extends = Object.assign || function(target) {
          /** @type {number} */
          var i = 1;
          for (; i < arguments.length; i++) {
            var source = arguments[i];
            var prop;
            for (prop in source) {
              if (Object.prototype.hasOwnProperty.call(source, prop)) {
                target[prop] = source[prop];
              }
            }
          }
          return target;
        };
        var installNativeEvent$2 = function() {
          /**
           * @param {!Function} d
           * @param {string} props
           * @return {undefined}
           */
          function t(d, props) {
            /** @type {number} */
            var i = 0;
            for (; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              /** @type {boolean} */
              descriptor.configurable = true;
              if ("value" in descriptor) {
                /** @type {boolean} */
                descriptor.writable = true;
              }
              Object.defineProperty(d, descriptor.key, descriptor);
            }
          }
          return function(p, n, a) {
            return n && t(p.prototype, n), a && t(p, a), p;
          };
        }();
        var keys = keysFunc(2);
        var layout = function(obj) {
          return obj && obj.__esModule ? obj : {
            default : obj
          };
        }(keys);
        var EventEmitter = function() {
          /**
           * @return {undefined}
           */
          function n() {
            t(this, n);
          }
          return installNativeEvent$2(n, [{
            key : "load",
            value : function(self, options, id) {
              if (self.el = "string" == typeof id ? document.querySelector(id) : id, self.options = _extends({}, layout.default, options), self.isInput = "input" === self.el.tagName.toLowerCase(), self.attr = self.options.attr, self.bindInputFocusEvents = self.options.bindInputFocusEvents, self.showCursor = !self.isInput && self.options.showCursor, self.cursorChar = self.options.cursorChar, self.cursorBlinking = true, self.elContent = self.attr ? self.el.getAttribute(self.attr) : self.el.textContent, 
              self.contentType = self.options.contentType, self.typeSpeed = self.options.typeSpeed, self.startDelay = self.options.startDelay, self.backSpeed = self.options.backSpeed, self.smartBackspace = self.options.smartBackspace, self.backDelay = self.options.backDelay, self.fadeOut = self.options.fadeOut, self.fadeOutClass = self.options.fadeOutClass, self.fadeOutDelay = self.options.fadeOutDelay, self.isPaused = false, self.strings = self.options.strings.map(function(commentToCheck) {
                return commentToCheck.trim();
              }), "string" == typeof self.options.stringsElement ? self.stringsElement = document.querySelector(self.options.stringsElement) : self.stringsElement = self.options.stringsElement, self.stringsElement) {
                /** @type {!Array} */
                self.strings = [];
                /** @type {string} */
                self.stringsElement.style.display = "none";
                /** @type {!Array<?>} */
                var vmArgSetters = Array.prototype.slice.apply(self.stringsElement.children);
                /** @type {boolean} */
                var _iteratorNormalCompletion3 = true;
                /** @type {boolean} */
                var s = false;
                var l = void 0;
                try {
                  var $__6;
                  var _iterator3 = vmArgSetters[Symbol.iterator]();
                  for (; !(_iteratorNormalCompletion3 = ($__6 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var item = $__6.value;
                    self.strings.push(item.innerHTML.trim());
                  }
                } catch (lightThemeBackground) {
                  /** @type {boolean} */
                  s = true;
                  l = lightThemeBackground;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                      _iterator3.return();
                    }
                  } finally {
                    if (s) {
                      throw l;
                    }
                  }
                }
              }
              /** @type {number} */
              self.strPos = 0;
              /** @type {number} */
              self.arrayPos = 0;
              /** @type {number} */
              self.stopNum = 0;
              self.loop = self.options.loop;
              self.loopCount = self.options.loopCount;
              /** @type {number} */
              self.curLoop = 0;
              self.shuffle = self.options.shuffle;
              /** @type {!Array} */
              self.sequence = [];
              self.pause = {
                status : false,
                typewrite : true,
                curString : "",
                curStrPos : 0
              };
              /** @type {boolean} */
              self.typingComplete = false;
              var i;
              for (i in self.strings) {
                /** @type {string} */
                self.sequence[i] = i;
              }
              self.currentElContent = this.getCurrentElContent(self);
              self.autoInsertCss = self.options.autoInsertCss;
              this.appendAnimationCss(self);
            }
          }, {
            key : "getCurrentElContent",
            value : function(obj) {
              return obj.attr ? obj.el.getAttribute(obj.attr) : obj.isInput ? obj.el.value : "html" === obj.contentType ? obj.el.innerHTML : obj.el.textContent;
            }
          }, {
            key : "appendAnimationCss",
            value : function(name) {
              if (name.autoInsertCss && name.showCursor && name.fadeOut) {
                /** @type {!Element} */
                var style = document.createElement("style");
                /** @type {string} */
                style.type = "text/css";
                /** @type {string} */
                var s = "";
                if (name.showCursor) {
                  /** @type {string} */
                  s = s + "\n        .typed-cursor{\n          opacity: 1;\n          animation: typedjsBlink 0.7s infinite;\n          -webkit-animation: typedjsBlink 0.7s infinite;\n                  animation: typedjsBlink 0.7s infinite;\n        }\n        @keyframes typedjsBlink{\n          50% { opacity: 0.0; }\n        }\n        @-webkit-keyframes typedjsBlink{\n          0% { opacity: 1; }\n          50% { opacity: 0.0; }\n          100% { opacity: 1; }\n        }\n      ";
                }
                if (name.fadeOut) {
                  /** @type {string} */
                  s = s + "\n        .typed-fade-out{\n          opacity: 0;\n          transition: opacity .25s;\n          -webkit-animation: 0;\n                  animation: 0;\n        }\n      ";
                }
                if (0 !== style.length) {
                  /** @type {string} */
                  style.innerHTML = s;
                  document.head.appendChild(style);
                }
              }
            }
          }]), n;
        }();
        module.default = EventEmitter;
        var buttons = new EventEmitter;
        module.initializer = buttons;
      }, function(module, res) {
        Object.defineProperty(res, "__esModule", {
          value : true
        });
        var obj = {
          strings : ["These are the default values...", "You know what you should do?", "Use your own!", "Have a great day!"],
          stringsElement : null,
          typeSpeed : 0,
          startDelay : 0,
          backSpeed : 0,
          smartBackspace : true,
          shuffle : false,
          backDelay : 700,
          fadeOut : false,
          fadeOutClass : "typed-fade-out",
          fadeOutDelay : 500,
          loop : false,
          loopCount : 1 / 0,
          showCursor : true,
          cursorChar : "|",
          autoInsertCss : true,
          attr : null,
          bindInputFocusEvents : false,
          contentType : "html",
          onComplete : function(server) {
          },
          preStringTyped : function(marktype, itemData) {
          },
          onStringTyped : function(marktype, itemData) {
          },
          onLastStringBackspaced : function(canCreateDiscussions) {
          },
          onTypingPaused : function(requestName, arg_parent) {
          },
          onTypingResumed : function(requestName, arg_parent) {
          },
          onReset : function(value) {
          },
          onStop : function(callback, to) {
          },
          onStart : function(to, from) {
          },
          onDestroy : function(s) {
          }
        };
        res.default = obj;
        module.exports = res.default;
      }, function(canCreateDiscussions, exports) {
        /**
         * @param {!AudioNode} value
         * @param {!Function} type
         * @return {undefined}
         */
        function n(value, type) {
          if (!(value instanceof type)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        Object.defineProperty(exports, "__esModule", {
          value : true
        });
        var i = function() {
          /**
           * @param {!Function} d
           * @param {string} props
           * @return {undefined}
           */
          function t(d, props) {
            /** @type {number} */
            var i = 0;
            for (; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              /** @type {boolean} */
              descriptor.configurable = true;
              if ("value" in descriptor) {
                /** @type {boolean} */
                descriptor.writable = true;
              }
              Object.defineProperty(d, descriptor.key, descriptor);
            }
          }
          return function(p, n, a) {
            return n && t(p.prototype, n), a && t(p, a), p;
          };
        }();
        var EventEmitter = function() {
          /**
           * @return {undefined}
           */
          function t() {
            n(this, t);
          }
          return i(t, [{
            key : "typeHtmlChars",
            value : function(name, n, a) {
              if ("html" !== a.contentType) {
                return n;
              }
              var value = name.substr(n).charAt(0);
              if ("<" === value || "&" === value) {
                /** @type {string} */
                var th_field = "";
                /** @type {string} */
                th_field = "<" === value ? ">" : ";";
                for (; name.substr(n + 1).charAt(0) !== th_field && !(++n + 1 > name.length);) {
                }
                n++;
              }
              return n;
            }
          }, {
            key : "backSpaceHtmlChars",
            value : function(name, c, a) {
              if ("html" !== a.contentType) {
                return c;
              }
              var value = name.substr(c).charAt(0);
              if (">" === value || ";" === value) {
                /** @type {string} */
                var th_field = "";
                /** @type {string} */
                th_field = ">" === value ? "<" : "&";
                for (; name.substr(c - 1).charAt(0) !== th_field && !(--c < 0);) {
                }
                c--;
              }
              return c;
            }
          }]), t;
        }();
        exports.default = EventEmitter;
        var queue = new EventEmitter;
        exports.htmlParser = queue;
      }]);
    });
  },
  oOvE : function(clickRepeater, e, n) {
    (function(resultPage) {
      +function($) {
        /**
         * @param {!Function} config
         * @return {?}
         */
        function Plugin(config) {
          return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.popover");
            var options = "object" == typeof config && config;
            if (!(!data && /destroy|hide/.test(config))) {
              if (!data) {
                $this.data("bs.popover", data = new Popover(this, options));
              }
              if ("string" == typeof config) {
                data[config]();
              }
            }
          });
        }
        /**
         * @param {string} element
         * @param {!Object} options
         * @return {undefined}
         */
        var Popover = function(element, options) {
          this.init("popover", element, options);
        };
        if (!$.fn.tooltip) {
          throw new Error("Popover requires tooltip.js");
        }
        /** @type {string} */
        Popover.VERSION = "3.3.7";
        Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
          placement : "right",
          trigger : "click",
          content : "",
          template : '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
        });
        Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);
        /** @type {function(string, !Object): undefined} */
        Popover.prototype.constructor = Popover;
        /**
         * @return {?}
         */
        Popover.prototype.getDefaults = function() {
          return Popover.DEFAULTS;
        };
        /**
         * @return {undefined}
         */
        Popover.prototype.setContent = function() {
          var $tip = this.tip();
          var titleText = this.getTitle();
          var c = this.getContent();
          $tip.find(".popover-title")[this.options.html ? "html" : "text"](titleText);
          $tip.find(".popover-content").children().detach().end()[this.options.html ? "string" == typeof c ? "html" : "append" : "text"](c);
          $tip.removeClass("fade top bottom left right in");
          if (!$tip.find(".popover-title").html()) {
            $tip.find(".popover-title").hide();
          }
        };
        /**
         * @return {?}
         */
        Popover.prototype.hasContent = function() {
          return this.getTitle() || this.getContent();
        };
        /**
         * @return {?}
         */
        Popover.prototype.getContent = function() {
          var $e = this.$element;
          var o = this.options;
          return $e.attr("data-content") || ("function" == typeof o.content ? o.content.call($e[0]) : o.content);
        };
        /**
         * @return {?}
         */
        Popover.prototype.arrow = function() {
          return this.$arrow = this.$arrow || this.tip().find(".arrow");
        };
        var old = $.fn.popover;
        /** @type {function(!Function): ?} */
        $.fn.popover = Plugin;
        /** @type {function(string, !Object): undefined} */
        $.fn.popover.Constructor = Popover;
        /**
         * @return {?}
         */
        $.fn.popover.noConflict = function() {
          return $.fn.popover = old, this;
        };
      }(resultPage);
    }).call(e, n("juYr"));
  },
  pax0 : function(s, result, $) {
    /**
     * @param {string} n
     * @return {?}
     */
    function a(n) {
      return $(b(n));
    }
    /**
     * @param {string} key
     * @return {?}
     */
    function b(key) {
      var r = rrnames[key];
      if (!(r + 1)) {
        throw new Error("Cannot find module '" + key + "'.");
      }
      return r;
    }
    var rrnames = {
      "./apple-icon-180x180.png" : "4FPD",
      "./images/profil.jpg" : "4hhi",
      "./images/space.jpg" : "wonT",
      "./images/work001-01.jpg" : "bz8M",
      "./images/work001-02.jpg" : "tmRP",
      "./images/work001-03.jpg" : "4vuW",
      "./images/work001-04.jpg" : "LyUB",
      "./images/work01-hover.jpg" : "jgpj",
      "./images/work02-hover.jpg" : "wvqX",
      "./images/work03-hover.jpg" : "6xrK"
    };
    /**
     * @return {?}
     */
    a.keys = function() {
      return Object.keys(rrnames);
    };
    /** @type {function(string): ?} */
    a.resolve = b;
    /** @type {function(string): ?} */
    s.exports = a;
    /** @type {string} */
    a.id = "pax0";
  },
  s51k : function(clickRepeater, e, n) {
    (function(resultPage) {
      +function($) {
        /**
         * @param {?} name
         * @return {?}
         */
        function Plugin(name) {
          return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.alert");
            if (!data) {
              $this.data("bs.alert", data = new Alert(this));
            }
            if ("string" == typeof name) {
              data[name].call($this);
            }
          });
        }
        /** @type {string} */
        var n = '[data-dismiss="alert"]';
        /**
         * @param {string} type
         * @return {undefined}
         */
        var Alert = function(type) {
          $(type).on("click", n, this.close);
        };
        /** @type {string} */
        Alert.VERSION = "3.3.7";
        /** @type {number} */
        Alert.TRANSITION_DURATION = 150;
        /**
         * @param {!Object} e
         * @return {undefined}
         */
        Alert.prototype.close = function(e) {
          /**
           * @return {undefined}
           */
          function removeElement() {
            $parent.detach().trigger("closed.bs.alert").remove();
          }
          var $this = $(this);
          var value = $this.attr("data-target");
          if (!value) {
            value = $this.attr("href");
            value = value && value.replace(/.*(?=#[^\s]*$)/, "");
          }
          var $parent = $("#" === value ? [] : value);
          if (e) {
            e.preventDefault();
          }
          if (!$parent.length) {
            $parent = $this.closest(".alert");
          }
          $parent.trigger(e = $.Event("close.bs.alert"));
          if (!e.isDefaultPrevented()) {
            $parent.removeClass("in");
            if ($.support.transition && $parent.hasClass("fade")) {
              $parent.one("bsTransitionEnd", removeElement).emulateTransitionEnd(Alert.TRANSITION_DURATION);
            } else {
              removeElement();
            }
          }
        };
        var old = $.fn.alert;
        /** @type {function(?): ?} */
        $.fn.alert = Plugin;
        /** @type {function(string): undefined} */
        $.fn.alert.Constructor = Alert;
        /**
         * @return {?}
         */
        $.fn.alert.noConflict = function() {
          return $.fn.alert = old, this;
        };
        $(document).on("click.bs.alert.data-api", n, Alert.prototype.close);
      }(resultPage);
    }).call(e, n("juYr"));
  },
  tmRP : function(blob, name, universe) {
    /** @type {string} */
    blob.exports = universe.p + "assets/images/work001-02.jpg";
  },
  vQEO : function(clickRepeater, e, n) {
    (function(resultPage) {
      +function($) {
        /**
         * @param {?} element
         * @return {?}
         */
        function Plugin(element) {
          return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.tab");
            if (!data) {
              $this.data("bs.tab", data = new Tab(this));
            }
            if ("string" == typeof element) {
              data[element]();
            }
          });
        }
        /**
         * @param {string} name
         * @return {undefined}
         */
        var Tab = function(name) {
          this.element = $(name);
        };
        /** @type {string} */
        Tab.VERSION = "3.3.7";
        /** @type {number} */
        Tab.TRANSITION_DURATION = 150;
        /**
         * @return {undefined}
         */
        Tab.prototype.show = function() {
          var $this = this.element;
          var result = $this.closest("ul:not(.dropdown-menu)");
          var s = $this.data("target");
          if (s || (s = $this.attr("href"), s = s && s.replace(/.*(?=#[^\s]*$)/, "")), !$this.parent("li").hasClass("active")) {
            var $previous = result.find(".active:last a");
            var tap = $.Event("hide.bs.tab", {
              relatedTarget : $this[0]
            });
            var event = $.Event("show.bs.tab", {
              relatedTarget : $previous[0]
            });
            if ($previous.trigger(tap), $this.trigger(event), !event.isDefaultPrevented() && !tap.isDefaultPrevented()) {
              var i = $(s);
              this.activate($this.closest("li"), result);
              this.activate(i, i.parent(), function() {
                $previous.trigger({
                  type : "hidden.bs.tab",
                  relatedTarget : $this[0]
                });
                $this.trigger({
                  type : "shown.bs.tab",
                  relatedTarget : $previous[0]
                });
              });
            }
          }
        };
        /**
         * @param {!Object} element
         * @param {!Object} target
         * @param {(!Function|string)} callback
         * @return {undefined}
         */
        Tab.prototype.activate = function(element, target, callback) {
          /**
           * @return {undefined}
           */
          function next() {
            $active.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", false);
            element.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded", true);
            if (transition) {
              element[0].offsetWidth;
              element.addClass("in");
            } else {
              element.removeClass("fade");
            }
            if (element.parent(".dropdown-menu").length) {
              element.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", true);
            }
            if (callback) {
              callback();
            }
          }
          var $active = target.find("> .active");
          var transition = callback && $.support.transition && ($active.length && $active.hasClass("fade") || !!target.find("> .fade").length);
          if ($active.length && transition) {
            $active.one("bsTransitionEnd", next).emulateTransitionEnd(Tab.TRANSITION_DURATION);
          } else {
            next();
          }
          $active.removeClass("in");
        };
        var old = $.fn.tab;
        /** @type {function(?): ?} */
        $.fn.tab = Plugin;
        /** @type {function(string): undefined} */
        $.fn.tab.Constructor = Tab;
        /**
         * @return {?}
         */
        $.fn.tab.noConflict = function() {
          return $.fn.tab = old, this;
        };
        /**
         * @param {!Event} thing
         * @return {undefined}
         */
        var o = function(thing) {
          thing.preventDefault();
          Plugin.call($(this), "show");
        };
        $(document).on("click.bs.tab.data-api", '[data-toggle="tab"]', o).on("click.bs.tab.data-api", '[data-toggle="pill"]', o);
      }(resultPage);
    }).call(e, n("juYr"));
  },
  wonT : function(blob, name, universe) {
    /** @type {string} */
    blob.exports = universe.p + "assets/images/space.jpg";
  },
  wvqX : function(blob, name, universe) {
    /** @type {string} */
    blob.exports = universe.p + "assets/images/work02-hover.jpg";
  },
  x66a : function(clickRepeater, e, n) {
    (function(resultPage) {
      +function($) {
        /**
         * @param {boolean} options
         * @return {?}
         */
        function Plugin(options) {
          return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.carousel");
            var _config = $.extend({}, Carousel.DEFAULTS, $this.data(), "object" == typeof options && options);
            var id = "string" == typeof options ? options : _config.slide;
            if (!data) {
              $this.data("bs.carousel", data = new Carousel(this, _config));
            }
            if ("number" == typeof options) {
              data.to(options);
            } else {
              if (id) {
                data[id]();
              } else {
                if (_config.interval) {
                  data.pause().cycle();
                }
              }
            }
          });
        }
        /**
         * @param {string} element
         * @param {!Object} options
         * @return {undefined}
         */
        var Carousel = function(element, options) {
          this.$element = $(element);
          this.$indicators = this.$element.find(".carousel-indicators");
          /** @type {!Object} */
          this.options = options;
          /** @type {null} */
          this.paused = null;
          /** @type {null} */
          this.sliding = null;
          /** @type {null} */
          this.interval = null;
          /** @type {null} */
          this.$active = null;
          /** @type {null} */
          this.$items = null;
          if (this.options.keyboard) {
            this.$element.on("keydown.bs.carousel", $.proxy(this.keydown, this));
          }
          if ("hover" == this.options.pause && !("ontouchstart" in document.documentElement)) {
            this.$element.on("mouseenter.bs.carousel", $.proxy(this.pause, this)).on("mouseleave.bs.carousel", $.proxy(this.cycle, this));
          }
        };
        /** @type {string} */
        Carousel.VERSION = "3.3.7";
        /** @type {number} */
        Carousel.TRANSITION_DURATION = 600;
        Carousel.DEFAULTS = {
          interval : 5E3,
          pause : "hover",
          wrap : true,
          keyboard : true
        };
        /**
         * @param {!Event} event
         * @return {undefined}
         */
        Carousel.prototype.keydown = function(event) {
          if (!/input|textarea/i.test(event.target.tagName)) {
            switch(event.which) {
              case 37:
                this.prev();
                break;
              case 39:
                this.next();
                break;
              default:
                return;
            }
            event.preventDefault();
          }
        };
        /**
         * @param {string} options
         * @return {?}
         */
        Carousel.prototype.cycle = function(options) {
          return options || (this.paused = false), this.interval && clearInterval(this.interval), this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval)), this;
        };
        /**
         * @param {?} item
         * @return {?}
         */
        Carousel.prototype.getItemIndex = function(item) {
          return this.$items = item.parent().children(".item"), this.$items.index(item || this.$active);
        };
        /**
         * @param {string} d
         * @param {?} active
         * @return {?}
         */
        Carousel.prototype.getItemForDirection = function(d, active) {
          var activeIndex = this.getItemIndex(active);
          if (("prev" == d && 0 === activeIndex || "next" == d && activeIndex == this.$items.length - 1) && !this.options.wrap) {
            return active;
          }
          /** @type {number} */
          var delta = "prev" == d ? -1 : 1;
          /** @type {number} */
          var index = (activeIndex + delta) % this.$items.length;
          return this.$items.eq(index);
        };
        /**
         * @param {number} pos
         * @return {?}
         */
        Carousel.prototype.to = function(pos) {
          var e = this;
          var activeIndex = this.getItemIndex(this.$active = this.$element.find(".item.active"));
          if (!(pos > this.$items.length - 1 || pos < 0)) {
            return this.sliding ? this.$element.one("slid.bs.carousel", function() {
              e.to(pos);
            }) : activeIndex == pos ? this.pause().cycle() : this.slide(pos > activeIndex ? "next" : "prev", this.$items.eq(pos));
          }
        };
        /**
         * @param {string} promisedResponse
         * @return {?}
         */
        Carousel.prototype.pause = function(promisedResponse) {
          return promisedResponse || (this.paused = true), this.$element.find(".next, .prev").length && $.support.transition && (this.$element.trigger($.support.transition.end), this.cycle(true)), this.interval = clearInterval(this.interval), this;
        };
        /**
         * @return {?}
         */
        Carousel.prototype.next = function() {
          if (!this.sliding) {
            return this.slide("next");
          }
        };
        /**
         * @return {?}
         */
        Carousel.prototype.prev = function() {
          if (!this.sliding) {
            return this.slide("prev");
          }
        };
        /**
         * @param {string} type
         * @param {string} next
         * @return {?}
         */
        Carousel.prototype.slide = function(type, next) {
          var $active = this.$element.find(".item.active");
          var $next = next || this.getItemForDirection(type, $active);
          var isCycling = this.interval;
          /** @type {string} */
          var direction = "next" == type ? "left" : "right";
          var that = this;
          if ($next.hasClass("active")) {
            return this.sliding = false;
          }
          var relatedTarget = $next[0];
          var event = $.Event("slide.bs.carousel", {
            relatedTarget : relatedTarget,
            direction : direction
          });
          if (this.$element.trigger(event), !event.isDefaultPrevented()) {
            if (this.sliding = true, isCycling && this.pause(), this.$indicators.length) {
              this.$indicators.find(".active").removeClass("active");
              var formsearch = $(this.$indicators.children()[this.getItemIndex($next)]);
              if (formsearch) {
                formsearch.addClass("active");
              }
            }
            var name = $.Event("slid.bs.carousel", {
              relatedTarget : relatedTarget,
              direction : direction
            });
            return $.support.transition && this.$element.hasClass("slide") ? ($next.addClass(type), $next[0].offsetWidth, $active.addClass(direction), $next.addClass(direction), $active.one("bsTransitionEnd", function() {
              $next.removeClass([type, direction].join(" ")).addClass("active");
              $active.removeClass(["active", direction].join(" "));
              /** @type {boolean} */
              that.sliding = false;
              setTimeout(function() {
                that.$element.trigger(name);
              }, 0);
            }).emulateTransitionEnd(Carousel.TRANSITION_DURATION)) : ($active.removeClass("active"), $next.addClass("active"), this.sliding = false, this.$element.trigger(name)), isCycling && this.cycle(), this;
          }
        };
        var old = $.fn.carousel;
        /** @type {function(boolean): ?} */
        $.fn.carousel = Plugin;
        /** @type {function(string, !Object): undefined} */
        $.fn.carousel.Constructor = Carousel;
        /**
         * @return {?}
         */
        $.fn.carousel.noConflict = function() {
          return $.fn.carousel = old, this;
        };
        /**
         * @param {!Event} event
         * @return {undefined}
         */
        var clickHandler = function(event) {
          var href;
          var $this = $(this);
          var $target = $($this.attr("data-target") || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, ""));
          if ($target.hasClass("carousel")) {
            var module = $.extend({}, $target.data(), $this.data());
            var slideIndex = $this.attr("data-slide-to");
            if (slideIndex) {
              /** @type {boolean} */
              module.interval = false;
            }
            Plugin.call($target, module);
            if (slideIndex) {
              $target.data("bs.carousel").to(slideIndex);
            }
            event.preventDefault();
          }
        };
        $(document).on("click.bs.carousel.data-api", "[data-slide]", clickHandler).on("click.bs.carousel.data-api", "[data-slide-to]", clickHandler);
        $(window).on("load", function() {
          $('[data-ride="carousel"]').each(function() {
            var $spy = $(this);
            Plugin.call($spy, $spy.data());
          });
        });
      }(resultPage);
    }).call(e, n("juYr"));
  }
});
